{
  "version": 3,
  "sources": ["../d3-polygon/src/area.js", "../d3-polygon/src/centroid.js", "../d3-polygon/src/cross.js", "../d3-polygon/src/hull.js", "../d3-polygon/src/contains.js", "../d3-polygon/src/length.js"],
  "sourcesContent": ["export default function(polygon) {\n  var i = -1,\n      n = polygon.length,\n      a,\n      b = polygon[n - 1],\n      area = 0;\n\n  while (++i < n) {\n    a = b;\n    b = polygon[i];\n    area += a[1] * b[0] - a[0] * b[1];\n  }\n\n  return area / 2;\n}\n", "export default function(polygon) {\n  var i = -1,\n      n = polygon.length,\n      x = 0,\n      y = 0,\n      a,\n      b = polygon[n - 1],\n      c,\n      k = 0;\n\n  while (++i < n) {\n    a = b;\n    b = polygon[i];\n    k += c = a[0] * b[1] - b[0] * a[1];\n    x += (a[0] + b[0]) * c;\n    y += (a[1] + b[1]) * c;\n  }\n\n  return k *= 3, [x / k, y / k];\n}\n", "// Returns the 2D cross product of AB and AC vectors, i.e., the z-component of\n// the 3D cross product in a quadrant I Cartesian coordinate system (+x is\n// right, +y is up). Returns a positive value if ABC is counter-clockwise,\n// negative if clockwise, and zero if the points are collinear.\nexport default function(a, b, c) {\n  return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);\n}\n", "import cross from \"./cross.js\";\n\nfunction lexicographicOrder(a, b) {\n  return a[0] - b[0] || a[1] - b[1];\n}\n\n// Computes the upper convex hull per the monotone chain algorithm.\n// Assumes points.length >= 3, is sorted by x, unique in y.\n// Returns an array of indices into points in left-to-right order.\nfunction computeUpperHullIndexes(points) {\n  var n = points.length,\n      indexes = [0, 1],\n      size = 2;\n\n  for (var i = 2; i < n; ++i) {\n    while (size > 1 && cross(points[indexes[size - 2]], points[indexes[size - 1]], points[i]) <= 0) --size;\n    indexes[size++] = i;\n  }\n\n  return indexes.slice(0, size); // remove popped points\n}\n\nexport default function(points) {\n  if ((n = points.length) < 3) return null;\n\n  var i,\n      n,\n      sortedPoints = new Array(n),\n      flippedPoints = new Array(n);\n\n  for (i = 0; i < n; ++i) sortedPoints[i] = [+points[i][0], +points[i][1], i];\n  sortedPoints.sort(lexicographicOrder);\n  for (i = 0; i < n; ++i) flippedPoints[i] = [sortedPoints[i][0], -sortedPoints[i][1]];\n\n  var upperIndexes = computeUpperHullIndexes(sortedPoints),\n      lowerIndexes = computeUpperHullIndexes(flippedPoints);\n\n  // Construct the hull polygon, removing possible duplicate endpoints.\n  var skipLeft = lowerIndexes[0] === upperIndexes[0],\n      skipRight = lowerIndexes[lowerIndexes.length - 1] === upperIndexes[upperIndexes.length - 1],\n      hull = [];\n\n  // Add upper hull in right-to-l order.\n  // Then add lower hull in left-to-right order.\n  for (i = upperIndexes.length - 1; i >= 0; --i) hull.push(points[sortedPoints[upperIndexes[i]][2]]);\n  for (i = +skipLeft; i < lowerIndexes.length - skipRight; ++i) hull.push(points[sortedPoints[lowerIndexes[i]][2]]);\n\n  return hull;\n}\n", "export default function(polygon, point) {\n  var n = polygon.length,\n      p = polygon[n - 1],\n      x = point[0], y = point[1],\n      x0 = p[0], y0 = p[1],\n      x1, y1,\n      inside = false;\n\n  for (var i = 0; i < n; ++i) {\n    p = polygon[i], x1 = p[0], y1 = p[1];\n    if (((y1 > y) !== (y0 > y)) && (x < (x0 - x1) * (y - y1) / (y0 - y1) + x1)) inside = !inside;\n    x0 = x1, y0 = y1;\n  }\n\n  return inside;\n}\n", "export default function(polygon) {\n  var i = -1,\n      n = polygon.length,\n      b = polygon[n - 1],\n      xa,\n      ya,\n      xb = b[0],\n      yb = b[1],\n      perimeter = 0;\n\n  while (++i < n) {\n    xa = xb;\n    ya = yb;\n    b = polygon[i];\n    xb = b[0];\n    yb = b[1];\n    xa -= xb;\n    ya -= yb;\n    perimeter += Math.sqrt(xa * xa + ya * ya);\n  }\n\n  return perimeter;\n}\n"],
  "mappings": "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",
  "names": []
}
