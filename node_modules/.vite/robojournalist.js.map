{
  "version": 3,
  "sources": ["../robojournalist/index.js", "dep:robojournalist"],
  "sourcesContent": ["const ordinal = i => {\n\tif (i < 10) {\n\t\treturn [\n\t\t\t'',\n\t\t\t'first',\n\t\t\t'second',\n\t\t\t'third',\n\t\t\t'fourth',\n\t\t\t'fifth',\n\t\t\t'sixth',\n\t\t\t'seventh',\n\t\t\t'eighth',\n\t\t\t'ninth'\n\t\t][i];\n\t}\n\n\tconst j = i % 10;\n\tconst k = i % 100;\n\tif (j === 1 && k !== 11) {\n\t\treturn i + 'st';\n\t}\n\n\tif (j === 2 && k !== 12) {\n\t\treturn i + 'nd';\n\t}\n\n\tif (j === 3 && k !== 13) {\n\t\treturn i + 'rd';\n\t}\n\n\treturn i + 'th';\n};\n\nconst ordinalExcludingFirst = i => {\n\tif (i === 1) {\n\t\treturn '';\n\t}\n\n\treturn ordinal(i) + ' ';\n};\n\nconst numberWord = i => {\n\tif (i === Math.floor(i) && i >= 1 && i <= 9) {\n\t\treturn [\n\t\t\t'',\n\t\t\t'one',\n\t\t\t'two',\n\t\t\t'three',\n\t\t\t'four',\n\t\t\t'five',\n\t\t\t'six',\n\t\t\t'seven',\n\t\t\t'eight',\n\t\t\t'nine'\n\t\t][i];\n\t}\n\n\treturn i;\n};\n\nconst addAOrAn = n => {\n\tn = String(n);\n\tconst useAn = n === '11' || n === '18' || n[0] === '8' || n[0] === 'e';\n\treturn useAn ? 'an ' + n : 'a ' + n;\n};\n\n// https://stackoverflow.com/a/2901298/3347737\nconst numberWithCommas = x => x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n\nconst possessive = s => {\n\tif (s[s.length - 1] === 's') {\n\t\treturn s + '\\'';\n\t}\n\n\treturn s + '\\'s';\n};\n\nconst createText = (template, dict) => {\n\t// This is based on Douglas Crockford's old json_parse https://github.com/douglascrockford/JSON-js/blob/03157639c7a7cddd2e9f032537f346f1a87c0f6d/json_parse.js\n\n\tif (typeof template !== 'string') {\n\t\tthrow new TypeError(`Expected a string, got ${typeof template}`);\n\t}\n\n\tlet at = 1;\n\tlet ch = template.charAt(0);\n\n\tconst getCh = function () {\n\t\t// Just to keep xo happy\n\t\treturn ch;\n\t};\n\n\tconst error = function (m) {\n\t\tthrow JSON.stringify({\n\t\t\tname: 'Robo-journalist error',\n\t\t\tmessage: m,\n\t\t\tat,\n\t\t\ttext: template\n\t\t});\n\t};\n\n\tconst next = function (c) {\n\t\t// If a c parameter is provided, verify that it matches the current character.\n\t\tif (c && c !== ch) {\n\t\t\terror('Expected \\'' + c + '\\' instead of \\'' + ch + '\\'');\n\t\t}\n\n\t\t// Get the next character. When there are no more characters,\n\t\t// return the empty string.\n\t\tch = template.charAt(at);\n\t\tat += 1;\n\t\treturn ch;\n\t};\n\n\tconst getValue = function (key) {\n\t\tconst parts = key.split('.');\n\t\tlet d = dict;\n\t\tfor (const part of parts) {\n\t\t\ttry {\n\t\t\t\td = d[part];\n\t\t\t} catch {\n\t\t\t\terror(`${key} is not in the data dictionary.`);\n\t\t\t}\n\t\t}\n\n\t\treturn d;\n\t};\n\n\tconst rpn = function (key) {\n\t\tconst tokens = key.split(' ');\n\t\tconst binaryOperators = {\n\t\t\t'+': (a, b) => a + b,\n\t\t\t'-': (a, b) => a - b,\n\t\t\t'*': (a, b) => a * b,\n\t\t\t'/': (a, b) => a / b,\n\t\t\t'<': (a, b) => a < b,\n\t\t\t'>': (a, b) => a > b,\n\t\t\t'<=': (a, b) => a <= b,\n\t\t\t'>=': (a, b) => a >= b,\n\t\t\t'===': (a, b) => a === b\n\t\t};\n\t\tconst unaryOperators = {\n\t\t\t'\\'': a => possessive(a),\n\t\t\t',': a => numberWithCommas(a),\n\t\t\t'.-2': a => (a / 100).toFixed(0) * 100,\n\t\t\t'.-1': a => (a / 10).toFixed(0) * 10,\n\t\t\t'.0': a => a.toFixed(0),\n\t\t\t'.1': a => a.toFixed(1),\n\t\t\t'.2': a => a.toFixed(2),\n\t\t\t'~abs': a => Math.abs(a),\n\t\t\t'~ord': a => ordinal(Number(a)),\n\t\t\t'~ord\\'': a => ordinalExcludingFirst(Number(a)),\n\t\t\t'~word': a => numberWord(Number(a)),\n\t\t\t'~aan': a => addAOrAn(a)\n\t\t};\n\t\tconst stack = [];\n\t\tfor (const token of tokens) {\n\t\t\tif (/^-?\\d+$/.test(token)) {\n\t\t\t\t// An integer literal\n\t\t\t\tstack.push(Number(token));\n\t\t\t} else if (token in binaryOperators) {\n\t\t\t\tconst b = Number(stack.pop());\n\t\t\t\tconst a = Number(stack.pop());\n\t\t\t\tstack.push(binaryOperators[token](a, b));\n\t\t\t} else if (token in unaryOperators) {\n\t\t\t\tconst a = stack.pop();\n\t\t\t\tstack.push(unaryOperators[token](a));\n\t\t\t} else if (token.charAt(0) === '^') {\n\t\t\t\tstack[stack.length - 1] = getValue(token.slice(1))(stack[stack.length - 1]);\n\t\t\t} else {\n\t\t\t\tstack.push(getValue(token));\n\t\t\t}\n\t\t}\n\n\t\tif (stack.length !== 1) {\n\t\t\terror('Invalid RPN');\n\t\t}\n\n\t\treturn stack[0];\n\t};\n\n\tconst eitherOr = function (which) {\n\t\tnext('?');\n\t\tconst first = parse();\n\t\tnext(':');\n\t\tconst second = parse();\n\t\tnext('}');\n\t\treturn which ? first : second;\n\t};\n\n\tconst braced = function () {\n\t\tnext('{');\n\t\tif (ch === ':') {\n\t\t\t// {:} adds a colon to the output\n\t\t\tnext(':');\n\t\t\tnext('}');\n\t\t\treturn ':';\n\t\t}\n\n\t\tif (ch === '?') {\n\t\t\t// {?} adds a colon to the output\n\t\t\tnext('?');\n\t\t\tnext('}');\n\t\t\treturn '?';\n\t\t}\n\n\t\tlet varName = '';\n\t\twhile (getCh()) {\n\t\t\tif (ch === '}') {\n\t\t\t\tnext('}');\n\t\t\t\treturn rpn(varName);\n\t\t\t}\n\n\t\t\tif (ch === '?') {\n\t\t\t\treturn eitherOr(rpn(varName));\n\t\t\t}\n\n\t\t\tvarName += ch;\n\t\t\tnext();\n\t\t}\n\n\t\terror('Braces not closed');\n\t};\n\n\tconst parse = function () {\n\t\tlet result = '';\n\t\twhile (getCh()) {\n\t\t\tif (ch === ':' || ch === '}') {\n\t\t\t\treturn result;\n\t\t\t}\n\n\t\t\tif (ch === '{') {\n\t\t\t\tresult += braced();\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tresult += ch;\n\t\t\tnext();\n\t\t}\n\n\t\treturn result;\n\t};\n\n\tconst result = parse();\n\tif (ch !== '') {\n\t\terror(`Didn't expect '${ch}'`);\n\t}\n\n\treturn result;\n};\n\nexport default createText;\n", "import d from \"./node_modules/robojournalist/index.js\";export default d;"],
  "mappings": "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",
  "names": []
}
