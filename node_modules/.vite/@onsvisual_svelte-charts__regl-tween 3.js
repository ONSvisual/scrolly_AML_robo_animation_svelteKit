import {
  __commonJS
} from "./chunk-ESTXZSVW.js";

// node_modules/strip-comments/index.js
var require_strip_comments = __commonJS({
  "node_modules/strip-comments/index.js"(exports, module) {
    "use strict";
    var reBlock = /\/\*(?!\/)(.|[\r\n]|\n)+?\*\/\n?\n?/gm;
    var reBlockIgnore = /\/\*(?!(\*?\/|\*?\!))(.|[\r\n]|\n)+?\*\/\n?\n?/gm;
    var reLine = /(^|[^\S\n])(?:\/\/)([\s\S]+?)$/gm;
    var reLineIgnore = /(^|[^\S\n])(?:\/\/[^!])([\s\S]+?)$/gm;
    function strip(str, opts) {
      return str ? strip.block(strip.line(str, opts), opts) : "";
    }
    strip.block = function(str, opts) {
      opts = opts || {};
      var re = reBlock;
      if (opts.safe) {
        re = reBlockIgnore;
      }
      return str ? str.replace(re, "") : "";
    };
    strip.line = function(str, opts) {
      opts = opts || {};
      var re = reLine;
      if (opts.safe) {
        re = reLineIgnore;
      }
      return str ? str.replace(re, "") : "";
    };
    module.exports = strip;
  }
});

// node_modules/lerp/index.js
var require_lerp = __commonJS({
  "node_modules/lerp/index.js"(exports, module) {
    function lerp(v0, v1, t) {
      return v0 * (1 - t) + v1 * t;
    }
    module.exports = lerp;
  }
});

// node_modules/camelcase/index.js
var require_camelcase = __commonJS({
  "node_modules/camelcase/index.js"(exports, module) {
    "use strict";
    function preserveCamelCase(str) {
      var isLastCharLower = false;
      for (var i = 0; i < str.length; i++) {
        var c = str.charAt(i);
        if (isLastCharLower && /[a-zA-Z]/.test(c) && c.toUpperCase() === c) {
          str = str.substr(0, i) + "-" + str.substr(i);
          isLastCharLower = false;
          i++;
        } else {
          isLastCharLower = c.toLowerCase() === c;
        }
      }
      return str;
    }
    module.exports = function() {
      var str = [].map.call(arguments, function(str2) {
        return str2.trim();
      }).filter(function(str2) {
        return str2.length;
      }).join("-");
      if (!str.length) {
        return "";
      }
      if (str.length === 1) {
        return str.toLowerCase();
      }
      if (!/[_.\- ]+/.test(str)) {
        if (str === str.toUpperCase()) {
          return str.toLowerCase();
        }
        if (str[0] !== str[0].toLowerCase()) {
          return str[0].toLowerCase() + str.slice(1);
        }
        return str;
      }
      str = preserveCamelCase(str);
      return str.replace(/^[_.\- ]+/, "").toLowerCase().replace(/[_.\- ]+(\w|$)/g, function(m, p1) {
        return p1.toUpperCase();
      });
    };
  }
});

// node_modules/eases/back-in-out.js
var require_back_in_out = __commonJS({
  "node_modules/eases/back-in-out.js"(exports, module) {
    function backInOut(t) {
      var s = 1.70158 * 1.525;
      if ((t *= 2) < 1)
        return 0.5 * (t * t * ((s + 1) * t - s));
      return 0.5 * ((t -= 2) * t * ((s + 1) * t + s) + 2);
    }
    module.exports = backInOut;
  }
});

// node_modules/eases/back-in.js
var require_back_in = __commonJS({
  "node_modules/eases/back-in.js"(exports, module) {
    function backIn(t) {
      var s = 1.70158;
      return t * t * ((s + 1) * t - s);
    }
    module.exports = backIn;
  }
});

// node_modules/eases/back-out.js
var require_back_out = __commonJS({
  "node_modules/eases/back-out.js"(exports, module) {
    function backOut(t) {
      var s = 1.70158;
      return --t * t * ((s + 1) * t + s) + 1;
    }
    module.exports = backOut;
  }
});

// node_modules/eases/bounce-out.js
var require_bounce_out = __commonJS({
  "node_modules/eases/bounce-out.js"(exports, module) {
    function bounceOut(t) {
      var a = 4 / 11;
      var b = 8 / 11;
      var c = 9 / 10;
      var ca = 4356 / 361;
      var cb = 35442 / 1805;
      var cc = 16061 / 1805;
      var t2 = t * t;
      return t < a ? 7.5625 * t2 : t < b ? 9.075 * t2 - 9.9 * t + 3.4 : t < c ? ca * t2 - cb * t + cc : 10.8 * t * t - 20.52 * t + 10.72;
    }
    module.exports = bounceOut;
  }
});

// node_modules/eases/bounce-in-out.js
var require_bounce_in_out = __commonJS({
  "node_modules/eases/bounce-in-out.js"(exports, module) {
    var bounceOut = require_bounce_out();
    function bounceInOut(t) {
      return t < 0.5 ? 0.5 * (1 - bounceOut(1 - t * 2)) : 0.5 * bounceOut(t * 2 - 1) + 0.5;
    }
    module.exports = bounceInOut;
  }
});

// node_modules/eases/bounce-in.js
var require_bounce_in = __commonJS({
  "node_modules/eases/bounce-in.js"(exports, module) {
    var bounceOut = require_bounce_out();
    function bounceIn(t) {
      return 1 - bounceOut(1 - t);
    }
    module.exports = bounceIn;
  }
});

// node_modules/eases/circ-in-out.js
var require_circ_in_out = __commonJS({
  "node_modules/eases/circ-in-out.js"(exports, module) {
    function circInOut(t) {
      if ((t *= 2) < 1)
        return -0.5 * (Math.sqrt(1 - t * t) - 1);
      return 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1);
    }
    module.exports = circInOut;
  }
});

// node_modules/eases/circ-in.js
var require_circ_in = __commonJS({
  "node_modules/eases/circ-in.js"(exports, module) {
    function circIn(t) {
      return 1 - Math.sqrt(1 - t * t);
    }
    module.exports = circIn;
  }
});

// node_modules/eases/circ-out.js
var require_circ_out = __commonJS({
  "node_modules/eases/circ-out.js"(exports, module) {
    function circOut(t) {
      return Math.sqrt(1 - --t * t);
    }
    module.exports = circOut;
  }
});

// node_modules/eases/cubic-in-out.js
var require_cubic_in_out = __commonJS({
  "node_modules/eases/cubic-in-out.js"(exports, module) {
    function cubicInOut(t) {
      return t < 0.5 ? 4 * t * t * t : 0.5 * Math.pow(2 * t - 2, 3) + 1;
    }
    module.exports = cubicInOut;
  }
});

// node_modules/eases/cubic-in.js
var require_cubic_in = __commonJS({
  "node_modules/eases/cubic-in.js"(exports, module) {
    function cubicIn(t) {
      return t * t * t;
    }
    module.exports = cubicIn;
  }
});

// node_modules/eases/cubic-out.js
var require_cubic_out = __commonJS({
  "node_modules/eases/cubic-out.js"(exports, module) {
    function cubicOut(t) {
      var f = t - 1;
      return f * f * f + 1;
    }
    module.exports = cubicOut;
  }
});

// node_modules/eases/elastic-in-out.js
var require_elastic_in_out = __commonJS({
  "node_modules/eases/elastic-in-out.js"(exports, module) {
    function elasticInOut(t) {
      return t < 0.5 ? 0.5 * Math.sin(13 * Math.PI / 2 * 2 * t) * Math.pow(2, 10 * (2 * t - 1)) : 0.5 * Math.sin(-13 * Math.PI / 2 * (2 * t - 1 + 1)) * Math.pow(2, -10 * (2 * t - 1)) + 1;
    }
    module.exports = elasticInOut;
  }
});

// node_modules/eases/elastic-in.js
var require_elastic_in = __commonJS({
  "node_modules/eases/elastic-in.js"(exports, module) {
    function elasticIn(t) {
      return Math.sin(13 * t * Math.PI / 2) * Math.pow(2, 10 * (t - 1));
    }
    module.exports = elasticIn;
  }
});

// node_modules/eases/elastic-out.js
var require_elastic_out = __commonJS({
  "node_modules/eases/elastic-out.js"(exports, module) {
    function elasticOut(t) {
      return Math.sin(-13 * (t + 1) * Math.PI / 2) * Math.pow(2, -10 * t) + 1;
    }
    module.exports = elasticOut;
  }
});

// node_modules/eases/expo-in-out.js
var require_expo_in_out = __commonJS({
  "node_modules/eases/expo-in-out.js"(exports, module) {
    function expoInOut(t) {
      return t === 0 || t === 1 ? t : t < 0.5 ? 0.5 * Math.pow(2, 20 * t - 10) : -0.5 * Math.pow(2, 10 - t * 20) + 1;
    }
    module.exports = expoInOut;
  }
});

// node_modules/eases/expo-in.js
var require_expo_in = __commonJS({
  "node_modules/eases/expo-in.js"(exports, module) {
    function expoIn(t) {
      return t === 0 ? t : Math.pow(2, 10 * (t - 1));
    }
    module.exports = expoIn;
  }
});

// node_modules/eases/expo-out.js
var require_expo_out = __commonJS({
  "node_modules/eases/expo-out.js"(exports, module) {
    function expoOut(t) {
      return t === 1 ? t : 1 - Math.pow(2, -10 * t);
    }
    module.exports = expoOut;
  }
});

// node_modules/eases/linear.js
var require_linear = __commonJS({
  "node_modules/eases/linear.js"(exports, module) {
    function linear(t) {
      return t;
    }
    module.exports = linear;
  }
});

// node_modules/eases/quad-in-out.js
var require_quad_in_out = __commonJS({
  "node_modules/eases/quad-in-out.js"(exports, module) {
    function quadInOut(t) {
      t /= 0.5;
      if (t < 1)
        return 0.5 * t * t;
      t--;
      return -0.5 * (t * (t - 2) - 1);
    }
    module.exports = quadInOut;
  }
});

// node_modules/eases/quad-in.js
var require_quad_in = __commonJS({
  "node_modules/eases/quad-in.js"(exports, module) {
    function quadIn(t) {
      return t * t;
    }
    module.exports = quadIn;
  }
});

// node_modules/eases/quad-out.js
var require_quad_out = __commonJS({
  "node_modules/eases/quad-out.js"(exports, module) {
    function quadOut(t) {
      return -t * (t - 2);
    }
    module.exports = quadOut;
  }
});

// node_modules/eases/quart-in-out.js
var require_quart_in_out = __commonJS({
  "node_modules/eases/quart-in-out.js"(exports, module) {
    function quarticInOut(t) {
      return t < 0.5 ? 8 * Math.pow(t, 4) : -8 * Math.pow(t - 1, 4) + 1;
    }
    module.exports = quarticInOut;
  }
});

// node_modules/eases/quart-in.js
var require_quart_in = __commonJS({
  "node_modules/eases/quart-in.js"(exports, module) {
    function quarticIn(t) {
      return Math.pow(t, 4);
    }
    module.exports = quarticIn;
  }
});

// node_modules/eases/quart-out.js
var require_quart_out = __commonJS({
  "node_modules/eases/quart-out.js"(exports, module) {
    function quarticOut(t) {
      return Math.pow(t - 1, 3) * (1 - t) + 1;
    }
    module.exports = quarticOut;
  }
});

// node_modules/eases/quint-in-out.js
var require_quint_in_out = __commonJS({
  "node_modules/eases/quint-in-out.js"(exports, module) {
    function qinticInOut(t) {
      if ((t *= 2) < 1)
        return 0.5 * t * t * t * t * t;
      return 0.5 * ((t -= 2) * t * t * t * t + 2);
    }
    module.exports = qinticInOut;
  }
});

// node_modules/eases/quint-in.js
var require_quint_in = __commonJS({
  "node_modules/eases/quint-in.js"(exports, module) {
    function qinticIn(t) {
      return t * t * t * t * t;
    }
    module.exports = qinticIn;
  }
});

// node_modules/eases/quint-out.js
var require_quint_out = __commonJS({
  "node_modules/eases/quint-out.js"(exports, module) {
    function qinticOut(t) {
      return --t * t * t * t * t + 1;
    }
    module.exports = qinticOut;
  }
});

// node_modules/eases/sine-in-out.js
var require_sine_in_out = __commonJS({
  "node_modules/eases/sine-in-out.js"(exports, module) {
    function sineInOut(t) {
      return -0.5 * (Math.cos(Math.PI * t) - 1);
    }
    module.exports = sineInOut;
  }
});

// node_modules/eases/sine-in.js
var require_sine_in = __commonJS({
  "node_modules/eases/sine-in.js"(exports, module) {
    function sineIn(t) {
      var v = Math.cos(t * Math.PI * 0.5);
      if (Math.abs(v) < 1e-14)
        return 1;
      else
        return 1 - v;
    }
    module.exports = sineIn;
  }
});

// node_modules/eases/sine-out.js
var require_sine_out = __commonJS({
  "node_modules/eases/sine-out.js"(exports, module) {
    function sineOut(t) {
      return Math.sin(t * Math.PI / 2);
    }
    module.exports = sineOut;
  }
});

// node_modules/eases/index.js
var require_eases = __commonJS({
  "node_modules/eases/index.js"(exports, module) {
    module.exports = {
      "backInOut": require_back_in_out(),
      "backIn": require_back_in(),
      "backOut": require_back_out(),
      "bounceInOut": require_bounce_in_out(),
      "bounceIn": require_bounce_in(),
      "bounceOut": require_bounce_out(),
      "circInOut": require_circ_in_out(),
      "circIn": require_circ_in(),
      "circOut": require_circ_out(),
      "cubicInOut": require_cubic_in_out(),
      "cubicIn": require_cubic_in(),
      "cubicOut": require_cubic_out(),
      "elasticInOut": require_elastic_in_out(),
      "elasticIn": require_elastic_in(),
      "elasticOut": require_elastic_out(),
      "expoInOut": require_expo_in_out(),
      "expoIn": require_expo_in(),
      "expoOut": require_expo_out(),
      "linear": require_linear(),
      "quadInOut": require_quad_in_out(),
      "quadIn": require_quad_in(),
      "quadOut": require_quad_out(),
      "quartInOut": require_quart_in_out(),
      "quartIn": require_quart_in(),
      "quartOut": require_quart_out(),
      "quintInOut": require_quint_in_out(),
      "quintIn": require_quint_in(),
      "quintOut": require_quint_out(),
      "sineInOut": require_sine_in_out(),
      "sineIn": require_sine_in(),
      "sineOut": require_sine_out()
    };
  }
});

// node_modules/regl-tween/src/easings/compiled-easings.js
var require_compiled_easings = __commonJS({
  "node_modules/regl-tween/src/easings/compiled-easings.js"(exports, module) {
    module.exports = "#define GLSLIFY 1\n#ifndef PI\n#define PI 3.141592653589793\n#endif\n\nfloat backOut_1(float t) {\n  float f = t < 0.5\n    ? 2.0 * t\n    : 1.0 - (2.0 * t - 1.0);\n\n  float g = pow(f, 3.0) - f * sin(f * PI);\n\n  return t < 0.5\n    ? 0.5 * g\n    : 0.5 * (1.0 - g) + 0.5;\n}\n\n#ifndef PI\n#define PI 3.141592653589793\n#endif\n\nfloat backIn(float t) {\n  return pow(t, 3.0) - t * sin(t * PI);\n}\n\n#ifndef PI\n#define PI 3.141592653589793\n#endif\n\nfloat backOut_0(float t) {\n  float f = 1.0 - t;\n  return 1.0 - (pow(f, 3.0) - f * sin(f * PI));\n}\n\n#ifndef PI\n#define PI 3.141592653589793\n#endif\n\nfloat bounceOut(float t) {\n  const float a = 4.0 / 11.0;\n  const float b = 8.0 / 11.0;\n  const float c = 9.0 / 10.0;\n\n  const float ca = 4356.0 / 361.0;\n  const float cb = 35442.0 / 1805.0;\n  const float cc = 16061.0 / 1805.0;\n\n  float t2 = t * t;\n\n  return t < a\n    ? 7.5625 * t2\n    : t < b\n      ? 9.075 * t2 - 9.9 * t + 3.4\n      : t < c\n        ? ca * t2 - cb * t + cc\n        : 10.8 * t * t - 20.52 * t + 10.72;\n}\n\nfloat bounceInOut(float t) {\n  return t < 0.5\n    ? 0.5 * (1.0 - bounceOut(1.0 - t * 2.0))\n    : 0.5 * bounceOut(t * 2.0 - 1.0) + 0.5;\n}\n\nfloat bounceIn(float t) {\n  return 1.0 - bounceOut(1.0 - t);\n}\n\nfloat circularInOut(float t) {\n  return t < 0.5\n    ? 0.5 * (1.0 - sqrt(1.0 - 4.0 * t * t))\n    : 0.5 * (sqrt((3.0 - 2.0 * t) * (2.0 * t - 1.0)) + 1.0);\n}\n\nfloat circularIn(float t) {\n  return 1.0 - sqrt(1.0 - t * t);\n}\n\nfloat circularOut(float t) {\n  return sqrt((2.0 - t) * t);\n}\n\nfloat cubicInOut(float t) {\n  return t < 0.5\n    ? 4.0 * t * t * t\n    : 0.5 * pow(2.0 * t - 2.0, 3.0) + 1.0;\n}\n\nfloat cubicIn(float t) {\n  return t * t * t;\n}\n\nfloat cubicOut(float t) {\n  float f = t - 1.0;\n  return f * f * f + 1.0;\n}\n\n#ifndef HALF_PI\n#define HALF_PI 1.5707963267948966\n#endif\n\nfloat elasticInOut(float t) {\n  return t < 0.5\n    ? 0.5 * sin(+13.0 * HALF_PI * 2.0 * t) * pow(2.0, 10.0 * (2.0 * t - 1.0))\n    : 0.5 * sin(-13.0 * HALF_PI * ((2.0 * t - 1.0) + 1.0)) * pow(2.0, -10.0 * (2.0 * t - 1.0)) + 1.0;\n}\n\n#ifndef HALF_PI\n#define HALF_PI 1.5707963267948966\n#endif\n\nfloat elasticIn(float t) {\n  return sin(13.0 * t * HALF_PI) * pow(2.0, 10.0 * (t - 1.0));\n}\n\n#ifndef HALF_PI\n#define HALF_PI 1.5707963267948966\n#endif\n\nfloat elasticOut(float t) {\n  return sin(-13.0 * (t + 1.0) * HALF_PI) * pow(2.0, -10.0 * t) + 1.0;\n}\n\nfloat exponentialInOut(float t) {\n  return t == 0.0 || t == 1.0\n    ? t\n    : t < 0.5\n      ? +0.5 * pow(2.0, (20.0 * t) - 10.0)\n      : -0.5 * pow(2.0, 10.0 - (t * 20.0)) + 1.0;\n}\n\nfloat exponentialIn(float t) {\n  return t == 0.0 ? t : pow(2.0, 10.0 * (t - 1.0));\n}\n\nfloat exponentialOut(float t) {\n  return t == 1.0 ? t : 1.0 - pow(2.0, -10.0 * t);\n}\n\nfloat linear(float t) {\n  return t;\n}\n\nfloat quadraticInOut(float t) {\n  float p = 2.0 * t * t;\n  return t < 0.5 ? p : -p + (4.0 * t) - 1.0;\n}\n\nfloat quadraticIn(float t) {\n  return t * t;\n}\n\nfloat quadraticOut(float t) {\n  return -t * (t - 2.0);\n}\n\nfloat quarticInOut(float t) {\n  return t < 0.5\n    ? +8.0 * pow(t, 4.0)\n    : -8.0 * pow(t - 1.0, 4.0) + 1.0;\n}\n\nfloat quarticIn(float t) {\n  return pow(t, 4.0);\n}\n\nfloat quarticOut(float t) {\n  return pow(t - 1.0, 3.0) * (1.0 - t) + 1.0;\n}\n\nfloat qinticInOut(float t) {\n  return t < 0.5\n    ? +16.0 * pow(t, 5.0)\n    : -0.5 * pow(2.0 * t - 2.0, 5.0) + 1.0;\n}\n\nfloat qinticIn(float t) {\n  return pow(t, 5.0);\n}\n\nfloat qinticOut(float t) {\n  return 1.0 - (pow(t - 1.0, 5.0));\n}\n\n#ifndef PI\n#define PI 3.141592653589793\n#endif\n\nfloat sineInOut(float t) {\n  return -0.5 * (cos(PI * t) - 1.0);\n}\n\n#ifndef HALF_PI\n#define HALF_PI 1.5707963267948966\n#endif\n\nfloat sineIn(float t) {\n  return sin((t - 1.0) * HALF_PI) + 1.0;\n}\n\n#ifndef HALF_PI\n#define HALF_PI 1.5707963267948966\n#endif\n\nfloat sineOut(float t) {\n  return sin(t * HALF_PI);\n}";
  }
});

// node_modules/regl-tween/src/easings/index.js
var require_easings = __commonJS({
  "node_modules/regl-tween/src/easings/index.js"(exports, module) {
    var camelCase = require_camelcase();
    var eases = require_eases();
    var glslEasings = require_compiled_easings();
    var nameMap = [
      ["quad-", "quadratic-"],
      ["circ-", "circular-"],
      ["expo-", "exponential-"],
      ["quart-", "quartic-"],
      ["quint-", "quintic-"]
    ];
    var getEasingName = function(name) {
      return camelCase(name);
    };
    var getGLSLEasingName = function(name) {
      nameMap.forEach(function(r) {
        name = name.replace(r[0], r[1]);
      });
      return camelCase(name);
    };
    var getEasingFunction = function(name) {
      return eases[camelCase(name)];
    };
    var getShaderEasings = function(name) {
      return glslEasings;
    };
    module.exports = {
      getEasingFunction,
      getEasingName,
      getShaderEasings,
      getGLSLEasingName
    };
  }
});

// node_modules/regl-tween/src/index.js
var require_src = __commonJS({
  "node_modules/regl-tween/src/index.js"(exports, module) {
    var strip = require_strip_comments();
    var lerp = require_lerp();
    var easings = require_easings();
    var namespace = "_rtb";
    var getPreviousName = function(name, type) {
      return namespace + "_" + type + "_previous_" + name;
    };
    var getCurrentName = function(name, type) {
      return namespace + "_" + type + "_current_" + name;
    };
    var getNextName = function(name, type) {
      return namespace + "_" + type + "_next_" + name;
    };
    var getTimeName = function(name, type) {
      return namespace + "_" + type + "_t_" + name;
    };
    var transformShader = function(name, shader, type, ease) {
      var easingName = easings.getGLSLEasingName(ease);
      var glslEasings = easings.getShaderEasings();
      shader = strip(shader);
      var prev = getPreviousName(name, type);
      var next = getNextName(name, type);
      var current = getCurrentName(name, type);
      var t = getTimeName(name, type);
      var re = new RegExp(";([^;]*" + name + "[^;]*;)");
      var found = shader.match(re);
      if (!found || found.length < 2) {
        return shader;
      }
      var invocation = found[1];
      var prevDeclare = invocation.replace(name, prev);
      var nextDeclare = invocation.replace(name, next);
      var currentDeclare = "\n" + invocation.replace(name, current).replace("attribute", "").replace("uniform", "").trim();
      var timeDeclare = "\nuniform float " + t + ";";
      var replaceString = prevDeclare + nextDeclare + currentDeclare + timeDeclare;
      shader = shader.replace(invocation, replaceString);
      re = new RegExp("main\\s*\\(\\s*\\)\\s*{");
      found = shader.match(re);
      if (found && found.length) {
        var mixString = current + " = mix(" + prev + ", " + next + ", " + easingName + "(" + t + "));";
        shader = shader.replace(found[0], found[0] + "\n  " + mixString);
      }
      re = new RegExp("\\b" + name + "\\b", "g");
      shader = shader.replace(re, current);
      shader = glslEasings + "\n" + shader;
      return shader;
    };
    var TweenBuffer = function(data, options) {
      this.data = data;
      this.previousData = data;
      this.options = Object.assign({}, {
        duration: 750,
        ease: "quad-in-out"
      }, options || {});
    };
    module.exports = function(regl) {
      var tween = function(commandObject) {
        commandObject.uniforms = commandObject.uniforms || {};
        commandObject.attributes = commandObject.attributes || {};
        commandObject.vert = commandObject.vert || "";
        commandObject.frag = commandObject.frag || "";
        if (!commandObject.vert || !commandObject.frag) {
          throw new Error("Must provide vert and frag shaders!");
        }
        var tweenedProps = {
          uniforms: [],
          attributes: []
        };
        var buffers = {
          uniforms: {},
          attributes: {}
        };
        var tweenBuffers = {
          uniforms: {},
          attributes: {}
        };
        var timers = {
          uniforms: {},
          attributes: {}
        };
        var tweenFlags = {
          uniforms: {},
          attributes: {}
        };
        var startTimes = {
          uniforms: {},
          attributes: {}
        };
        var tweenBufferUpdate = function(data) {
          var timer = timers[this.type][this.key];
          if (timer < 1) {
            var eased = easings.getEasingFunction(this.options.ease)(timer);
            var previousData = this.previousData;
            this.previousData = this.data.map(function(d, i) {
              return d.map(function(elt, j) {
                return lerp(previousData[i][j], elt, eased);
              });
            });
          } else {
            this.previousData = this.data;
          }
          this.data = data;
          buffers[this.type][this.key].previous({
            usage: "dynamic",
            data: this.previousData
          });
          buffers[this.type][this.key].next({
            usage: "dynamic",
            data
          });
          tweenFlags[this.type][this.key] = true;
        };
        var initialize = function(type) {
          Object.keys(commandObject[type] || {}).filter(function(key) {
            return commandObject[type][key] instanceof TweenBuffer;
          }).map(function(key) {
            tweenedProps[type].push(key);
            var tweenBuffer = commandObject[type][key];
            tweenBuffer.type = type;
            tweenBuffer.key = key;
            tweenBuffer.update = tweenBufferUpdate;
            tweenBuffers[type][key] = tweenBuffer;
            timers[type][key] = 1;
            tweenFlags[type][key] = false;
            buffers[type][key] = {
              previous: regl.buffer({
                usage: "dynamic",
                data: tweenBuffer.data
              }),
              next: regl.buffer({
                usage: "dynamic",
                data: tweenBuffer.data
              })
            };
          });
        };
        initialize("attributes");
        initialize("uniforms");
        var transform = function(type) {
          tweenedProps[type].forEach(function(attr) {
            var tweenBuffer = tweenBuffers[type][attr];
            var duration = tweenBuffer.options.duration;
            commandObject.vert = transformShader(attr, commandObject.vert || "", type, tweenBuffer.options.ease);
            delete commandObject.attributes[attr];
            commandObject[type][getPreviousName(attr, type)] = buffers[type][attr].previous;
            commandObject[type][getNextName(attr, type)] = buffers[type][attr].next;
            commandObject.uniforms[getTimeName(attr, type)] = function(context, props, batchId) {
              if (tweenFlags[type][attr]) {
                timers[type][attr] = 0;
                startTimes[type][attr] = context.time;
              }
              var startTime = startTimes[type][attr];
              var t = timers[type][attr];
              if (t < 1) {
                t = Math.min(1, 1e3 * (context.time - startTime) / duration);
              }
              timers[type][attr] = t;
              tweenFlags[type][attr] = false;
              return t;
            };
          });
        };
        transform("attributes");
        transform("uniforms");
        return regl(commandObject);
      };
      tween.buffer = function(data, options) {
        return new TweenBuffer(data, options);
      };
      return tween;
    };
  }
});

// node_modules/regl-tween/index.js
var require_regl_tween = __commonJS({
  "node_modules/regl-tween/index.js"(exports, module) {
    module.exports = require_src();
  }
});

// dep:@onsvisual_svelte-charts__regl-tween
var onsvisual_svelte_charts_regl_tween_default = require_regl_tween();
export {
  onsvisual_svelte_charts_regl_tween_default as default
};
/*!
 * strip-comments <https://github.com/jonschlinkert/strip-comments>
 *
 * Copyright (c) 2014-2015 Jon Schlinkert.
 * Licensed under the MIT license.
 */
//# sourceMappingURL=@onsvisual_svelte-charts__regl-tween.js.map
