import "./chunk-3DB52H5I.js";

// src/lib/vis/football/node_modules/line-intersect/es/check-intersection.js
var COLINEAR = intersectResult("colinear");
var PARALLEL = intersectResult("parallel");
var NONE = intersectResult("none");
function checkIntersection(x1, y1, x2, y2, x3, y3, x4, y4) {
  var denom = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
  var numeA = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);
  var numeB = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3);
  if (denom == 0) {
    if (numeA == 0 && numeB == 0) {
      return COLINEAR;
    }
    return PARALLEL;
  }
  var uA = numeA / denom;
  var uB = numeB / denom;
  if (uA >= 0 && uA <= 1 && uB >= 0 && uB <= 1) {
    return intersecting({
      x: x1 + uA * (x2 - x1),
      y: y1 + uA * (y2 - y1)
    });
  }
  return NONE;
}
function intersecting(point) {
  var result = intersectResult("intersecting");
  result.point = point;
  return result;
}
function intersectResult(type) {
  return {
    type
  };
}

// src/lib/vis/football/node_modules/line-intersect/es/colinear-point-within-segment.js
function colinearPointWithinSegment(pointX, pointY, startX, startY, endX, endY) {
  if (startX != endX) {
    if (startX <= pointX && pointX <= endX)
      return true;
    if (startX >= pointX && pointX >= endX)
      return true;
  } else {
    if (startY <= pointY && pointY <= endY)
      return true;
    if (startY >= pointY && pointY >= endY)
      return true;
  }
  return false;
}
export {
  checkIntersection,
  colinearPointWithinSegment
};
//# sourceMappingURL=line-intersect.js.map
