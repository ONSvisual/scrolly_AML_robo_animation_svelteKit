{
  "version": 3,
  "sources": ["../../src/lib/vis/animated_pyramids/node_modules/svgpath/lib/path_parse.js", "../../src/lib/vis/animated_pyramids/node_modules/svgpath/lib/matrix.js", "../../src/lib/vis/animated_pyramids/node_modules/svgpath/lib/transform_parse.js", "../../src/lib/vis/animated_pyramids/node_modules/svgpath/lib/a2c.js", "../../src/lib/vis/animated_pyramids/node_modules/svgpath/lib/ellipse.js", "../../src/lib/vis/animated_pyramids/node_modules/svgpath/lib/svgpath.js", "../../src/lib/vis/animated_pyramids/node_modules/svgpath/index.js", "../../src/lib/vis/animated_pyramids/node_modules/earcut/src/earcut.js", "../../src/lib/vis/animated_pyramids/node_modules/d3-polygon/src/area.js", "../../src/lib/vis/animated_pyramids/node_modules/d3-polygon/src/centroid.js", "../../src/lib/vis/animated_pyramids/node_modules/d3-polygon/src/length.js", "../../src/lib/vis/animated_pyramids/node_modules/flubber/src/svg.js", "../../src/lib/vis/animated_pyramids/node_modules/svg-path-properties/src/parse.js", "../../src/lib/vis/animated_pyramids/node_modules/svg-path-properties/src/bezier.js", "../../src/lib/vis/animated_pyramids/node_modules/svg-path-properties/src/a2c.js", "../../src/lib/vis/animated_pyramids/node_modules/svg-path-properties/src/arc.js", "../../src/lib/vis/animated_pyramids/node_modules/svg-path-properties/src/linear.js", "../../src/lib/vis/animated_pyramids/node_modules/svg-path-properties/src/path-properties.js", "../../src/lib/vis/animated_pyramids/node_modules/flubber/src/math.js", "../../src/lib/vis/animated_pyramids/node_modules/flubber/src/errors.js", "../../src/lib/vis/animated_pyramids/node_modules/flubber/src/add.js", "../../src/lib/vis/animated_pyramids/node_modules/flubber/src/normalize.js", "../../src/lib/vis/animated_pyramids/node_modules/flubber/src/rotate.js", "../../src/lib/vis/animated_pyramids/node_modules/flubber/src/interpolate.js", "../../src/lib/vis/animated_pyramids/node_modules/flubber/src/triangulate.js", "../../src/lib/vis/animated_pyramids/node_modules/topojson-client/src/identity.js", "../../src/lib/vis/animated_pyramids/node_modules/topojson-client/src/transform.js", "../../src/lib/vis/animated_pyramids/node_modules/topojson-client/src/reverse.js", "../../src/lib/vis/animated_pyramids/node_modules/topojson-client/src/feature.js", "../../src/lib/vis/animated_pyramids/node_modules/topojson-client/src/stitch.js", "../../src/lib/vis/animated_pyramids/node_modules/topojson-client/src/merge.js", "../../src/lib/vis/animated_pyramids/node_modules/topojson-client/src/bisect.js", "../../src/lib/vis/animated_pyramids/node_modules/topojson-client/src/neighbors.js", "../../src/lib/vis/animated_pyramids/node_modules/flubber/node_modules/d3-array/src/ascending.js", "../../src/lib/vis/animated_pyramids/node_modules/flubber/node_modules/d3-array/src/bisector.js", "../../src/lib/vis/animated_pyramids/node_modules/flubber/node_modules/d3-array/src/bisect.js", "../../src/lib/vis/animated_pyramids/node_modules/flubber/node_modules/d3-array/src/array.js", "../../src/lib/vis/animated_pyramids/node_modules/flubber/node_modules/d3-array/src/ticks.js", "../../src/lib/vis/animated_pyramids/node_modules/flubber/src/topology.js", "../../src/lib/vis/animated_pyramids/node_modules/flubber/src/order.js", "../../src/lib/vis/animated_pyramids/node_modules/flubber/src/multiple.js", "../../src/lib/vis/animated_pyramids/node_modules/flubber/src/shape.js"],
  "sourcesContent": ["'use strict';\n\n\nvar paramCounts = { a: 7, c: 6, h: 1, l: 2, m: 2, r: 4, q: 4, s: 4, t: 2, v: 1, z: 0 };\n\nvar SPECIAL_SPACES = [\n  0x1680, 0x180E, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006,\n  0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF\n];\n\nfunction isSpace(ch) {\n  return (ch === 0x0A) || (ch === 0x0D) || (ch === 0x2028) || (ch === 0x2029) || // Line terminators\n    // White spaces\n    (ch === 0x20) || (ch === 0x09) || (ch === 0x0B) || (ch === 0x0C) || (ch === 0xA0) ||\n    (ch >= 0x1680 && SPECIAL_SPACES.indexOf(ch) >= 0);\n}\n\nfunction isCommand(code) {\n  /*eslint-disable no-bitwise*/\n  switch (code | 0x20) {\n    case 0x6D/* m */:\n    case 0x7A/* z */:\n    case 0x6C/* l */:\n    case 0x68/* h */:\n    case 0x76/* v */:\n    case 0x63/* c */:\n    case 0x73/* s */:\n    case 0x71/* q */:\n    case 0x74/* t */:\n    case 0x61/* a */:\n    case 0x72/* r */:\n      return true;\n  }\n  return false;\n}\n\nfunction isArc(code) {\n  return (code | 0x20) === 0x61;\n}\n\nfunction isDigit(code) {\n  return (code >= 48 && code <= 57);   // 0..9\n}\n\nfunction isDigitStart(code) {\n  return (code >= 48 && code <= 57) || /* 0..9 */\n          code === 0x2B || /* + */\n          code === 0x2D || /* - */\n          code === 0x2E;   /* . */\n}\n\n\nfunction State(path) {\n  this.index  = 0;\n  this.path   = path;\n  this.max    = path.length;\n  this.result = [];\n  this.param  = 0.0;\n  this.err    = '';\n  this.segmentStart = 0;\n  this.data   = [];\n}\n\nfunction skipSpaces(state) {\n  while (state.index < state.max && isSpace(state.path.charCodeAt(state.index))) {\n    state.index++;\n  }\n}\n\n\nfunction scanFlag(state) {\n  var ch = state.path.charCodeAt(state.index);\n\n  if (ch === 0x30/* 0 */) {\n    state.param = 0;\n    state.index++;\n    return;\n  }\n\n  if (ch === 0x31/* 1 */) {\n    state.param = 1;\n    state.index++;\n    return;\n  }\n\n  state.err = 'SvgPath: arc flag can be 0 or 1 only (at pos ' + state.index + ')';\n}\n\n\nfunction scanParam(state) {\n  var start = state.index,\n      index = start,\n      max = state.max,\n      zeroFirst = false,\n      hasCeiling = false,\n      hasDecimal = false,\n      hasDot = false,\n      ch;\n\n  if (index >= max) {\n    state.err = 'SvgPath: missed param (at pos ' + index + ')';\n    return;\n  }\n  ch = state.path.charCodeAt(index);\n\n  if (ch === 0x2B/* + */ || ch === 0x2D/* - */) {\n    index++;\n    ch = (index < max) ? state.path.charCodeAt(index) : 0;\n  }\n\n  // This logic is shamelessly borrowed from Esprima\n  // https://github.com/ariya/esprimas\n  //\n  if (!isDigit(ch) && ch !== 0x2E/* . */) {\n    state.err = 'SvgPath: param should start with 0..9 or `.` (at pos ' + index + ')';\n    return;\n  }\n\n  if (ch !== 0x2E/* . */) {\n    zeroFirst = (ch === 0x30/* 0 */);\n    index++;\n\n    ch = (index < max) ? state.path.charCodeAt(index) : 0;\n\n    if (zeroFirst && index < max) {\n      // decimal number starts with '0' such as '09' is illegal.\n      if (ch && isDigit(ch)) {\n        state.err = 'SvgPath: numbers started with `0` such as `09` are illegal (at pos ' + start + ')';\n        return;\n      }\n    }\n\n    while (index < max && isDigit(state.path.charCodeAt(index))) {\n      index++;\n      hasCeiling = true;\n    }\n    ch = (index < max) ? state.path.charCodeAt(index) : 0;\n  }\n\n  if (ch === 0x2E/* . */) {\n    hasDot = true;\n    index++;\n    while (isDigit(state.path.charCodeAt(index))) {\n      index++;\n      hasDecimal = true;\n    }\n    ch = (index < max) ? state.path.charCodeAt(index) : 0;\n  }\n\n  if (ch === 0x65/* e */ || ch === 0x45/* E */) {\n    if (hasDot && !hasCeiling && !hasDecimal) {\n      state.err = 'SvgPath: invalid float exponent (at pos ' + index + ')';\n      return;\n    }\n\n    index++;\n\n    ch = (index < max) ? state.path.charCodeAt(index) : 0;\n    if (ch === 0x2B/* + */ || ch === 0x2D/* - */) {\n      index++;\n    }\n    if (index < max && isDigit(state.path.charCodeAt(index))) {\n      while (index < max && isDigit(state.path.charCodeAt(index))) {\n        index++;\n      }\n    } else {\n      state.err = 'SvgPath: invalid float exponent (at pos ' + index + ')';\n      return;\n    }\n  }\n\n  state.index = index;\n  state.param = parseFloat(state.path.slice(start, index)) + 0.0;\n}\n\n\nfunction finalizeSegment(state) {\n  var cmd, cmdLC;\n\n  // Process duplicated commands (without comand name)\n\n  // This logic is shamelessly borrowed from Raphael\n  // https://github.com/DmitryBaranovskiy/raphael/\n  //\n  cmd   = state.path[state.segmentStart];\n  cmdLC = cmd.toLowerCase();\n\n  var params = state.data;\n\n  if (cmdLC === 'm' && params.length > 2) {\n    state.result.push([ cmd, params[0], params[1] ]);\n    params = params.slice(2);\n    cmdLC = 'l';\n    cmd = (cmd === 'm') ? 'l' : 'L';\n  }\n\n  if (cmdLC === 'r') {\n    state.result.push([ cmd ].concat(params));\n  } else {\n\n    while (params.length >= paramCounts[cmdLC]) {\n      state.result.push([ cmd ].concat(params.splice(0, paramCounts[cmdLC])));\n      if (!paramCounts[cmdLC]) {\n        break;\n      }\n    }\n  }\n}\n\n\nfunction scanSegment(state) {\n  var max = state.max,\n      cmdCode, is_arc, comma_found, need_params, i;\n\n  state.segmentStart = state.index;\n  cmdCode = state.path.charCodeAt(state.index);\n  is_arc = isArc(cmdCode);\n\n  if (!isCommand(cmdCode)) {\n    state.err = 'SvgPath: bad command ' + state.path[state.index] + ' (at pos ' + state.index + ')';\n    return;\n  }\n\n  need_params = paramCounts[state.path[state.index].toLowerCase()];\n\n  state.index++;\n  skipSpaces(state);\n\n  state.data = [];\n\n  if (!need_params) {\n    // Z\n    finalizeSegment(state);\n    return;\n  }\n\n  comma_found = false;\n\n  for (;;) {\n    for (i = need_params; i > 0; i--) {\n      if (is_arc && (i === 3 || i === 4)) scanFlag(state);\n      else scanParam(state);\n\n      if (state.err.length) {\n        return;\n      }\n      state.data.push(state.param);\n\n      skipSpaces(state);\n      comma_found = false;\n\n      if (state.index < max && state.path.charCodeAt(state.index) === 0x2C/* , */) {\n        state.index++;\n        skipSpaces(state);\n        comma_found = true;\n      }\n    }\n\n    // after ',' param is mandatory\n    if (comma_found) {\n      continue;\n    }\n\n    if (state.index >= state.max) {\n      break;\n    }\n\n    // Stop on next segment\n    if (!isDigitStart(state.path.charCodeAt(state.index))) {\n      break;\n    }\n  }\n\n  finalizeSegment(state);\n}\n\n\n/* Returns array of segments:\n *\n * [\n *   [ command, coord1, coord2, ... ]\n * ]\n */\nmodule.exports = function pathParse(svgPath) {\n  var state = new State(svgPath);\n  var max = state.max;\n\n  skipSpaces(state);\n\n  while (state.index < max && !state.err.length) {\n    scanSegment(state);\n  }\n\n  if (state.err.length) {\n    state.result = [];\n\n  } else if (state.result.length) {\n\n    if ('mM'.indexOf(state.result[0][0]) < 0) {\n      state.err = 'SvgPath: string should start with `M` or `m`';\n      state.result = [];\n    } else {\n      state.result[0][0] = 'M';\n    }\n  }\n\n  return {\n    err: state.err,\n    segments: state.result\n  };\n};\n", "'use strict';\n\n// combine 2 matrixes\n// m1, m2 - [a, b, c, d, e, g]\n//\nfunction combine(m1, m2) {\n  return [\n    m1[0] * m2[0] + m1[2] * m2[1],\n    m1[1] * m2[0] + m1[3] * m2[1],\n    m1[0] * m2[2] + m1[2] * m2[3],\n    m1[1] * m2[2] + m1[3] * m2[3],\n    m1[0] * m2[4] + m1[2] * m2[5] + m1[4],\n    m1[1] * m2[4] + m1[3] * m2[5] + m1[5]\n  ];\n}\n\n\nfunction Matrix() {\n  if (!(this instanceof Matrix)) { return new Matrix(); }\n  this.queue = [];   // list of matrixes to apply\n  this.cache = null; // combined matrix cache\n}\n\n\nMatrix.prototype.matrix = function (m) {\n  if (m[0] === 1 && m[1] === 0 && m[2] === 0 && m[3] === 1 && m[4] === 0 && m[5] === 0) {\n    return this;\n  }\n  this.cache = null;\n  this.queue.push(m);\n  return this;\n};\n\n\nMatrix.prototype.translate = function (tx, ty) {\n  if (tx !== 0 || ty !== 0) {\n    this.cache = null;\n    this.queue.push([ 1, 0, 0, 1, tx, ty ]);\n  }\n  return this;\n};\n\n\nMatrix.prototype.scale = function (sx, sy) {\n  if (sx !== 1 || sy !== 1) {\n    this.cache = null;\n    this.queue.push([ sx, 0, 0, sy, 0, 0 ]);\n  }\n  return this;\n};\n\n\nMatrix.prototype.rotate = function (angle, rx, ry) {\n  var rad, cos, sin;\n\n  if (angle !== 0) {\n    this.translate(rx, ry);\n\n    rad = angle * Math.PI / 180;\n    cos = Math.cos(rad);\n    sin = Math.sin(rad);\n\n    this.queue.push([ cos, sin, -sin, cos, 0, 0 ]);\n    this.cache = null;\n\n    this.translate(-rx, -ry);\n  }\n  return this;\n};\n\n\nMatrix.prototype.skewX = function (angle) {\n  if (angle !== 0) {\n    this.cache = null;\n    this.queue.push([ 1, 0, Math.tan(angle * Math.PI / 180), 1, 0, 0 ]);\n  }\n  return this;\n};\n\n\nMatrix.prototype.skewY = function (angle) {\n  if (angle !== 0) {\n    this.cache = null;\n    this.queue.push([ 1, Math.tan(angle * Math.PI / 180), 0, 1, 0, 0 ]);\n  }\n  return this;\n};\n\n\n// Flatten queue\n//\nMatrix.prototype.toArray = function () {\n  if (this.cache) {\n    return this.cache;\n  }\n\n  if (!this.queue.length) {\n    this.cache = [ 1, 0, 0, 1, 0, 0 ];\n    return this.cache;\n  }\n\n  this.cache = this.queue[0];\n\n  if (this.queue.length === 1) {\n    return this.cache;\n  }\n\n  for (var i = 1; i < this.queue.length; i++) {\n    this.cache = combine(this.cache, this.queue[i]);\n  }\n\n  return this.cache;\n};\n\n\n// Apply list of matrixes to (x,y) point.\n// If `isRelative` set, `translate` component of matrix will be skipped\n//\nMatrix.prototype.calc = function (x, y, isRelative) {\n  var m;\n\n  // Don't change point on empty transforms queue\n  if (!this.queue.length) { return [ x, y ]; }\n\n  // Calculate final matrix, if not exists\n  //\n  // NB. if you deside to apply transforms to point one-by-one,\n  // they should be taken in reverse order\n\n  if (!this.cache) {\n    this.cache = this.toArray();\n  }\n\n  m = this.cache;\n\n  // Apply matrix to point\n  return [\n    x * m[0] + y * m[2] + (isRelative ? 0 : m[4]),\n    x * m[1] + y * m[3] + (isRelative ? 0 : m[5])\n  ];\n};\n\n\nmodule.exports = Matrix;\n", "'use strict';\n\n\nvar Matrix = require('./matrix');\n\nvar operations = {\n  matrix: true,\n  scale: true,\n  rotate: true,\n  translate: true,\n  skewX: true,\n  skewY: true\n};\n\nvar CMD_SPLIT_RE    = /\\s*(matrix|translate|scale|rotate|skewX|skewY)\\s*\\(\\s*(.+?)\\s*\\)[\\s,]*/;\nvar PARAMS_SPLIT_RE = /[\\s,]+/;\n\n\nmodule.exports = function transformParse(transformString) {\n  var matrix = new Matrix();\n  var cmd, params;\n\n  // Split value into ['', 'translate', '10 50', '', 'scale', '2', '', 'rotate',  '-45', '']\n  transformString.split(CMD_SPLIT_RE).forEach(function (item) {\n\n    // Skip empty elements\n    if (!item.length) { return; }\n\n    // remember operation\n    if (typeof operations[item] !== 'undefined') {\n      cmd = item;\n      return;\n    }\n\n    // extract params & att operation to matrix\n    params = item.split(PARAMS_SPLIT_RE).map(function (i) {\n      return +i || 0;\n    });\n\n    // If params count is not correct - ignore command\n    switch (cmd) {\n      case 'matrix':\n        if (params.length === 6) {\n          matrix.matrix(params);\n        }\n        return;\n\n      case 'scale':\n        if (params.length === 1) {\n          matrix.scale(params[0], params[0]);\n        } else if (params.length === 2) {\n          matrix.scale(params[0], params[1]);\n        }\n        return;\n\n      case 'rotate':\n        if (params.length === 1) {\n          matrix.rotate(params[0], 0, 0);\n        } else if (params.length === 3) {\n          matrix.rotate(params[0], params[1], params[2]);\n        }\n        return;\n\n      case 'translate':\n        if (params.length === 1) {\n          matrix.translate(params[0], 0);\n        } else if (params.length === 2) {\n          matrix.translate(params[0], params[1]);\n        }\n        return;\n\n      case 'skewX':\n        if (params.length === 1) {\n          matrix.skewX(params[0]);\n        }\n        return;\n\n      case 'skewY':\n        if (params.length === 1) {\n          matrix.skewY(params[0]);\n        }\n        return;\n    }\n  });\n\n  return matrix;\n};\n", "// Convert an arc to a sequence of cubic b\u00E9zier curves\n//\n'use strict';\n\n\nvar TAU = Math.PI * 2;\n\n\n/* eslint-disable space-infix-ops */\n\n// Calculate an angle between two unit vectors\n//\n// Since we measure angle between radii of circular arcs,\n// we can use simplified math (without length normalization)\n//\nfunction unit_vector_angle(ux, uy, vx, vy) {\n  var sign = (ux * vy - uy * vx < 0) ? -1 : 1;\n  var dot  = ux * vx + uy * vy;\n\n  // Add this to work with arbitrary vectors:\n  // dot /= Math.sqrt(ux * ux + uy * uy) * Math.sqrt(vx * vx + vy * vy);\n\n  // rounding errors, e.g. -1.0000000000000002 can screw up this\n  if (dot >  1.0) { dot =  1.0; }\n  if (dot < -1.0) { dot = -1.0; }\n\n  return sign * Math.acos(dot);\n}\n\n\n// Convert from endpoint to center parameterization,\n// see http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes\n//\n// Return [cx, cy, theta1, delta_theta]\n//\nfunction get_arc_center(x1, y1, x2, y2, fa, fs, rx, ry, sin_phi, cos_phi) {\n  // Step 1.\n  //\n  // Moving an ellipse so origin will be the middlepoint between our two\n  // points. After that, rotate it to line up ellipse axes with coordinate\n  // axes.\n  //\n  var x1p =  cos_phi*(x1-x2)/2 + sin_phi*(y1-y2)/2;\n  var y1p = -sin_phi*(x1-x2)/2 + cos_phi*(y1-y2)/2;\n\n  var rx_sq  =  rx * rx;\n  var ry_sq  =  ry * ry;\n  var x1p_sq = x1p * x1p;\n  var y1p_sq = y1p * y1p;\n\n  // Step 2.\n  //\n  // Compute coordinates of the centre of this ellipse (cx', cy')\n  // in the new coordinate system.\n  //\n  var radicant = (rx_sq * ry_sq) - (rx_sq * y1p_sq) - (ry_sq * x1p_sq);\n\n  if (radicant < 0) {\n    // due to rounding errors it might be e.g. -1.3877787807814457e-17\n    radicant = 0;\n  }\n\n  radicant /=   (rx_sq * y1p_sq) + (ry_sq * x1p_sq);\n  radicant = Math.sqrt(radicant) * (fa === fs ? -1 : 1);\n\n  var cxp = radicant *  rx/ry * y1p;\n  var cyp = radicant * -ry/rx * x1p;\n\n  // Step 3.\n  //\n  // Transform back to get centre coordinates (cx, cy) in the original\n  // coordinate system.\n  //\n  var cx = cos_phi*cxp - sin_phi*cyp + (x1+x2)/2;\n  var cy = sin_phi*cxp + cos_phi*cyp + (y1+y2)/2;\n\n  // Step 4.\n  //\n  // Compute angles (theta1, delta_theta).\n  //\n  var v1x =  (x1p - cxp) / rx;\n  var v1y =  (y1p - cyp) / ry;\n  var v2x = (-x1p - cxp) / rx;\n  var v2y = (-y1p - cyp) / ry;\n\n  var theta1 = unit_vector_angle(1, 0, v1x, v1y);\n  var delta_theta = unit_vector_angle(v1x, v1y, v2x, v2y);\n\n  if (fs === 0 && delta_theta > 0) {\n    delta_theta -= TAU;\n  }\n  if (fs === 1 && delta_theta < 0) {\n    delta_theta += TAU;\n  }\n\n  return [ cx, cy, theta1, delta_theta ];\n}\n\n//\n// Approximate one unit arc segment with b\u00E9zier curves,\n// see http://math.stackexchange.com/questions/873224\n//\nfunction approximate_unit_arc(theta1, delta_theta) {\n  var alpha = 4/3 * Math.tan(delta_theta/4);\n\n  var x1 = Math.cos(theta1);\n  var y1 = Math.sin(theta1);\n  var x2 = Math.cos(theta1 + delta_theta);\n  var y2 = Math.sin(theta1 + delta_theta);\n\n  return [ x1, y1, x1 - y1*alpha, y1 + x1*alpha, x2 + y2*alpha, y2 - x2*alpha, x2, y2 ];\n}\n\nmodule.exports = function a2c(x1, y1, x2, y2, fa, fs, rx, ry, phi) {\n  var sin_phi = Math.sin(phi * TAU / 360);\n  var cos_phi = Math.cos(phi * TAU / 360);\n\n  // Make sure radii are valid\n  //\n  var x1p =  cos_phi*(x1-x2)/2 + sin_phi*(y1-y2)/2;\n  var y1p = -sin_phi*(x1-x2)/2 + cos_phi*(y1-y2)/2;\n\n  if (x1p === 0 && y1p === 0) {\n    // we're asked to draw line to itself\n    return [];\n  }\n\n  if (rx === 0 || ry === 0) {\n    // one of the radii is zero\n    return [];\n  }\n\n\n  // Compensate out-of-range radii\n  //\n  rx = Math.abs(rx);\n  ry = Math.abs(ry);\n\n  var lambda = (x1p * x1p) / (rx * rx) + (y1p * y1p) / (ry * ry);\n  if (lambda > 1) {\n    rx *= Math.sqrt(lambda);\n    ry *= Math.sqrt(lambda);\n  }\n\n\n  // Get center parameters (cx, cy, theta1, delta_theta)\n  //\n  var cc = get_arc_center(x1, y1, x2, y2, fa, fs, rx, ry, sin_phi, cos_phi);\n\n  var result = [];\n  var theta1 = cc[2];\n  var delta_theta = cc[3];\n\n  // Split an arc to multiple segments, so each segment\n  // will be less than \u03C4/4 (= 90\u00B0)\n  //\n  var segments = Math.max(Math.ceil(Math.abs(delta_theta) / (TAU / 4)), 1);\n  delta_theta /= segments;\n\n  for (var i = 0; i < segments; i++) {\n    result.push(approximate_unit_arc(theta1, delta_theta));\n    theta1 += delta_theta;\n  }\n\n  // We have a bezier approximation of a unit circle,\n  // now need to transform back to the original ellipse\n  //\n  return result.map(function (curve) {\n    for (var i = 0; i < curve.length; i += 2) {\n      var x = curve[i + 0];\n      var y = curve[i + 1];\n\n      // scale\n      x *= rx;\n      y *= ry;\n\n      // rotate\n      var xp = cos_phi*x - sin_phi*y;\n      var yp = sin_phi*x + cos_phi*y;\n\n      // translate\n      curve[i + 0] = xp + cc[0];\n      curve[i + 1] = yp + cc[1];\n    }\n\n    return curve;\n  });\n};\n", "'use strict';\n\n/* eslint-disable space-infix-ops */\n\n// The precision used to consider an ellipse as a circle\n//\nvar epsilon = 0.0000000001;\n\n// To convert degree in radians\n//\nvar torad = Math.PI / 180;\n\n// Class constructor :\n//  an ellipse centred at 0 with radii rx,ry and x - axis - angle ax.\n//\nfunction Ellipse(rx, ry, ax) {\n  if (!(this instanceof Ellipse)) { return new Ellipse(rx, ry, ax); }\n  this.rx = rx;\n  this.ry = ry;\n  this.ax = ax;\n}\n\n// Apply a linear transform m to the ellipse\n// m is an array representing a matrix :\n//    -         -\n//   | m[0] m[2] |\n//   | m[1] m[3] |\n//    -         -\n//\nEllipse.prototype.transform = function (m) {\n  // We consider the current ellipse as image of the unit circle\n  // by first scale(rx,ry) and then rotate(ax) ...\n  // So we apply ma =  m x rotate(ax) x scale(rx,ry) to the unit circle.\n  var c = Math.cos(this.ax * torad), s = Math.sin(this.ax * torad);\n  var ma = [\n    this.rx * (m[0]*c + m[2]*s),\n    this.rx * (m[1]*c + m[3]*s),\n    this.ry * (-m[0]*s + m[2]*c),\n    this.ry * (-m[1]*s + m[3]*c)\n  ];\n\n  // ma * transpose(ma) = [ J L ]\n  //                      [ L K ]\n  // L is calculated later (if the image is not a circle)\n  var J = ma[0]*ma[0] + ma[2]*ma[2],\n      K = ma[1]*ma[1] + ma[3]*ma[3];\n\n  // the discriminant of the characteristic polynomial of ma * transpose(ma)\n  var D = ((ma[0]-ma[3])*(ma[0]-ma[3]) + (ma[2]+ma[1])*(ma[2]+ma[1])) *\n          ((ma[0]+ma[3])*(ma[0]+ma[3]) + (ma[2]-ma[1])*(ma[2]-ma[1]));\n\n  // the \"mean eigenvalue\"\n  var JK = (J + K) / 2;\n\n  // check if the image is (almost) a circle\n  if (D < epsilon * JK) {\n    // if it is\n    this.rx = this.ry = Math.sqrt(JK);\n    this.ax = 0;\n    return this;\n  }\n\n  // if it is not a circle\n  var L = ma[0]*ma[1] + ma[2]*ma[3];\n\n  D = Math.sqrt(D);\n\n  // {l1,l2} = the two eigen values of ma * transpose(ma)\n  var l1 = JK + D/2,\n      l2 = JK - D/2;\n  // the x - axis - rotation angle is the argument of the l1 - eigenvector\n  /*eslint-disable indent*/\n  this.ax = (Math.abs(L) < epsilon && Math.abs(l1 - K) < epsilon) ?\n    90\n  :\n    Math.atan(Math.abs(L) > Math.abs(l1 - K) ?\n      (l1 - J) / L\n    :\n      L / (l1 - K)\n    ) * 180 / Math.PI;\n  /*eslint-enable indent*/\n\n  // if ax > 0 => rx = sqrt(l1), ry = sqrt(l2), else exchange axes and ax += 90\n  if (this.ax >= 0) {\n    // if ax in [0,90]\n    this.rx = Math.sqrt(l1);\n    this.ry = Math.sqrt(l2);\n  } else {\n    // if ax in ]-90,0[ => exchange axes\n    this.ax += 90;\n    this.rx = Math.sqrt(l2);\n    this.ry = Math.sqrt(l1);\n  }\n\n  return this;\n};\n\n// Check if the ellipse is (almost) degenerate, i.e. rx = 0 or ry = 0\n//\nEllipse.prototype.isDegenerate = function () {\n  return (this.rx < epsilon * this.ry || this.ry < epsilon * this.rx);\n};\n\nmodule.exports = Ellipse;\n", "// SVG Path transformations library\n//\n// Usage:\n//\n//    SvgPath('...')\n//      .translate(-150, -100)\n//      .scale(0.5)\n//      .translate(-150, -100)\n//      .toFixed(1)\n//      .toString()\n//\n\n'use strict';\n\n\nvar pathParse      = require('./path_parse');\nvar transformParse = require('./transform_parse');\nvar matrix         = require('./matrix');\nvar a2c            = require('./a2c');\nvar ellipse        = require('./ellipse');\n\n\n// Class constructor\n//\nfunction SvgPath(path) {\n  if (!(this instanceof SvgPath)) { return new SvgPath(path); }\n\n  var pstate = pathParse(path);\n\n  // Array of path segments.\n  // Each segment is array [command, param1, param2, ...]\n  this.segments = pstate.segments;\n\n  // Error message on parse error.\n  this.err      = pstate.err;\n\n  // Transforms stack for lazy evaluation\n  this.__stack    = [];\n}\n\nSvgPath.from = function (src) {\n  if (typeof src === 'string') return new SvgPath(src);\n\n  if (src instanceof SvgPath) {\n    // Create empty object\n    var s = new SvgPath('');\n\n    // Clone properies\n    s.err = src.err;\n    s.segments = src.segments.map(function (sgm) { return sgm.slice(); });\n    s.__stack = src.__stack.map(function (m) {\n      return matrix().matrix(m.toArray());\n    });\n\n    return s;\n  }\n\n  throw new Error('SvgPath.from: invalid param type ' + src);\n};\n\n\nSvgPath.prototype.__matrix = function (m) {\n  var self = this, i;\n\n  // Quick leave for empty matrix\n  if (!m.queue.length) { return; }\n\n  this.iterate(function (s, index, x, y) {\n    var p, result, name, isRelative;\n\n    switch (s[0]) {\n\n      // Process 'assymetric' commands separately\n      case 'v':\n        p      = m.calc(0, s[1], true);\n        result = (p[0] === 0) ? [ 'v', p[1] ] : [ 'l', p[0], p[1] ];\n        break;\n\n      case 'V':\n        p      = m.calc(x, s[1], false);\n        result = (p[0] === m.calc(x, y, false)[0]) ? [ 'V', p[1] ] : [ 'L', p[0], p[1] ];\n        break;\n\n      case 'h':\n        p      = m.calc(s[1], 0, true);\n        result = (p[1] === 0) ? [ 'h', p[0] ] : [ 'l', p[0], p[1] ];\n        break;\n\n      case 'H':\n        p      = m.calc(s[1], y, false);\n        result = (p[1] === m.calc(x, y, false)[1]) ? [ 'H', p[0] ] : [ 'L', p[0], p[1] ];\n        break;\n\n      case 'a':\n      case 'A':\n        // ARC is: ['A', rx, ry, x-axis-rotation, large-arc-flag, sweep-flag, x, y]\n\n        // Drop segment if arc is empty (end point === start point)\n        /*if ((s[0] === 'A' && s[6] === x && s[7] === y) ||\n            (s[0] === 'a' && s[6] === 0 && s[7] === 0)) {\n          return [];\n        }*/\n\n        // Transform rx, ry and the x-axis-rotation\n        var ma = m.toArray();\n        var e = ellipse(s[1], s[2], s[3]).transform(ma);\n\n        // flip sweep-flag if matrix is not orientation-preserving\n        if (ma[0] * ma[3] - ma[1] * ma[2] < 0) {\n          s[5] = s[5] ? '0' : '1';\n        }\n\n        // Transform end point as usual (without translation for relative notation)\n        p = m.calc(s[6], s[7], s[0] === 'a');\n\n        // Empty arcs can be ignored by renderer, but should not be dropped\n        // to avoid collisions with `S A S` and so on. Replace with empty line.\n        if ((s[0] === 'A' && s[6] === x && s[7] === y) ||\n            (s[0] === 'a' && s[6] === 0 && s[7] === 0)) {\n          result = [ s[0] === 'a' ? 'l' : 'L', p[0], p[1] ];\n          break;\n        }\n\n        // if the resulting ellipse is (almost) a segment ...\n        if (e.isDegenerate()) {\n          // replace the arc by a line\n          result = [ s[0] === 'a' ? 'l' : 'L', p[0], p[1] ];\n        } else {\n          // if it is a real ellipse\n          // s[0], s[4] and s[5] are not modified\n          result = [ s[0], e.rx, e.ry, e.ax, s[4], s[5], p[0], p[1] ];\n        }\n\n        break;\n\n      case 'm':\n        // Edge case. The very first `m` should be processed as absolute, if happens.\n        // Make sense for coord shift transforms.\n        isRelative = index > 0;\n\n        p = m.calc(s[1], s[2], isRelative);\n        result = [ 'm', p[0], p[1] ];\n        break;\n\n      default:\n        name       = s[0];\n        result     = [ name ];\n        isRelative = (name.toLowerCase() === name);\n\n        // Apply transformations to the segment\n        for (i = 1; i < s.length; i += 2) {\n          p = m.calc(s[i], s[i + 1], isRelative);\n          result.push(p[0], p[1]);\n        }\n    }\n\n    self.segments[index] = result;\n  }, true);\n};\n\n\n// Apply stacked commands\n//\nSvgPath.prototype.__evaluateStack = function () {\n  var m, i;\n\n  if (!this.__stack.length) { return; }\n\n  if (this.__stack.length === 1) {\n    this.__matrix(this.__stack[0]);\n    this.__stack = [];\n    return;\n  }\n\n  m = matrix();\n  i = this.__stack.length;\n\n  while (--i >= 0) {\n    m.matrix(this.__stack[i].toArray());\n  }\n\n  this.__matrix(m);\n  this.__stack = [];\n};\n\n\n// Convert processed SVG Path back to string\n//\nSvgPath.prototype.toString = function () {\n  var result = '', prevCmd = '', cmdSkipped = false;\n\n  this.__evaluateStack();\n\n  for (var i = 0, len = this.segments.length; i < len; i++) {\n    var segment = this.segments[i];\n    var cmd = segment[0];\n\n    // Command not repeating => store\n    if (cmd !== prevCmd || cmd === 'm' || cmd === 'M') {\n      // workaround for FontForge SVG importing bug, keep space between \"z m\".\n      if (cmd === 'm' && prevCmd === 'z') result += ' ';\n      result += cmd;\n\n      cmdSkipped = false;\n    } else {\n      cmdSkipped = true;\n    }\n\n    // Store segment params\n    for (var pos = 1; pos < segment.length; pos++) {\n      var val = segment[pos];\n      // Space can be skipped\n      // 1. After command (always)\n      // 2. For negative value (with '-' at start)\n      if (pos === 1) {\n        if (cmdSkipped && val >= 0) result += ' ';\n      } else if (val >= 0) result += ' ';\n\n      result += val;\n    }\n\n    prevCmd = cmd;\n  }\n\n  return result;\n};\n\n\n// Translate path to (x [, y])\n//\nSvgPath.prototype.translate = function (x, y) {\n  this.__stack.push(matrix().translate(x, y || 0));\n  return this;\n};\n\n\n// Scale path to (sx [, sy])\n// sy = sx if not defined\n//\nSvgPath.prototype.scale = function (sx, sy) {\n  this.__stack.push(matrix().scale(sx, (!sy && (sy !== 0)) ? sx : sy));\n  return this;\n};\n\n\n// Rotate path around point (sx [, sy])\n// sy = sx if not defined\n//\nSvgPath.prototype.rotate = function (angle, rx, ry) {\n  this.__stack.push(matrix().rotate(angle, rx || 0, ry || 0));\n  return this;\n};\n\n\n// Skew path along the X axis by `degrees` angle\n//\nSvgPath.prototype.skewX = function (degrees) {\n  this.__stack.push(matrix().skewX(degrees));\n  return this;\n};\n\n\n// Skew path along the Y axis by `degrees` angle\n//\nSvgPath.prototype.skewY = function (degrees) {\n  this.__stack.push(matrix().skewY(degrees));\n  return this;\n};\n\n\n// Apply matrix transform (array of 6 elements)\n//\nSvgPath.prototype.matrix = function (m) {\n  this.__stack.push(matrix().matrix(m));\n  return this;\n};\n\n\n// Transform path according to \"transform\" attr of SVG spec\n//\nSvgPath.prototype.transform = function (transformString) {\n  if (!transformString.trim()) {\n    return this;\n  }\n  this.__stack.push(transformParse(transformString));\n  return this;\n};\n\n\n// Round coords with given decimal precition.\n// 0 by default (to integers)\n//\nSvgPath.prototype.round = function (d) {\n  var contourStartDeltaX = 0, contourStartDeltaY = 0, deltaX = 0, deltaY = 0, l;\n\n  d = d || 0;\n\n  this.__evaluateStack();\n\n  this.segments.forEach(function (s) {\n    var isRelative = (s[0].toLowerCase() === s[0]);\n\n    switch (s[0]) {\n      case 'H':\n      case 'h':\n        if (isRelative) { s[1] += deltaX; }\n        deltaX = s[1] - s[1].toFixed(d);\n        s[1] = +s[1].toFixed(d);\n        return;\n\n      case 'V':\n      case 'v':\n        if (isRelative) { s[1] += deltaY; }\n        deltaY = s[1] - s[1].toFixed(d);\n        s[1] = +s[1].toFixed(d);\n        return;\n\n      case 'Z':\n      case 'z':\n        deltaX = contourStartDeltaX;\n        deltaY = contourStartDeltaY;\n        return;\n\n      case 'M':\n      case 'm':\n        if (isRelative) {\n          s[1] += deltaX;\n          s[2] += deltaY;\n        }\n\n        deltaX = s[1] - s[1].toFixed(d);\n        deltaY = s[2] - s[2].toFixed(d);\n\n        contourStartDeltaX = deltaX;\n        contourStartDeltaY = deltaY;\n\n        s[1] = +s[1].toFixed(d);\n        s[2] = +s[2].toFixed(d);\n        return;\n\n      case 'A':\n      case 'a':\n        // [cmd, rx, ry, x-axis-rotation, large-arc-flag, sweep-flag, x, y]\n        if (isRelative) {\n          s[6] += deltaX;\n          s[7] += deltaY;\n        }\n\n        deltaX = s[6] - s[6].toFixed(d);\n        deltaY = s[7] - s[7].toFixed(d);\n\n        s[1] = +s[1].toFixed(d);\n        s[2] = +s[2].toFixed(d);\n        s[3] = +s[3].toFixed(d + 2); // better precision for rotation\n        s[6] = +s[6].toFixed(d);\n        s[7] = +s[7].toFixed(d);\n        return;\n\n      default:\n        // a c l q s t\n        l = s.length;\n\n        if (isRelative) {\n          s[l - 2] += deltaX;\n          s[l - 1] += deltaY;\n        }\n\n        deltaX = s[l - 2] - s[l - 2].toFixed(d);\n        deltaY = s[l - 1] - s[l - 1].toFixed(d);\n\n        s.forEach(function (val, i) {\n          if (!i) { return; }\n          s[i] = +s[i].toFixed(d);\n        });\n        return;\n    }\n  });\n\n  return this;\n};\n\n\n// Apply iterator function to all segments. If function returns result,\n// current segment will be replaced to array of returned segments.\n// If empty array is returned, current regment will be deleted.\n//\nSvgPath.prototype.iterate = function (iterator, keepLazyStack) {\n  var segments = this.segments,\n      replacements = {},\n      needReplace = false,\n      lastX = 0,\n      lastY = 0,\n      countourStartX = 0,\n      countourStartY = 0;\n  var i, j, newSegments;\n\n  if (!keepLazyStack) {\n    this.__evaluateStack();\n  }\n\n  segments.forEach(function (s, index) {\n\n    var res = iterator(s, index, lastX, lastY);\n\n    if (Array.isArray(res)) {\n      replacements[index] = res;\n      needReplace = true;\n    }\n\n    var isRelative = (s[0] === s[0].toLowerCase());\n\n    // calculate absolute X and Y\n    switch (s[0]) {\n      case 'm':\n      case 'M':\n        lastX = s[1] + (isRelative ? lastX : 0);\n        lastY = s[2] + (isRelative ? lastY : 0);\n        countourStartX = lastX;\n        countourStartY = lastY;\n        return;\n\n      case 'h':\n      case 'H':\n        lastX = s[1] + (isRelative ? lastX : 0);\n        return;\n\n      case 'v':\n      case 'V':\n        lastY = s[1] + (isRelative ? lastY : 0);\n        return;\n\n      case 'z':\n      case 'Z':\n        // That make sence for multiple contours\n        lastX = countourStartX;\n        lastY = countourStartY;\n        return;\n\n      default:\n        lastX = s[s.length - 2] + (isRelative ? lastX : 0);\n        lastY = s[s.length - 1] + (isRelative ? lastY : 0);\n    }\n  });\n\n  // Replace segments if iterator return results\n\n  if (!needReplace) { return this; }\n\n  newSegments = [];\n\n  for (i = 0; i < segments.length; i++) {\n    if (typeof replacements[i] !== 'undefined') {\n      for (j = 0; j < replacements[i].length; j++) {\n        newSegments.push(replacements[i][j]);\n      }\n    } else {\n      newSegments.push(segments[i]);\n    }\n  }\n\n  this.segments = newSegments;\n\n  return this;\n};\n\n\n// Converts segments from relative to absolute\n//\nSvgPath.prototype.abs = function () {\n\n  this.iterate(function (s, index, x, y) {\n    var name = s[0],\n        nameUC = name.toUpperCase(),\n        i;\n\n    // Skip absolute commands\n    if (name === nameUC) { return; }\n\n    s[0] = nameUC;\n\n    switch (name) {\n      case 'v':\n        // v has shifted coords parity\n        s[1] += y;\n        return;\n\n      case 'a':\n        // ARC is: ['A', rx, ry, x-axis-rotation, large-arc-flag, sweep-flag, x, y]\n        // touch x, y only\n        s[6] += x;\n        s[7] += y;\n        return;\n\n      default:\n        for (i = 1; i < s.length; i++) {\n          s[i] += i % 2 ? x : y; // odd values are X, even - Y\n        }\n    }\n  }, true);\n\n  return this;\n};\n\n\n// Converts segments from absolute to relative\n//\nSvgPath.prototype.rel = function () {\n\n  this.iterate(function (s, index, x, y) {\n    var name = s[0],\n        nameLC = name.toLowerCase(),\n        i;\n\n    // Skip relative commands\n    if (name === nameLC) { return; }\n\n    // Don't touch the first M to avoid potential confusions.\n    if (index === 0 && name === 'M') { return; }\n\n    s[0] = nameLC;\n\n    switch (name) {\n      case 'V':\n        // V has shifted coords parity\n        s[1] -= y;\n        return;\n\n      case 'A':\n        // ARC is: ['A', rx, ry, x-axis-rotation, large-arc-flag, sweep-flag, x, y]\n        // touch x, y only\n        s[6] -= x;\n        s[7] -= y;\n        return;\n\n      default:\n        for (i = 1; i < s.length; i++) {\n          s[i] -= i % 2 ? x : y; // odd values are X, even - Y\n        }\n    }\n  }, true);\n\n  return this;\n};\n\n\n// Converts arcs to cubic b\u00E9zier curves\n//\nSvgPath.prototype.unarc = function () {\n  this.iterate(function (s, index, x, y) {\n    var new_segments, nextX, nextY, result = [], name = s[0];\n\n    // Skip anything except arcs\n    if (name !== 'A' && name !== 'a') { return null; }\n\n    if (name === 'a') {\n      // convert relative arc coordinates to absolute\n      nextX = x + s[6];\n      nextY = y + s[7];\n    } else {\n      nextX = s[6];\n      nextY = s[7];\n    }\n\n    new_segments = a2c(x, y, nextX, nextY, s[4], s[5], s[1], s[2], s[3]);\n\n    // Degenerated arcs can be ignored by renderer, but should not be dropped\n    // to avoid collisions with `S A S` and so on. Replace with empty line.\n    if (new_segments.length === 0) {\n      return [ [ s[0] === 'a' ? 'l' : 'L', s[6], s[7] ] ];\n    }\n\n    new_segments.forEach(function (s) {\n      result.push([ 'C', s[2], s[3], s[4], s[5], s[6], s[7] ]);\n    });\n\n    return result;\n  });\n\n  return this;\n};\n\n\n// Converts smooth curves (with missed control point) to generic curves\n//\nSvgPath.prototype.unshort = function () {\n  var segments = this.segments;\n  var prevControlX, prevControlY, prevSegment;\n  var curControlX, curControlY;\n\n  // TODO: add lazy evaluation flag when relative commands supported\n\n  this.iterate(function (s, idx, x, y) {\n    var name = s[0], nameUC = name.toUpperCase(), isRelative;\n\n    // First command MUST be M|m, it's safe to skip.\n    // Protect from access to [-1] for sure.\n    if (!idx) { return; }\n\n    if (nameUC === 'T') { // quadratic curve\n      isRelative = (name === 't');\n\n      prevSegment = segments[idx - 1];\n\n      if (prevSegment[0] === 'Q') {\n        prevControlX = prevSegment[1] - x;\n        prevControlY = prevSegment[2] - y;\n      } else if (prevSegment[0] === 'q') {\n        prevControlX = prevSegment[1] - prevSegment[3];\n        prevControlY = prevSegment[2] - prevSegment[4];\n      } else {\n        prevControlX = 0;\n        prevControlY = 0;\n      }\n\n      curControlX = -prevControlX;\n      curControlY = -prevControlY;\n\n      if (!isRelative) {\n        curControlX += x;\n        curControlY += y;\n      }\n\n      segments[idx] = [\n        isRelative ? 'q' : 'Q',\n        curControlX, curControlY,\n        s[1], s[2]\n      ];\n\n    } else if (nameUC === 'S') { // cubic curve\n      isRelative = (name === 's');\n\n      prevSegment = segments[idx - 1];\n\n      if (prevSegment[0] === 'C') {\n        prevControlX = prevSegment[3] - x;\n        prevControlY = prevSegment[4] - y;\n      } else if (prevSegment[0] === 'c') {\n        prevControlX = prevSegment[3] - prevSegment[5];\n        prevControlY = prevSegment[4] - prevSegment[6];\n      } else {\n        prevControlX = 0;\n        prevControlY = 0;\n      }\n\n      curControlX = -prevControlX;\n      curControlY = -prevControlY;\n\n      if (!isRelative) {\n        curControlX += x;\n        curControlY += y;\n      }\n\n      segments[idx] = [\n        isRelative ? 'c' : 'C',\n        curControlX, curControlY,\n        s[1], s[2], s[3], s[4]\n      ];\n    }\n  });\n\n  return this;\n};\n\n\nmodule.exports = SvgPath;\n", "'use strict';\n\nmodule.exports = require('./lib/svgpath');\n", "'use strict';\n\nmodule.exports = earcut;\nmodule.exports.default = earcut;\n\nfunction earcut(data, holeIndices, dim) {\n\n    dim = dim || 2;\n\n    var hasHoles = holeIndices && holeIndices.length,\n        outerLen = hasHoles ? holeIndices[0] * dim : data.length,\n        outerNode = linkedList(data, 0, outerLen, dim, true),\n        triangles = [];\n\n    if (!outerNode || outerNode.next === outerNode.prev) return triangles;\n\n    var minX, minY, maxX, maxY, x, y, invSize;\n\n    if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim);\n\n    // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n    if (data.length > 80 * dim) {\n        minX = maxX = data[0];\n        minY = maxY = data[1];\n\n        for (var i = dim; i < outerLen; i += dim) {\n            x = data[i];\n            y = data[i + 1];\n            if (x < minX) minX = x;\n            if (y < minY) minY = y;\n            if (x > maxX) maxX = x;\n            if (y > maxY) maxY = y;\n        }\n\n        // minX, minY and invSize are later used to transform coords into integers for z-order calculation\n        invSize = Math.max(maxX - minX, maxY - minY);\n        invSize = invSize !== 0 ? 1 / invSize : 0;\n    }\n\n    earcutLinked(outerNode, triangles, dim, minX, minY, invSize);\n\n    return triangles;\n}\n\n// create a circular doubly linked list from polygon points in the specified winding order\nfunction linkedList(data, start, end, dim, clockwise) {\n    var i, last;\n\n    if (clockwise === (signedArea(data, start, end, dim) > 0)) {\n        for (i = start; i < end; i += dim) last = insertNode(i, data[i], data[i + 1], last);\n    } else {\n        for (i = end - dim; i >= start; i -= dim) last = insertNode(i, data[i], data[i + 1], last);\n    }\n\n    if (last && equals(last, last.next)) {\n        removeNode(last);\n        last = last.next;\n    }\n\n    return last;\n}\n\n// eliminate colinear or duplicate points\nfunction filterPoints(start, end) {\n    if (!start) return start;\n    if (!end) end = start;\n\n    var p = start,\n        again;\n    do {\n        again = false;\n\n        if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {\n            removeNode(p);\n            p = end = p.prev;\n            if (p === p.next) break;\n            again = true;\n\n        } else {\n            p = p.next;\n        }\n    } while (again || p !== end);\n\n    return end;\n}\n\n// main ear slicing loop which triangulates a polygon (given as a linked list)\nfunction earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {\n    if (!ear) return;\n\n    // interlink polygon nodes in z-order\n    if (!pass && invSize) indexCurve(ear, minX, minY, invSize);\n\n    var stop = ear,\n        prev, next;\n\n    // iterate through ears, slicing them one by one\n    while (ear.prev !== ear.next) {\n        prev = ear.prev;\n        next = ear.next;\n\n        if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {\n            // cut off the triangle\n            triangles.push(prev.i / dim);\n            triangles.push(ear.i / dim);\n            triangles.push(next.i / dim);\n\n            removeNode(ear);\n\n            // skipping the next vertex leads to less sliver triangles\n            ear = next.next;\n            stop = next.next;\n\n            continue;\n        }\n\n        ear = next;\n\n        // if we looped through the whole remaining polygon and can't find any more ears\n        if (ear === stop) {\n            // try filtering points and slicing again\n            if (!pass) {\n                earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1);\n\n            // if this didn't work, try curing all small self-intersections locally\n            } else if (pass === 1) {\n                ear = cureLocalIntersections(filterPoints(ear), triangles, dim);\n                earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);\n\n            // as a last resort, try splitting the remaining polygon into two\n            } else if (pass === 2) {\n                splitEarcut(ear, triangles, dim, minX, minY, invSize);\n            }\n\n            break;\n        }\n    }\n}\n\n// check whether a polygon node forms a valid ear with adjacent nodes\nfunction isEar(ear) {\n    var a = ear.prev,\n        b = ear,\n        c = ear.next;\n\n    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\n    // now make sure we don't have other points inside the potential ear\n    var p = ear.next.next;\n\n    while (p !== ear.prev) {\n        if (pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&\n            area(p.prev, p, p.next) >= 0) return false;\n        p = p.next;\n    }\n\n    return true;\n}\n\nfunction isEarHashed(ear, minX, minY, invSize) {\n    var a = ear.prev,\n        b = ear,\n        c = ear.next;\n\n    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\n    // triangle bbox; min & max are calculated like this for speed\n    var minTX = a.x < b.x ? (a.x < c.x ? a.x : c.x) : (b.x < c.x ? b.x : c.x),\n        minTY = a.y < b.y ? (a.y < c.y ? a.y : c.y) : (b.y < c.y ? b.y : c.y),\n        maxTX = a.x > b.x ? (a.x > c.x ? a.x : c.x) : (b.x > c.x ? b.x : c.x),\n        maxTY = a.y > b.y ? (a.y > c.y ? a.y : c.y) : (b.y > c.y ? b.y : c.y);\n\n    // z-order range for the current triangle bbox;\n    var minZ = zOrder(minTX, minTY, minX, minY, invSize),\n        maxZ = zOrder(maxTX, maxTY, minX, minY, invSize);\n\n    var p = ear.prevZ,\n        n = ear.nextZ;\n\n    // look for points inside the triangle in both directions\n    while (p && p.z >= minZ && n && n.z <= maxZ) {\n        if (p !== ear.prev && p !== ear.next &&\n            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&\n            area(p.prev, p, p.next) >= 0) return false;\n        p = p.prevZ;\n\n        if (n !== ear.prev && n !== ear.next &&\n            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) &&\n            area(n.prev, n, n.next) >= 0) return false;\n        n = n.nextZ;\n    }\n\n    // look for remaining points in decreasing z-order\n    while (p && p.z >= minZ) {\n        if (p !== ear.prev && p !== ear.next &&\n            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&\n            area(p.prev, p, p.next) >= 0) return false;\n        p = p.prevZ;\n    }\n\n    // look for remaining points in increasing z-order\n    while (n && n.z <= maxZ) {\n        if (n !== ear.prev && n !== ear.next &&\n            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) &&\n            area(n.prev, n, n.next) >= 0) return false;\n        n = n.nextZ;\n    }\n\n    return true;\n}\n\n// go through all polygon nodes and cure small local self-intersections\nfunction cureLocalIntersections(start, triangles, dim) {\n    var p = start;\n    do {\n        var a = p.prev,\n            b = p.next.next;\n\n        if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {\n\n            triangles.push(a.i / dim);\n            triangles.push(p.i / dim);\n            triangles.push(b.i / dim);\n\n            // remove two nodes involved\n            removeNode(p);\n            removeNode(p.next);\n\n            p = start = b;\n        }\n        p = p.next;\n    } while (p !== start);\n\n    return filterPoints(p);\n}\n\n// try splitting polygon into two and triangulate them independently\nfunction splitEarcut(start, triangles, dim, minX, minY, invSize) {\n    // look for a valid diagonal that divides the polygon into two\n    var a = start;\n    do {\n        var b = a.next.next;\n        while (b !== a.prev) {\n            if (a.i !== b.i && isValidDiagonal(a, b)) {\n                // split the polygon in two by the diagonal\n                var c = splitPolygon(a, b);\n\n                // filter colinear points around the cuts\n                a = filterPoints(a, a.next);\n                c = filterPoints(c, c.next);\n\n                // run earcut on each half\n                earcutLinked(a, triangles, dim, minX, minY, invSize);\n                earcutLinked(c, triangles, dim, minX, minY, invSize);\n                return;\n            }\n            b = b.next;\n        }\n        a = a.next;\n    } while (a !== start);\n}\n\n// link every hole into the outer loop, producing a single-ring polygon without holes\nfunction eliminateHoles(data, holeIndices, outerNode, dim) {\n    var queue = [],\n        i, len, start, end, list;\n\n    for (i = 0, len = holeIndices.length; i < len; i++) {\n        start = holeIndices[i] * dim;\n        end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n        list = linkedList(data, start, end, dim, false);\n        if (list === list.next) list.steiner = true;\n        queue.push(getLeftmost(list));\n    }\n\n    queue.sort(compareX);\n\n    // process holes from left to right\n    for (i = 0; i < queue.length; i++) {\n        outerNode = eliminateHole(queue[i], outerNode);\n        outerNode = filterPoints(outerNode, outerNode.next);\n    }\n\n    return outerNode;\n}\n\nfunction compareX(a, b) {\n    return a.x - b.x;\n}\n\n// find a bridge between vertices that connects hole with an outer ring and and link it\nfunction eliminateHole(hole, outerNode) {\n    var bridge = findHoleBridge(hole, outerNode);\n    if (!bridge) {\n        return outerNode;\n    }\n\n    var bridgeReverse = splitPolygon(bridge, hole);\n\n    // filter collinear points around the cuts\n    var filteredBridge = filterPoints(bridge, bridge.next);\n    filterPoints(bridgeReverse, bridgeReverse.next);\n\n    // Check if input node was removed by the filtering\n    return outerNode === bridge ? filteredBridge : outerNode;\n}\n\n// David Eberly's algorithm for finding a bridge between hole and outer polygon\nfunction findHoleBridge(hole, outerNode) {\n    var p = outerNode,\n        hx = hole.x,\n        hy = hole.y,\n        qx = -Infinity,\n        m;\n\n    // find a segment intersected by a ray from the hole's leftmost point to the left;\n    // segment's endpoint with lesser x will be potential connection point\n    do {\n        if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {\n            var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);\n            if (x <= hx && x > qx) {\n                qx = x;\n                if (x === hx) {\n                    if (hy === p.y) return p;\n                    if (hy === p.next.y) return p.next;\n                }\n                m = p.x < p.next.x ? p : p.next;\n            }\n        }\n        p = p.next;\n    } while (p !== outerNode);\n\n    if (!m) return null;\n\n    if (hx === qx) return m; // hole touches outer segment; pick leftmost endpoint\n\n    // look for points inside the triangle of hole point, segment intersection and endpoint;\n    // if there are no points found, we have a valid connection;\n    // otherwise choose the point of the minimum angle with the ray as connection point\n\n    var stop = m,\n        mx = m.x,\n        my = m.y,\n        tanMin = Infinity,\n        tan;\n\n    p = m;\n\n    do {\n        if (hx >= p.x && p.x >= mx && hx !== p.x &&\n                pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {\n\n            tan = Math.abs(hy - p.y) / (hx - p.x); // tangential\n\n            if (locallyInside(p, hole) &&\n                (tan < tanMin || (tan === tanMin && (p.x > m.x || (p.x === m.x && sectorContainsSector(m, p)))))) {\n                m = p;\n                tanMin = tan;\n            }\n        }\n\n        p = p.next;\n    } while (p !== stop);\n\n    return m;\n}\n\n// whether sector in vertex m contains sector in vertex p in the same coordinates\nfunction sectorContainsSector(m, p) {\n    return area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;\n}\n\n// interlink polygon nodes in z-order\nfunction indexCurve(start, minX, minY, invSize) {\n    var p = start;\n    do {\n        if (p.z === null) p.z = zOrder(p.x, p.y, minX, minY, invSize);\n        p.prevZ = p.prev;\n        p.nextZ = p.next;\n        p = p.next;\n    } while (p !== start);\n\n    p.prevZ.nextZ = null;\n    p.prevZ = null;\n\n    sortLinked(p);\n}\n\n// Simon Tatham's linked list merge sort algorithm\n// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\nfunction sortLinked(list) {\n    var i, p, q, e, tail, numMerges, pSize, qSize,\n        inSize = 1;\n\n    do {\n        p = list;\n        list = null;\n        tail = null;\n        numMerges = 0;\n\n        while (p) {\n            numMerges++;\n            q = p;\n            pSize = 0;\n            for (i = 0; i < inSize; i++) {\n                pSize++;\n                q = q.nextZ;\n                if (!q) break;\n            }\n            qSize = inSize;\n\n            while (pSize > 0 || (qSize > 0 && q)) {\n\n                if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {\n                    e = p;\n                    p = p.nextZ;\n                    pSize--;\n                } else {\n                    e = q;\n                    q = q.nextZ;\n                    qSize--;\n                }\n\n                if (tail) tail.nextZ = e;\n                else list = e;\n\n                e.prevZ = tail;\n                tail = e;\n            }\n\n            p = q;\n        }\n\n        tail.nextZ = null;\n        inSize *= 2;\n\n    } while (numMerges > 1);\n\n    return list;\n}\n\n// z-order of a point given coords and inverse of the longer side of data bbox\nfunction zOrder(x, y, minX, minY, invSize) {\n    // coords are transformed into non-negative 15-bit integer range\n    x = 32767 * (x - minX) * invSize;\n    y = 32767 * (y - minY) * invSize;\n\n    x = (x | (x << 8)) & 0x00FF00FF;\n    x = (x | (x << 4)) & 0x0F0F0F0F;\n    x = (x | (x << 2)) & 0x33333333;\n    x = (x | (x << 1)) & 0x55555555;\n\n    y = (y | (y << 8)) & 0x00FF00FF;\n    y = (y | (y << 4)) & 0x0F0F0F0F;\n    y = (y | (y << 2)) & 0x33333333;\n    y = (y | (y << 1)) & 0x55555555;\n\n    return x | (y << 1);\n}\n\n// find the leftmost node of a polygon ring\nfunction getLeftmost(start) {\n    var p = start,\n        leftmost = start;\n    do {\n        if (p.x < leftmost.x || (p.x === leftmost.x && p.y < leftmost.y)) leftmost = p;\n        p = p.next;\n    } while (p !== start);\n\n    return leftmost;\n}\n\n// check if a point lies within a convex triangle\nfunction pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {\n    return (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 &&\n           (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 &&\n           (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;\n}\n\n// check if a diagonal between two polygon nodes is valid (lies in polygon interior)\nfunction isValidDiagonal(a, b) {\n    return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && // dones't intersect other edges\n           (locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && // locally visible\n            (area(a.prev, a, b.prev) || area(a, b.prev, b)) || // does not create opposite-facing sectors\n            equals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0); // special zero-length case\n}\n\n// signed area of a triangle\nfunction area(p, q, r) {\n    return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);\n}\n\n// check if two points are equal\nfunction equals(p1, p2) {\n    return p1.x === p2.x && p1.y === p2.y;\n}\n\n// check if two segments intersect\nfunction intersects(p1, q1, p2, q2) {\n    var o1 = sign(area(p1, q1, p2));\n    var o2 = sign(area(p1, q1, q2));\n    var o3 = sign(area(p2, q2, p1));\n    var o4 = sign(area(p2, q2, q1));\n\n    if (o1 !== o2 && o3 !== o4) return true; // general case\n\n    if (o1 === 0 && onSegment(p1, p2, q1)) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1\n    if (o2 === 0 && onSegment(p1, q2, q1)) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1\n    if (o3 === 0 && onSegment(p2, p1, q2)) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2\n    if (o4 === 0 && onSegment(p2, q1, q2)) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2\n\n    return false;\n}\n\n// for collinear points p, q, r, check if point q lies on segment pr\nfunction onSegment(p, q, r) {\n    return q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);\n}\n\nfunction sign(num) {\n    return num > 0 ? 1 : num < 0 ? -1 : 0;\n}\n\n// check if a polygon diagonal intersects any polygon segments\nfunction intersectsPolygon(a, b) {\n    var p = a;\n    do {\n        if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&\n                intersects(p, p.next, a, b)) return true;\n        p = p.next;\n    } while (p !== a);\n\n    return false;\n}\n\n// check if a polygon diagonal is locally inside the polygon\nfunction locallyInside(a, b) {\n    return area(a.prev, a, a.next) < 0 ?\n        area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 :\n        area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;\n}\n\n// check if the middle point of a polygon diagonal is inside the polygon\nfunction middleInside(a, b) {\n    var p = a,\n        inside = false,\n        px = (a.x + b.x) / 2,\n        py = (a.y + b.y) / 2;\n    do {\n        if (((p.y > py) !== (p.next.y > py)) && p.next.y !== p.y &&\n                (px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x))\n            inside = !inside;\n        p = p.next;\n    } while (p !== a);\n\n    return inside;\n}\n\n// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n// if one belongs to the outer ring and another to a hole, it merges it into a single ring\nfunction splitPolygon(a, b) {\n    var a2 = new Node(a.i, a.x, a.y),\n        b2 = new Node(b.i, b.x, b.y),\n        an = a.next,\n        bp = b.prev;\n\n    a.next = b;\n    b.prev = a;\n\n    a2.next = an;\n    an.prev = a2;\n\n    b2.next = a2;\n    a2.prev = b2;\n\n    bp.next = b2;\n    b2.prev = bp;\n\n    return b2;\n}\n\n// create a node and optionally link it with previous one (in a circular doubly linked list)\nfunction insertNode(i, x, y, last) {\n    var p = new Node(i, x, y);\n\n    if (!last) {\n        p.prev = p;\n        p.next = p;\n\n    } else {\n        p.next = last.next;\n        p.prev = last;\n        last.next.prev = p;\n        last.next = p;\n    }\n    return p;\n}\n\nfunction removeNode(p) {\n    p.next.prev = p.prev;\n    p.prev.next = p.next;\n\n    if (p.prevZ) p.prevZ.nextZ = p.nextZ;\n    if (p.nextZ) p.nextZ.prevZ = p.prevZ;\n}\n\nfunction Node(i, x, y) {\n    // vertex index in coordinates array\n    this.i = i;\n\n    // vertex coordinates\n    this.x = x;\n    this.y = y;\n\n    // previous and next vertex nodes in a polygon ring\n    this.prev = null;\n    this.next = null;\n\n    // z-order curve value\n    this.z = null;\n\n    // previous and next nodes in z-order\n    this.prevZ = null;\n    this.nextZ = null;\n\n    // indicates whether this is a steiner point\n    this.steiner = false;\n}\n\n// return a percentage difference between the polygon area and its triangulation area;\n// used to verify correctness of triangulation\nearcut.deviation = function (data, holeIndices, dim, triangles) {\n    var hasHoles = holeIndices && holeIndices.length;\n    var outerLen = hasHoles ? holeIndices[0] * dim : data.length;\n\n    var polygonArea = Math.abs(signedArea(data, 0, outerLen, dim));\n    if (hasHoles) {\n        for (var i = 0, len = holeIndices.length; i < len; i++) {\n            var start = holeIndices[i] * dim;\n            var end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n            polygonArea -= Math.abs(signedArea(data, start, end, dim));\n        }\n    }\n\n    var trianglesArea = 0;\n    for (i = 0; i < triangles.length; i += 3) {\n        var a = triangles[i] * dim;\n        var b = triangles[i + 1] * dim;\n        var c = triangles[i + 2] * dim;\n        trianglesArea += Math.abs(\n            (data[a] - data[c]) * (data[b + 1] - data[a + 1]) -\n            (data[a] - data[b]) * (data[c + 1] - data[a + 1]));\n    }\n\n    return polygonArea === 0 && trianglesArea === 0 ? 0 :\n        Math.abs((trianglesArea - polygonArea) / polygonArea);\n};\n\nfunction signedArea(data, start, end, dim) {\n    var sum = 0;\n    for (var i = start, j = end - dim; i < end; i += dim) {\n        sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);\n        j = i;\n    }\n    return sum;\n}\n\n// turn a polygon in a multi-dimensional array form (e.g. as in GeoJSON) into a form Earcut accepts\nearcut.flatten = function (data) {\n    var dim = data[0][0].length,\n        result = {vertices: [], holes: [], dimensions: dim},\n        holeIndex = 0;\n\n    for (var i = 0; i < data.length; i++) {\n        for (var j = 0; j < data[i].length; j++) {\n            for (var d = 0; d < dim; d++) result.vertices.push(data[i][j][d]);\n        }\n        if (i > 0) {\n            holeIndex += data[i - 1].length;\n            result.holes.push(holeIndex);\n        }\n    }\n    return result;\n};\n", "export default function(polygon) {\n  var i = -1,\n      n = polygon.length,\n      a,\n      b = polygon[n - 1],\n      area = 0;\n\n  while (++i < n) {\n    a = b;\n    b = polygon[i];\n    area += a[1] * b[0] - a[0] * b[1];\n  }\n\n  return area / 2;\n}\n", "export default function(polygon) {\n  var i = -1,\n      n = polygon.length,\n      x = 0,\n      y = 0,\n      a,\n      b = polygon[n - 1],\n      c,\n      k = 0;\n\n  while (++i < n) {\n    a = b;\n    b = polygon[i];\n    k += c = a[0] * b[1] - b[0] * a[1];\n    x += (a[0] + b[0]) * c;\n    y += (a[1] + b[1]) * c;\n  }\n\n  return k *= 3, [x / k, y / k];\n}\n", "export default function(polygon) {\n  var i = -1,\n      n = polygon.length,\n      b = polygon[n - 1],\n      xa,\n      ya,\n      xb = b[0],\n      yb = b[1],\n      perimeter = 0;\n\n  while (++i < n) {\n    xa = xb;\n    ya = yb;\n    b = polygon[i];\n    xb = b[0];\n    yb = b[1];\n    xa -= xb;\n    ya -= yb;\n    perimeter += Math.sqrt(xa * xa + ya * ya);\n  }\n\n  return perimeter;\n}\n", "import Path from \"svgpath\";\nimport { svgPathProperties } from \"svg-path-properties\";\nimport normalizeRing from \"./normalize.js\";\nimport { isFiniteNumber } from \"./math.js\";\nimport { INVALID_INPUT } from \"./errors.js\";\n\nfunction parse(str) {\n  return new Path(str).abs();\n}\n\nfunction split(parsed) {\n  return parsed\n    .toString()\n    .split(\"M\")\n    .map((d, i) => {\n      d = d.trim();\n      return i && d ? \"M\" + d : d;\n    })\n    .filter(d => d);\n}\n\nexport function toPathString(ring) {\n  return \"M\" + ring.join(\"L\") + \"Z\";\n}\n\nexport function splitPathString(str) {\n  return split(parse(str));\n}\n\nexport function pathStringToRing(str, maxSegmentLength) {\n  let parsed = parse(str);\n\n  return exactRing(parsed) || approximateRing(parsed, maxSegmentLength);\n}\n\nfunction exactRing(parsed) {\n  let segments = parsed.segments || [],\n    ring = [];\n\n  if (!segments.length || segments[0][0] !== \"M\") {\n    return false;\n  }\n\n  for (let i = 0; i < segments.length; i++) {\n    let [command, x, y] = segments[i];\n    if ((command === \"M\" && i) || command === \"Z\") {\n      break;\n    } else if (command === \"M\" || command === \"L\") {\n      ring.push([x, y]);\n    } else if (command === \"H\") {\n      ring.push([x, ring[ring.length - 1][1]]);\n    } else if (command === \"V\") {\n      ring.push([ring[ring.length - 1][0], x]);\n    } else {\n      return false;\n    }\n  }\n\n  return ring.length ? { ring } : false;\n}\n\nfunction approximateRing(parsed, maxSegmentLength) {\n  let ringPath = split(parsed)[0],\n    ring = [],\n    props,\n    len,\n    m,\n    numPoints = 3;\n\n  if (!ringPath) {\n    throw new TypeError(INVALID_INPUT);\n  }\n\n  m = measure(ringPath);\n  len = m.getTotalLength();\n\n  if (maxSegmentLength && isFiniteNumber(maxSegmentLength) && maxSegmentLength > 0) {\n    numPoints = Math.max(numPoints, Math.ceil(len / maxSegmentLength));\n  }\n\n  for (let i = 0; i < numPoints; i++) {\n    let p = m.getPointAtLength(len * i / numPoints);\n    ring.push([p.x, p.y]);\n  }\n\n  return {\n    ring,\n    skipBisect: true\n  };\n}\n\nfunction measure(d) {\n  // Use native browser measurement if running in browser\n  if (typeof window !== \"undefined\" && window && window.document) {\n    try {\n      let path = window.document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\n      path.setAttributeNS(null, \"d\", d);\n      return path;\n    } catch (e) {}\n  }\n  // Fall back to svg-path-properties\n  return svgPathProperties(d);\n}\n", "//Parses an SVG path into an object.\n//Taken from https://github.com/jkroso/parse-svg-path\n//Re-written so it can be used with rollup\nvar length = {a: 7, c: 6, h: 1, l: 2, m: 2, q: 4, s: 4, t: 2, v: 1, z: 0};\nvar segment = /([astvzqmhlc])([^astvzqmhlc]*)/ig;\n\nexport default function(path) {\n  var data = [];\n\tpath.replace(segment, function(_, command, args){\n\t\tvar type = command.toLowerCase();\n\t\targs = parseValues(args);\n\n\t\t// overloaded moveTo\n\t\tif (type === 'm' && args.length > 2) {\n\t\t\tdata.push([command].concat(args.splice(0, 2)));\n\t\t\ttype = 'l';\n\t\t\tcommand = command === 'm' ? 'l' : 'L';\n\t\t}\n\n\t\twhile (args.length >= 0) {\n\t\t\tif (args.length === length[type]) {\n\t\t\t\targs.unshift(command);\n\t\t\t\treturn data.push(args);\n\t\t\t}\n\t\t\tif (args.length < length[type]) {\n        throw new Error('malformed path data');\n      }\n\t\t\tdata.push([command].concat(args.splice(0, length[type])));\n\t\t}\n\t});\n  return data;\n}\n\nvar number = /-?[0-9]*\\.?[0-9]+(?:e[-+]?\\d+)?/ig;\n\nfunction parseValues(args) {\n\tvar numbers = args.match(number);\n\treturn numbers ? numbers.map(Number) : [];\n}\n", "//Calculate Bezier curve length and positionAtLength\n//Algorithms taken from http://bl.ocks.org/hnakamur/e7efd0602bfc15f66fc5, https://gist.github.com/tunght13488/6744e77c242cc7a94859 and http://stackoverflow.com/questions/11854907/calculate-the-length-of-a-segment-of-a-quadratic-bezier\n\nexport default function(ax, ay, bx, by, cx, cy, dx, dy) {\n  return new Bezier(ax, ay, bx, by, cx, cy, dx, dy);\n}\n\nfunction Bezier(ax, ay, bx, by, cx, cy, dx, dy) {\n  this.a = {x:ax, y:ay};\n  this.b = {x:bx, y:by};\n  this.c = {x:cx, y:cy};\n  this.d = {x:dx, y:dy};\n\n  if(dx !== null && dx !== undefined && dy !== null && dy !== undefined){\n    this.getArcLength = getCubicArcLength;\n    this.getPoint = cubicPoint;\n    this.getDerivative = cubicDerivative;\n  } else {\n    this.getArcLength = getQuadraticArcLength;\n    this.getPoint = quadraticPoint;\n    this.getDerivative = quadraticDerivative;\n  }\n\n  this.init();\n}\n\nBezier.prototype = {\n  constructor: Bezier,\n  init: function() {\n\n    this.length = this.getArcLength([this.a.x, this.b.x, this.c.x, this.d.x],\n                                    [this.a.y, this.b.y, this.c.y, this.d.y]);\n  },\n\n  getTotalLength: function() {\n    return this.length;\n  },\n  getPointAtLength: function(length) {\n    var t = t2length(length, this.length, this.getArcLength,\n                    [this.a.x, this.b.x, this.c.x, this.d.x],\n                    [this.a.y, this.b.y, this.c.y, this.d.y]);\n\n    return this.getPoint([this.a.x, this.b.x, this.c.x, this.d.x],\n                                    [this.a.y, this.b.y, this.c.y, this.d.y],\n                                  t);\n  },\n  getTangentAtLength: function(length){\n    var t = t2length(length, this.length, this.getArcLength,\n                    [this.a.x, this.b.x, this.c.x, this.d.x],\n                    [this.a.y, this.b.y, this.c.y, this.d.y]);\n\n    var derivative = this.getDerivative([this.a.x, this.b.x, this.c.x, this.d.x],\n                    [this.a.y, this.b.y, this.c.y, this.d.y], t);\n    var mdl = Math.sqrt(derivative.x * derivative.x + derivative.y * derivative.y);\n    var tangent;\n    if (mdl > 0){\n      tangent = {x: derivative.x/mdl, y: derivative.y/mdl};\n    } else {\n      tangent = {x: 0, y: 0};\n    }\n    return tangent;\n  },\n  getPropertiesAtLength: function(length){\n    var t = t2length(length, this.length, this.getArcLength,\n                    [this.a.x, this.b.x, this.c.x, this.d.x],\n                    [this.a.y, this.b.y, this.c.y, this.d.y]);\n\n    var derivative = this.getDerivative([this.a.x, this.b.x, this.c.x, this.d.x],\n                    [this.a.y, this.b.y, this.c.y, this.d.y], t);\n    var mdl = Math.sqrt(derivative.x * derivative.x + derivative.y * derivative.y);\n    var tangent;\n    if (mdl > 0){\n      tangent = {x: derivative.x/mdl, y: derivative.y/mdl};\n    } else {\n      tangent = {x: 0, y: 0};\n    }\n    var point = this.getPoint([this.a.x, this.b.x, this.c.x, this.d.x],\n                                    [this.a.y, this.b.y, this.c.y, this.d.y],\n                                  t);\n    return {x: point.x, y: point.y, tangentX: tangent.x, tangentY: tangent.y};\n  }\n};\n\nfunction quadraticDerivative(xs, ys, t){\n  return {x: (1 - t) * 2*(xs[1] - xs[0]) +t * 2*(xs[2] - xs[1]),\n    y: (1 - t) * 2*(ys[1] - ys[0]) +t * 2*(ys[2] - ys[1])\n  };\n}\n\nfunction cubicDerivative(xs, ys, t){\n  var derivative = quadraticPoint(\n            [3*(xs[1] - xs[0]), 3*(xs[2] - xs[1]), 3*(xs[3] - xs[2])],\n            [3*(ys[1] - ys[0]), 3*(ys[2] - ys[1]), 3*(ys[3] - ys[2])],\n            t);\n  return derivative;\n}\n\nfunction t2length(length, total_length, func, xs, ys){\n  var error = 1;\n  var t = length/total_length;\n  var step = (length - func(xs, ys, t))/total_length\n\n  while (error > 0.001){\n    var increasedTLength = func(xs, ys, t + step);\n    var decreasedTLength = func(xs, ys, t - step);\n    var increasedTError = Math.abs(length - increasedTLength)/total_length;\n    var decreasedTError = Math.abs(length - decreasedTLength)/total_length;\n    if (increasedTError < error) {\n      error = increasedTError\n      t += step\n    } else if (decreasedTError < error) {\n      error = decreasedTError\n      t -= step\n    } else {\n      step /= 2\n    }\n  }\n\n  return t;\n}\n\nfunction quadraticPoint(xs, ys, t){\n  var x = (1 - t) * (1 - t) * xs[0] + 2 * (1 - t) * t * xs[1] + t * t * xs[2];\n  var y = (1 - t) * (1 - t) * ys[0] + 2 * (1 - t) * t * ys[1] + t * t * ys[2];\n  return {x: x, y: y};\n}\n\nfunction cubicPoint(xs, ys, t){\n  var x = (1 - t) * (1 - t) * (1 - t) * xs[0] + 3 * (1 - t) * (1 - t) * t * xs[1] +\n  3 * (1 - t) * t * t * xs[2] + t * t * t * xs[3];\n  var y = (1 - t) * (1 - t) * (1 - t) * ys[0] + 3 * (1 - t) * (1 - t) * t * ys[1] +\n  3 * (1 - t) * t * t * ys[2] + t * t * t * ys[3];\n\n  return {x: x, y: y};\n}\n\nfunction getQuadraticArcLength(xs, ys, t) {\n  if (t === undefined) {\n    t = 1;\n  }\n   var ax = xs[0] - 2 * xs[1] + xs[2];\n   var ay = ys[0] - 2 * ys[1] + ys[2];\n   var bx = 2 * xs[1] - 2 * xs[0];\n   var by = 2 * ys[1] - 2 * ys[0];\n\n   var A = 4 * (ax * ax + ay * ay);\n   var B = 4 * (ax * bx + ay * by);\n   var C = bx * bx + by * by;\n\n   if(A === 0){\n     return t * Math.sqrt(Math.pow(xs[2] - xs[0], 2) + Math.pow(ys[2] - ys[0], 2));\n   }\n   var b = B/(2*A);\n   var c = C/A;\n   var u = t + b;\n   var k = c - b*b;\n\n   return (Math.sqrt(A)/2)*(\n     u*Math.sqrt(u*u+k)-b*Math.sqrt(b*b+k)+\n     k*Math.log(Math.abs(\n       (u+Math.sqrt(u*u+k))/(b+Math.sqrt(b*b+k))\n     ))\n   );\n\n}\n\n// Legendre-Gauss abscissae (xi values, defined at i=n as the roots of the nth order Legendre polynomial Pn(x))\nvar tValues = [\n  [],\n  [],\n  [-0.5773502691896257645091487805019574556476,0.5773502691896257645091487805019574556476],\n  [0,-0.7745966692414833770358530799564799221665,0.7745966692414833770358530799564799221665],\n  [-0.3399810435848562648026657591032446872005,0.3399810435848562648026657591032446872005,-0.8611363115940525752239464888928095050957,0.8611363115940525752239464888928095050957],\n  [0,-0.5384693101056830910363144207002088049672,0.5384693101056830910363144207002088049672,-0.9061798459386639927976268782993929651256,0.9061798459386639927976268782993929651256],\n  [0.6612093864662645136613995950199053470064,-0.6612093864662645136613995950199053470064,-0.2386191860831969086305017216807119354186,0.2386191860831969086305017216807119354186,-0.9324695142031520278123015544939946091347,0.9324695142031520278123015544939946091347],\n  [0, 0.4058451513773971669066064120769614633473,-0.4058451513773971669066064120769614633473,-0.7415311855993944398638647732807884070741,0.7415311855993944398638647732807884070741,-0.9491079123427585245261896840478512624007,0.9491079123427585245261896840478512624007],\n  [-0.1834346424956498049394761423601839806667,0.1834346424956498049394761423601839806667,-0.5255324099163289858177390491892463490419,0.5255324099163289858177390491892463490419,-0.7966664774136267395915539364758304368371,0.7966664774136267395915539364758304368371,-0.9602898564975362316835608685694729904282,0.9602898564975362316835608685694729904282],\n  [0,-0.8360311073266357942994297880697348765441,0.8360311073266357942994297880697348765441,-0.9681602395076260898355762029036728700494,0.9681602395076260898355762029036728700494,-0.3242534234038089290385380146433366085719,0.3242534234038089290385380146433366085719,-0.6133714327005903973087020393414741847857,0.6133714327005903973087020393414741847857],\n  [-0.1488743389816312108848260011297199846175,0.1488743389816312108848260011297199846175,-0.4333953941292471907992659431657841622000,0.4333953941292471907992659431657841622000,-0.6794095682990244062343273651148735757692,0.6794095682990244062343273651148735757692,-0.8650633666889845107320966884234930485275,0.8650633666889845107320966884234930485275,-0.9739065285171717200779640120844520534282,0.9739065285171717200779640120844520534282],\n  [0,-0.2695431559523449723315319854008615246796,0.2695431559523449723315319854008615246796,-0.5190961292068118159257256694586095544802,0.5190961292068118159257256694586095544802,-0.7301520055740493240934162520311534580496,0.7301520055740493240934162520311534580496,-0.8870625997680952990751577693039272666316,0.8870625997680952990751577693039272666316,-0.9782286581460569928039380011228573907714,0.9782286581460569928039380011228573907714],\n  [-0.1252334085114689154724413694638531299833,0.1252334085114689154724413694638531299833,-0.3678314989981801937526915366437175612563,0.3678314989981801937526915366437175612563,-0.5873179542866174472967024189405342803690,0.5873179542866174472967024189405342803690,-0.7699026741943046870368938332128180759849,0.7699026741943046870368938332128180759849,-0.9041172563704748566784658661190961925375,0.9041172563704748566784658661190961925375,-0.9815606342467192506905490901492808229601,0.9815606342467192506905490901492808229601],\n  [0,-0.2304583159551347940655281210979888352115,0.2304583159551347940655281210979888352115,-0.4484927510364468528779128521276398678019,0.4484927510364468528779128521276398678019,-0.6423493394403402206439846069955156500716,0.6423493394403402206439846069955156500716,-0.8015780907333099127942064895828598903056,0.8015780907333099127942064895828598903056,-0.9175983992229779652065478365007195123904,0.9175983992229779652065478365007195123904,-0.9841830547185881494728294488071096110649,0.9841830547185881494728294488071096110649],\n  [-0.1080549487073436620662446502198347476119,0.1080549487073436620662446502198347476119,-0.3191123689278897604356718241684754668342,0.3191123689278897604356718241684754668342,-0.5152486363581540919652907185511886623088,0.5152486363581540919652907185511886623088,-0.6872929048116854701480198030193341375384,0.6872929048116854701480198030193341375384,-0.8272013150697649931897947426503949610397,0.8272013150697649931897947426503949610397,-0.9284348836635735173363911393778742644770,0.9284348836635735173363911393778742644770,-0.9862838086968123388415972667040528016760,0.9862838086968123388415972667040528016760],\n  [0,-0.2011940939974345223006283033945962078128,0.2011940939974345223006283033945962078128,-0.3941513470775633698972073709810454683627,0.3941513470775633698972073709810454683627,-0.5709721726085388475372267372539106412383,0.5709721726085388475372267372539106412383,-0.7244177313601700474161860546139380096308,0.7244177313601700474161860546139380096308,-0.8482065834104272162006483207742168513662,0.8482065834104272162006483207742168513662,-0.9372733924007059043077589477102094712439,0.9372733924007059043077589477102094712439,-0.9879925180204854284895657185866125811469,0.9879925180204854284895657185866125811469],\n  [-0.0950125098376374401853193354249580631303,0.0950125098376374401853193354249580631303,-0.2816035507792589132304605014604961064860,0.2816035507792589132304605014604961064860,-0.4580167776572273863424194429835775735400,0.4580167776572273863424194429835775735400,-0.6178762444026437484466717640487910189918,0.6178762444026437484466717640487910189918,-0.7554044083550030338951011948474422683538,0.7554044083550030338951011948474422683538,-0.8656312023878317438804678977123931323873,0.8656312023878317438804678977123931323873,-0.9445750230732325760779884155346083450911,0.9445750230732325760779884155346083450911,-0.9894009349916499325961541734503326274262,0.9894009349916499325961541734503326274262],\n  [0,-0.1784841814958478558506774936540655574754,0.1784841814958478558506774936540655574754,-0.3512317634538763152971855170953460050405,0.3512317634538763152971855170953460050405,-0.5126905370864769678862465686295518745829,0.5126905370864769678862465686295518745829,-0.6576711592166907658503022166430023351478,0.6576711592166907658503022166430023351478,-0.7815140038968014069252300555204760502239,0.7815140038968014069252300555204760502239,-0.8802391537269859021229556944881556926234,0.8802391537269859021229556944881556926234,-0.9506755217687677612227169578958030214433,0.9506755217687677612227169578958030214433,-0.9905754753144173356754340199406652765077,0.9905754753144173356754340199406652765077],\n  [-0.0847750130417353012422618529357838117333,0.0847750130417353012422618529357838117333,-0.2518862256915055095889728548779112301628,0.2518862256915055095889728548779112301628,-0.4117511614628426460359317938330516370789,0.4117511614628426460359317938330516370789,-0.5597708310739475346078715485253291369276,0.5597708310739475346078715485253291369276,-0.6916870430603532078748910812888483894522,0.6916870430603532078748910812888483894522,-0.8037049589725231156824174550145907971032,0.8037049589725231156824174550145907971032,-0.8926024664975557392060605911271455154078,0.8926024664975557392060605911271455154078,-0.9558239495713977551811958929297763099728,0.9558239495713977551811958929297763099728,-0.9915651684209309467300160047061507702525,0.9915651684209309467300160047061507702525],\n  [0,-0.1603586456402253758680961157407435495048,0.1603586456402253758680961157407435495048,-0.3165640999636298319901173288498449178922,0.3165640999636298319901173288498449178922,-0.4645707413759609457172671481041023679762,0.4645707413759609457172671481041023679762,-0.6005453046616810234696381649462392798683,0.6005453046616810234696381649462392798683,-0.7209661773352293786170958608237816296571,0.7209661773352293786170958608237816296571,-0.8227146565371428249789224867127139017745,0.8227146565371428249789224867127139017745,-0.9031559036148179016426609285323124878093,0.9031559036148179016426609285323124878093,-0.9602081521348300308527788406876515266150,0.9602081521348300308527788406876515266150,-0.9924068438435844031890176702532604935893,0.9924068438435844031890176702532604935893],\n  [-0.0765265211334973337546404093988382110047,0.0765265211334973337546404093988382110047,-0.2277858511416450780804961953685746247430,0.2277858511416450780804961953685746247430,-0.3737060887154195606725481770249272373957,0.3737060887154195606725481770249272373957,-0.5108670019508270980043640509552509984254,0.5108670019508270980043640509552509984254,-0.6360536807265150254528366962262859367433,0.6360536807265150254528366962262859367433,-0.7463319064601507926143050703556415903107,0.7463319064601507926143050703556415903107,-0.8391169718222188233945290617015206853296,0.8391169718222188233945290617015206853296,-0.9122344282513259058677524412032981130491,0.9122344282513259058677524412032981130491,-0.9639719272779137912676661311972772219120,0.9639719272779137912676661311972772219120,-0.9931285991850949247861223884713202782226,0.9931285991850949247861223884713202782226],\n  [0,-0.1455618541608950909370309823386863301163,0.1455618541608950909370309823386863301163,-0.2880213168024010966007925160646003199090,0.2880213168024010966007925160646003199090,-0.4243421202074387835736688885437880520964,0.4243421202074387835736688885437880520964,-0.5516188358872198070590187967243132866220,0.5516188358872198070590187967243132866220,-0.6671388041974123193059666699903391625970,0.6671388041974123193059666699903391625970,-0.7684399634756779086158778513062280348209,0.7684399634756779086158778513062280348209,-0.8533633645833172836472506385875676702761,0.8533633645833172836472506385875676702761,-0.9200993341504008287901871337149688941591,0.9200993341504008287901871337149688941591,-0.9672268385663062943166222149076951614246,0.9672268385663062943166222149076951614246,-0.9937521706203895002602420359379409291933,0.9937521706203895002602420359379409291933],\n  [-0.0697392733197222212138417961186280818222,0.0697392733197222212138417961186280818222,-0.2078604266882212854788465339195457342156,0.2078604266882212854788465339195457342156,-0.3419358208920842251581474204273796195591,0.3419358208920842251581474204273796195591,-0.4693558379867570264063307109664063460953,0.4693558379867570264063307109664063460953,-0.5876404035069115929588769276386473488776,0.5876404035069115929588769276386473488776,-0.6944872631866827800506898357622567712673,0.6944872631866827800506898357622567712673,-0.7878168059792081620042779554083515213881,0.7878168059792081620042779554083515213881,-0.8658125777203001365364256370193787290847,0.8658125777203001365364256370193787290847,-0.9269567721871740005206929392590531966353,0.9269567721871740005206929392590531966353,-0.9700604978354287271239509867652687108059,0.9700604978354287271239509867652687108059,-0.9942945854823992920730314211612989803930,0.9942945854823992920730314211612989803930],\n  [0,-0.1332568242984661109317426822417661370104,0.1332568242984661109317426822417661370104,-0.2641356809703449305338695382833096029790,0.2641356809703449305338695382833096029790,-0.3903010380302908314214888728806054585780,0.3903010380302908314214888728806054585780,-0.5095014778460075496897930478668464305448,0.5095014778460075496897930478668464305448,-0.6196098757636461563850973116495956533871,0.6196098757636461563850973116495956533871,-0.7186613631319501944616244837486188483299,0.7186613631319501944616244837486188483299,-0.8048884016188398921511184069967785579414,0.8048884016188398921511184069967785579414,-0.8767523582704416673781568859341456716389,0.8767523582704416673781568859341456716389,-0.9329710868260161023491969890384229782357,0.9329710868260161023491969890384229782357,-0.9725424712181152319560240768207773751816,0.9725424712181152319560240768207773751816,-0.9947693349975521235239257154455743605736,0.9947693349975521235239257154455743605736],\n  [-0.0640568928626056260850430826247450385909,0.0640568928626056260850430826247450385909,-0.1911188674736163091586398207570696318404,0.1911188674736163091586398207570696318404,-0.3150426796961633743867932913198102407864,0.3150426796961633743867932913198102407864,-0.4337935076260451384870842319133497124524,0.4337935076260451384870842319133497124524,-0.5454214713888395356583756172183723700107,0.5454214713888395356583756172183723700107,-0.6480936519369755692524957869107476266696,0.6480936519369755692524957869107476266696,-0.7401241915785543642438281030999784255232,0.7401241915785543642438281030999784255232,-0.8200019859739029219539498726697452080761,0.8200019859739029219539498726697452080761,-0.8864155270044010342131543419821967550873,0.8864155270044010342131543419821967550873,-0.9382745520027327585236490017087214496548,0.9382745520027327585236490017087214496548,-0.9747285559713094981983919930081690617411,0.9747285559713094981983919930081690617411,-0.9951872199970213601799974097007368118745,0.9951872199970213601799974097007368118745]\n];\n\n// Legendre-Gauss weights (wi values, defined by a function linked to in the Bezier primer article)\nvar cValues = [\n  [],[],\n  [1.0,1.0],\n  [0.8888888888888888888888888888888888888888,0.5555555555555555555555555555555555555555,0.5555555555555555555555555555555555555555],\n  [0.6521451548625461426269360507780005927646,0.6521451548625461426269360507780005927646,0.3478548451374538573730639492219994072353,0.3478548451374538573730639492219994072353],\n  [0.5688888888888888888888888888888888888888,0.4786286704993664680412915148356381929122,0.4786286704993664680412915148356381929122,0.2369268850561890875142640407199173626432,0.2369268850561890875142640407199173626432],\n  [0.3607615730481386075698335138377161116615,0.3607615730481386075698335138377161116615,0.4679139345726910473898703439895509948116,0.4679139345726910473898703439895509948116,0.1713244923791703450402961421727328935268,0.1713244923791703450402961421727328935268],\n  [0.4179591836734693877551020408163265306122,0.3818300505051189449503697754889751338783,0.3818300505051189449503697754889751338783,0.2797053914892766679014677714237795824869,0.2797053914892766679014677714237795824869,0.1294849661688696932706114326790820183285,0.1294849661688696932706114326790820183285],\n  [0.3626837833783619829651504492771956121941,0.3626837833783619829651504492771956121941,0.3137066458778872873379622019866013132603,0.3137066458778872873379622019866013132603,0.2223810344533744705443559944262408844301,0.2223810344533744705443559944262408844301,0.1012285362903762591525313543099621901153,0.1012285362903762591525313543099621901153],\n  [0.3302393550012597631645250692869740488788,0.1806481606948574040584720312429128095143,0.1806481606948574040584720312429128095143,0.0812743883615744119718921581105236506756,0.0812743883615744119718921581105236506756,0.3123470770400028400686304065844436655987,0.3123470770400028400686304065844436655987,0.2606106964029354623187428694186328497718,0.2606106964029354623187428694186328497718],\n  [0.2955242247147528701738929946513383294210,0.2955242247147528701738929946513383294210,0.2692667193099963550912269215694693528597,0.2692667193099963550912269215694693528597,0.2190863625159820439955349342281631924587,0.2190863625159820439955349342281631924587,0.1494513491505805931457763396576973324025,0.1494513491505805931457763396576973324025,0.0666713443086881375935688098933317928578,0.0666713443086881375935688098933317928578],\n  [0.2729250867779006307144835283363421891560,0.2628045445102466621806888698905091953727,0.2628045445102466621806888698905091953727,0.2331937645919904799185237048431751394317,0.2331937645919904799185237048431751394317,0.1862902109277342514260976414316558916912,0.1862902109277342514260976414316558916912,0.1255803694649046246346942992239401001976,0.1255803694649046246346942992239401001976,0.0556685671161736664827537204425485787285,0.0556685671161736664827537204425485787285],\n  [0.2491470458134027850005624360429512108304,0.2491470458134027850005624360429512108304,0.2334925365383548087608498989248780562594,0.2334925365383548087608498989248780562594,0.2031674267230659217490644558097983765065,0.2031674267230659217490644558097983765065,0.1600783285433462263346525295433590718720,0.1600783285433462263346525295433590718720,0.1069393259953184309602547181939962242145,0.1069393259953184309602547181939962242145,0.0471753363865118271946159614850170603170,0.0471753363865118271946159614850170603170],\n  [0.2325515532308739101945895152688359481566,0.2262831802628972384120901860397766184347,0.2262831802628972384120901860397766184347,0.2078160475368885023125232193060527633865,0.2078160475368885023125232193060527633865,0.1781459807619457382800466919960979955128,0.1781459807619457382800466919960979955128,0.1388735102197872384636017768688714676218,0.1388735102197872384636017768688714676218,0.0921214998377284479144217759537971209236,0.0921214998377284479144217759537971209236,0.0404840047653158795200215922009860600419,0.0404840047653158795200215922009860600419],\nnnnnnnn  [0.1460811336496904271919851476833711882448,0.1445244039899700590638271665537525436099,0.1445244039899700590638271665537525436099,0.1398873947910731547221334238675831108927,0.1398873947910731547221334238675831108927,0.1322689386333374617810525744967756043290,0.1322689386333374617810525744967756043290,0.1218314160537285341953671771257335983563,0.1218314160537285341953671771257335983563,0.1087972991671483776634745780701056420336,0.1087972991671483776634745780701056420336,0.0934444234560338615532897411139320884835,0.0934444234560338615532897411139320884835,0.0761001136283793020170516533001831792261,0.0761001136283793020170516533001831792261,0.0571344254268572082836358264724479574912,0.0571344254268572082836358264724479574912,0.0369537897708524937999506682993296661889,0.0369537897708524937999506682993296661889,0.0160172282577743333242246168584710152658,0.0160172282577743333242246168584710152658],\nn  [0.1336545721861061753514571105458443385831,0.1324620394046966173716424647033169258050,0.1324620394046966173716424647033169258050,0.1289057221880821499785953393997936532597,0.1289057221880821499785953393997936532597,0.1230490843067295304675784006720096548158,0.1230490843067295304675784006720096548158,0.1149966402224113649416435129339613014914,0.1149966402224113649416435129339613014914,0.1048920914645414100740861850147438548584,0.1048920914645414100740861850147438548584,0.0929157660600351474770186173697646486034,0.0929157660600351474770186173697646486034,0.0792814117767189549228925247420432269137,0.0792814117767189549228925247420432269137,0.0642324214085258521271696151589109980391,0.0642324214085258521271696151589109980391,0.0480376717310846685716410716320339965612,0.0480376717310846685716410716320339965612,0.0309880058569794443106942196418845053837,0.0309880058569794443106942196418845053837,0.0134118594871417720813094934586150649766,0.0134118594871417720813094934586150649766],\n  [0.1279381953467521569740561652246953718517,0.1279381953467521569740561652246953718517,0.1258374563468282961213753825111836887264,0.1258374563468282961213753825111836887264,0.1216704729278033912044631534762624256070,0.1216704729278033912044631534762624256070,0.1155056680537256013533444839067835598622,0.1155056680537256013533444839067835598622,0.1074442701159656347825773424466062227946,0.1074442701159656347825773424466062227946,0.0976186521041138882698806644642471544279,0.0976186521041138882698806644642471544279,0.0861901615319532759171852029837426671850,0.0861901615319532759171852029837426671850,0.0733464814110803057340336152531165181193,0.0733464814110803057340336152531165181193,0.0592985849154367807463677585001085845412,0.0592985849154367807463677585001085845412,0.0442774388174198061686027482113382288593,0.0442774388174198061686027482113382288593,0.0285313886289336631813078159518782864491,0.0285313886289336631813078159518782864491,0.0123412297999871995468056670700372915759,0.0123412297999871995468056670700372915759]\n];\n\n// LUT for binomial coefficient arrays per curve order 'n'\nvar binomialCoefficients = [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1]];\n\n// Look up what the binomial coefficient is for pair {n,k}\nfunction binomials(n, k) {\n  return binomialCoefficients[n][k];\n}\n\n/**\n * Compute the curve derivative (hodograph) at t.\n */\nfunction getDerivative(derivative, t, vs) {\n  // the derivative of any 't'-less function is zero.\n  var n = vs.length - 1,\n      _vs,\n      value,\n      k;\n  if (n === 0) {\n    return 0;\n  }\n\n  // direct values? compute!\n  if (derivative === 0) {\n    value = 0;\n    for (k = 0; k <= n; k++) {\n      value += binomials(n, k) * Math.pow(1 - t, n - k) * Math.pow(t, k) * vs[k];\n    }\n    return value;\n  } else {\n    // Still some derivative? go down one order, then try\n    // for the lower order curve's.\n    _vs = new Array(n);\n    for (k = 0; k < n; k++) {\n      _vs[k] = n * (vs[k + 1] - vs[k]);\n    }\n    return getDerivative(derivative - 1, t, _vs);\n  }\n}\n\nfunction B(xs, ys, t) {\n  var xbase = getDerivative(1, t, xs);\n  var ybase = getDerivative(1, t, ys);\n  var combined = xbase * xbase + ybase * ybase;\n  return Math.sqrt(combined);\n}\n\nfunction getCubicArcLength(xs, ys, t) {\n  var z, sum, i, correctedT;\n\n  /*if (xs.length >= tValues.length) {\n    throw new Error('too high n bezier');\n  }*/\n\n  if (t === undefined) {\n    t = 1;\n  }\n  var n = 20;\n\n  z = t / 2;\n  sum = 0;\n  for (i = 0; i < n; i++) {\n    correctedT = z * tValues[n][i] + z;\n    sum += cValues[n][i] * B(xs, ys, correctedT);\n  }\n  return z * sum;\n}\n", "//This file is taken from the following project: https://github.com/fontello/svgpath\n// Convert an arc to a sequence of cubic b\u00E9zier curves\n//\n'use strict';\n\n\nvar TAU = Math.PI * 2;\n\n\n/* eslint-disable space-infix-ops */\n\n// Calculate an angle between two unit vectors\n//\n// Since we measure angle between radii of circular arcs,\n// we can use simplified math (without length normalization)\n//\nfunction unit_vector_angle(ux, uy, vx, vy) {\n  var sign = (ux * vy - uy * vx < 0) ? -1 : 1;\n  var dot  = ux * vx + uy * vy;\n\n  // Add this to work with arbitrary vectors:\n  // dot /= Math.sqrt(ux * ux + uy * uy) * Math.sqrt(vx * vx + vy * vy);\n\n  // rounding errors, e.g. -1.0000000000000002 can screw up this\n  if (dot >  1.0) { dot =  1.0; }\n  if (dot < -1.0) { dot = -1.0; }\n\n  return sign * Math.acos(dot);\n}\n\n\n// Convert from endpoint to center parameterization,\n// see http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes\n//\n// Return [cx, cy, theta1, delta_theta]\n//\nfunction get_arc_center(x1, y1, x2, y2, fa, fs, rx, ry, sin_phi, cos_phi) {\n  // Step 1.\n  //\n  // Moving an ellipse so origin will be the middlepoint between our two\n  // points. After that, rotate it to line up ellipse axes with coordinate\n  // axes.\n  //\n  var x1p =  cos_phi*(x1-x2)/2 + sin_phi*(y1-y2)/2;\n  var y1p = -sin_phi*(x1-x2)/2 + cos_phi*(y1-y2)/2;\n\n  var rx_sq  =  rx * rx;\n  var ry_sq  =  ry * ry;\n  var x1p_sq = x1p * x1p;\n  var y1p_sq = y1p * y1p;\n\n  // Step 2.\n  //\n  // Compute coordinates of the centre of this ellipse (cx', cy')\n  // in the new coordinate system.\n  //\n  var radicant = (rx_sq * ry_sq) - (rx_sq * y1p_sq) - (ry_sq * x1p_sq);\n\n  if (radicant < 0) {\n    // due to rounding errors it might be e.g. -1.3877787807814457e-17\n    radicant = 0;\n  }\n\n  radicant /=   (rx_sq * y1p_sq) + (ry_sq * x1p_sq);\n  radicant = Math.sqrt(radicant) * (fa === fs ? -1 : 1);\n\n  var cxp = radicant *  rx/ry * y1p;\n  var cyp = radicant * -ry/rx * x1p;\n\n  // Step 3.\n  //\n  // Transform back to get centre coordinates (cx, cy) in the original\n  // coordinate system.\n  //\n  var cx = cos_phi*cxp - sin_phi*cyp + (x1+x2)/2;\n  var cy = sin_phi*cxp + cos_phi*cyp + (y1+y2)/2;\n\n  // Step 4.\n  //\n  // Compute angles (theta1, delta_theta).\n  //\n  var v1x =  (x1p - cxp) / rx;\n  var v1y =  (y1p - cyp) / ry;\n  var v2x = (-x1p - cxp) / rx;\n  var v2y = (-y1p - cyp) / ry;\n\n  var theta1 = unit_vector_angle(1, 0, v1x, v1y);\n  var delta_theta = unit_vector_angle(v1x, v1y, v2x, v2y);\n\n  if (fs === 0 && delta_theta > 0) {\n    delta_theta -= TAU;\n  }\n  if (fs === 1 && delta_theta < 0) {\n    delta_theta += TAU;\n  }\n\n  return [ cx, cy, theta1, delta_theta ];\n}\n\n//\n// Approximate one unit arc segment with b\u00E9zier curves,\n// see http://math.stackexchange.com/questions/873224\n//\nfunction approximate_unit_arc(theta1, delta_theta) {\n  var alpha = 4/3 * Math.tan(delta_theta/4);\n\n  var x1 = Math.cos(theta1);\n  var y1 = Math.sin(theta1);\n  var x2 = Math.cos(theta1 + delta_theta);\n  var y2 = Math.sin(theta1 + delta_theta);\n\n  return [ x1, y1, x1 - y1*alpha, y1 + x1*alpha, x2 + y2*alpha, y2 - x2*alpha, x2, y2 ];\n}\n\nexport default function(x1, y1, rx, ry, phi, fa, fs, x2, y2) {\n  var sin_phi = Math.sin(phi * TAU / 360);\n  var cos_phi = Math.cos(phi * TAU / 360);\n\n  // Make sure radii are valid\n  //\n  var x1p =  cos_phi*(x1-x2)/2 + sin_phi*(y1-y2)/2;\n  var y1p = -sin_phi*(x1-x2)/2 + cos_phi*(y1-y2)/2;\n\n  if (x1p === 0 && y1p === 0) {\n    // we're asked to draw line to itself\n    return [];\n  }\n\n  if (rx === 0 || ry === 0) {\n    // one of the radii is zero\n    return [];\n  }\n\n\n  // Compensate out-of-range radii\n  //\n  rx = Math.abs(rx);\n  ry = Math.abs(ry);\n\n  var lambda = (x1p * x1p) / (rx * rx) + (y1p * y1p) / (ry * ry);\n  if (lambda > 1) {\n    rx *= Math.sqrt(lambda);\n    ry *= Math.sqrt(lambda);\n  }\n\n\n  // Get center parameters (cx, cy, theta1, delta_theta)\n  //\n  var cc = get_arc_center(x1, y1, x2, y2, fa, fs, rx, ry, sin_phi, cos_phi);\n\n  var result = [];\n  var theta1 = cc[2];\n  var delta_theta = cc[3];\n\n  // Split an arc to multiple segments, so each segment\n  // will be less than \u03C4/4 (= 90\u00B0)\n  //\n  var segments = Math.max(Math.ceil(Math.abs(delta_theta) / (TAU / 4)), 1);\n  delta_theta /= segments;\n\n  for (var i = 0; i < segments; i++) {\n    result.push(approximate_unit_arc(theta1, delta_theta));\n    theta1 += delta_theta;\n  }\n\n  // We have a bezier approximation of a unit circle,\n  // now need to transform back to the original ellipse\n  //\n  return result.map(function (curve) {\n    for (var i = 0; i < curve.length; i += 2) {\n      var x = curve[i + 0];\n      var y = curve[i + 1];\n\n      // scale\n      x *= rx;\n      y *= ry;\n\n      // rotate\n      var xp = cos_phi*x - sin_phi*y;\n      var yp = sin_phi*x + cos_phi*y;\n\n      // translate\n      curve[i + 0] = xp + cc[0];\n      curve[i + 1] = yp + cc[1];\n    }\n\n    return curve;\n  });\n}", "//Calculate ans Arc curve length and positionAtLength\n//Definitions taken from https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths\nimport a2c from \"./a2c\";\nimport Bezier from \"./bezier\";\n\n\nexport default function(x0, y0, rx,ry, xAxisRotate, LargeArcFlag,SweepFlag, x,y) {\n  return new Arc(x0, y0, rx,ry, xAxisRotate, LargeArcFlag,SweepFlag, x,y);\n}\n\nfunction Arc(x0, y0,rx,ry, xAxisRotate, LargeArcFlag,SweepFlag,x,y) {\n    var length = 0;\n    var partialLengths = [];\n    var curves = [];\n    var res = a2c(x0, y0,rx,ry, xAxisRotate, LargeArcFlag,SweepFlag,x,y);\n    res.forEach(function(d){\n        var curve = new Bezier(d[0], d[1], d[2], d[3], d[4], d[5], d[6], d[7]);\n        var curveLength = curve.getTotalLength();\n        length += curveLength;\n        partialLengths.push(curveLength);\n        curves.push(curve);\n    });\n    this.length = length;\n    this.partialLengths = partialLengths;\n    this.curves = curves;\n}\n\nArc.prototype = {\n  constructor: Arc,\n  init: function() {\n\n    \n  },\n\n  getTotalLength: function() {\n    return this.length;\n  },\n  getPointAtLength: function(fractionLength) {\n    \n    if(fractionLength < 0){\n      fractionLength = 0;\n    } else if(fractionLength > this.length){\n      fractionLength = this.length;\n    }\n    var i = this.partialLengths.length - 1;\n\n    while(this.partialLengths[i] >= fractionLength && this.partialLengths[i] > 0){\n      i--;\n    }\n    if(i<this.partialLengths.length-1){\n        i++;\n    }\n\n    var lengthOffset = 0;\n    for(var j=0; j<i; j++){\n        lengthOffset += this.partialLengths[j];\n    }\n\n    return this.curves[i].getPointAtLength(fractionLength - lengthOffset);\n  },\n  getTangentAtLength: function(fractionLength) {\n    if(fractionLength < 0){\n        fractionLength = 0;\n        } else if(fractionLength > this.length){\n        fractionLength = this.length;\n        }\n        var i = this.partialLengths.length - 1;\n\n        while(this.partialLengths[i] >= fractionLength && this.partialLengths[i] > 0){\n        i--;\n        }\n        if(i<this.partialLengths.length-1){\n            i++;\n        }\n\n        var lengthOffset = 0;\n        for(var j=0; j<i; j++){\n            lengthOffset += this.partialLengths[j];\n        }\n\n    return this.curves[i].getTangentAtLength(fractionLength - lengthOffset);\n  },\n  getPropertiesAtLength: function(fractionLength){\n    var tangent = this.getTangentAtLength(fractionLength);\n    var point = this.getPointAtLength(fractionLength);\n    return {x: point.x, y: point.y, tangentX: tangent.x, tangentY: tangent.y};\n  }\n};", "export default function(x0, x1, y0, y1) {\n  return new LinearPosition(x0, x1, y0, y1);\n\n}\n\nfunction LinearPosition(x0, x1, y0, y1){\n  this.x0 = x0;\n  this.x1 = x1;\n  this.y0 = y0;\n  this.y1 = y1;\n}\n\nLinearPosition.prototype.getTotalLength = function(){\n  return Math.sqrt(Math.pow(this.x0 - this.x1, 2) +\n         Math.pow(this.y0 - this.y1, 2));\n};\n\nLinearPosition.prototype.getPointAtLength = function(pos){\n  var fraction = pos/ (Math.sqrt(Math.pow(this.x0 - this.x1, 2) +\n         Math.pow(this.y0 - this.y1, 2)));\n\n  var newDeltaX = (this.x1 - this.x0)*fraction;\n  var newDeltaY = (this.y1 - this.y0)*fraction;\n  return { x: this.x0 + newDeltaX, y: this.y0 + newDeltaY };\n};\nLinearPosition.prototype.getTangentAtLength = function(){\n  var module = Math.sqrt((this.x1 - this.x0) * (this.x1 - this.x0) +\n              (this.y1 - this.y0) * (this.y1 - this.y0));\n  return { x: (this.x1 - this.x0)/module, y: (this.y1 - this.y0)/module };\n};\nLinearPosition.prototype.getPropertiesAtLength = function(pos){\n  var point = this.getPointAtLength(pos);\n  var tangent = this.getTangentAtLength();\n  return {x: point.x, y: point.y, tangentX: tangent.x, tangentY: tangent.y};\n};\n", "import parse from \"./parse\";\nimport Bezier from \"./bezier\";\nimport Arc from \"./arc\";\nimport LinearPosition from \"./linear\";\n\nexport default function(svgString) {\n  var length = 0;\n  var partial_lengths = [];\n  var functions = [];\n\n  function svgProperties(string){\n    if(!string){return null;}\n    var parsed = parse(string);\n    var cur = [0, 0];\n    var prev_point = [0, 0];\n    var curve;\n    var ringStart;\n    for (var i = 0; i < parsed.length; i++){\n      //moveTo\n      if(parsed[i][0] === \"M\"){\n        cur = [parsed[i][1], parsed[i][2]];\n        ringStart = [cur[0], cur[1]];\n        functions.push(null);\n      } else if(parsed[i][0] === \"m\"){\n        cur = [parsed[i][1] + cur[0], parsed[i][2] + cur[1]];\n        ringStart = [cur[0], cur[1]];\n        functions.push(null);\n      }\n      //lineTo\n      else if(parsed[i][0] === \"L\"){\n        length = length + Math.sqrt(Math.pow(cur[0] - parsed[i][1], 2) + Math.pow(cur[1] - parsed[i][2], 2));\n        functions.push(new LinearPosition(cur[0], parsed[i][1], cur[1], parsed[i][2]));\n        cur = [parsed[i][1], parsed[i][2]];\n      } else if(parsed[i][0] === \"l\"){\n        length = length + Math.sqrt(Math.pow(parsed[i][1], 2) + Math.pow(parsed[i][2], 2));\n        functions.push(new LinearPosition(cur[0], parsed[i][1] + cur[0], cur[1], parsed[i][2] + cur[1]));\n        cur = [parsed[i][1] + cur[0], parsed[i][2] + cur[1]];\n      } else if(parsed[i][0] === \"H\"){\n        length = length + Math.abs(cur[0] - parsed[i][1]);\n        functions.push(new LinearPosition(cur[0], parsed[i][1], cur[1], cur[1]));\n        cur[0] = parsed[i][1];\n      } else if(parsed[i][0] === \"h\"){\n        length = length + Math.abs(parsed[i][1]);\n        functions.push(new LinearPosition(cur[0], cur[0] + parsed[i][1], cur[1], cur[1]));\n        cur[0] = parsed[i][1] + cur[0];\n      } else if(parsed[i][0] === \"V\"){\n        length = length + Math.abs(cur[1] - parsed[i][1]);\n        functions.push(new LinearPosition(cur[0], cur[0], cur[1], parsed[i][1]));\n        cur[1] = parsed[i][1];\n      } else if(parsed[i][0] === \"v\"){\n        length = length + Math.abs(parsed[i][1]);\n        functions.push(new LinearPosition(cur[0], cur[0], cur[1], cur[1] + parsed[i][1]));\n        cur[1] = parsed[i][1] + cur[1];\n      //Close path\n      }  else if(parsed[i][0] === \"z\" || parsed[i][0] === \"Z\"){\n        length = length + Math.sqrt(Math.pow(ringStart[0] - cur[0], 2) + Math.pow(ringStart[1] - cur[1], 2));\n        functions.push(new LinearPosition(cur[0], ringStart[0], cur[1], ringStart[1]));\n        cur = [ringStart[0], ringStart[1]];\n      }\n      //Cubic Bezier curves\n      else if(parsed[i][0] === \"C\"){\n        curve = new Bezier(cur[0], cur[1] , parsed[i][1], parsed[i][2] , parsed[i][3], parsed[i][4] , parsed[i][5], parsed[i][6]);\n        length = length + curve.getTotalLength();\n        cur = [parsed[i][5], parsed[i][6]];\n        functions.push(curve);\n      } else if(parsed[i][0] === \"c\"){\n        curve = new Bezier(cur[0], cur[1] , cur[0] + parsed[i][1], cur[1] + parsed[i][2] , cur[0] + parsed[i][3], cur[1] + parsed[i][4] , cur[0] + parsed[i][5], cur[1] + parsed[i][6]);\n        length = length + curve.getTotalLength();\n        cur = [parsed[i][5] + cur[0], parsed[i][6] + cur[1]];\n        functions.push(curve);\n      } else if(parsed[i][0] === \"S\"){\n        if(i>0 && [\"C\",\"c\",\"S\",\"s\"].indexOf(parsed[i-1][0]) > -1){\n          curve = new Bezier(cur[0], cur[1] , 2*cur[0] - parsed[i-1][parsed[i-1].length - 4], 2*cur[1] - parsed[i-1][parsed[i-1].length - 3], parsed[i][1], parsed[i][2] , parsed[i][3], parsed[i][4]);\n        } else {\n          curve = new Bezier(cur[0], cur[1] , cur[0], cur[1], parsed[i][1], parsed[i][2] , parsed[i][3], parsed[i][4]);\n        }\n        length = length + curve.getTotalLength();\n        cur = [parsed[i][3], parsed[i][4]];\n        functions.push(curve);\n      }  else if(parsed[i][0] === \"s\"){ //240 225\n        if(i>0 && [\"C\",\"c\",\"S\",\"s\"].indexOf(parsed[i-1][0]) > -1){\n          curve = new Bezier(cur[0], cur[1] , cur[0] + curve.d.x - curve.c.x, cur[1] + curve.d.y - curve.c.y, cur[0] + parsed[i][1], cur[1] + parsed[i][2] , cur[0] + parsed[i][3], cur[1] + parsed[i][4]);\n        } else {\n          curve = new Bezier(cur[0], cur[1] , cur[0], cur[1], cur[0] + parsed[i][1], cur[1] + parsed[i][2] , cur[0] + parsed[i][3], cur[1] + parsed[i][4]);\n        }\n        length = length + curve.getTotalLength();\n        cur = [parsed[i][3] + cur[0], parsed[i][4] + cur[1]];\n        functions.push(curve);\n      }\n      //Quadratic Bezier curves\n      else if(parsed[i][0] === \"Q\"){\n        if(cur[0] != parsed[i][1] && cur[1] != parsed[i][2]){\n          curve = new Bezier(cur[0], cur[1] , parsed[i][1], parsed[i][2] , parsed[i][3], parsed[i][4]);\n        } else {\n          curve = new LinearPosition(parsed[i][1], parsed[i][3], parsed[i][2], parsed[i][4]);\n        }\n        length = length + curve.getTotalLength();\n        functions.push(curve);\n        cur = [parsed[i][3], parsed[i][4]];\n        prev_point = [parsed[i][1], parsed[i][2]];\n\n      }  else if(parsed[i][0] === \"q\"){\n        if(!(parsed[i][1] == 0 && parsed[i][2] == 0)){\n          curve = new Bezier(cur[0], cur[1] , cur[0] + parsed[i][1], cur[1] + parsed[i][2] , cur[0] + parsed[i][3], cur[1] + parsed[i][4]);\n        } else {\n          curve = new LinearPosition(cur[0] + parsed[i][1], cur[0] + parsed[i][3], cur[1] + parsed[i][2], cur[1] + parsed[i][4]);\n        }\n        length = length + curve.getTotalLength();\n        prev_point = [cur[0] + parsed[i][1], cur[1] + parsed[i][2]];\n        cur = [parsed[i][3] + cur[0], parsed[i][4] + cur[1]];\n        functions.push(curve);\n      } else if(parsed[i][0] === \"T\"){\n        if(i>0 && [\"Q\",\"q\",\"T\",\"t\"].indexOf(parsed[i-1][0]) > -1){\n          curve = new Bezier(cur[0], cur[1] , 2 * cur[0] - prev_point[0] , 2 * cur[1] - prev_point[1] , parsed[i][1], parsed[i][2]);\n        } else {\n          curve = new LinearPosition(cur[0], parsed[i][1], cur[1], parsed[i][2]);\n        }\n        functions.push(curve);\n        length = length + curve.getTotalLength();\n        prev_point = [2 * cur[0] - prev_point[0] , 2 * cur[1] - prev_point[1]];\n        cur = [parsed[i][1], parsed[i][2]];\n\n      } else if(parsed[i][0] === \"t\"){\n        if(i>0 && [\"Q\",\"q\",\"T\",\"t\"].indexOf(parsed[i-1][0]) > -1){\n          curve = new Bezier(cur[0], cur[1] , 2 * cur[0] - prev_point[0] , 2 * cur[1] - prev_point[1] , cur[0] + parsed[i][1], cur[1] + parsed[i][2]);\n        } else {\n          curve = new LinearPosition(cur[0], cur[0] + parsed[i][1], cur[1], cur[1] + parsed[i][2]);\n        }\n        length = length + curve.getTotalLength();\n        prev_point = [2 * cur[0] - prev_point[0] , 2 * cur[1] - prev_point[1]];\n        cur = [parsed[i][1] + cur[0], parsed[i][2] + cur[0]];\n        functions.push(curve);\n      } else if(parsed[i][0] === \"A\"){\n        curve = new Arc(cur[0], cur[1], parsed[i][1], parsed[i][2], parsed[i][3], parsed[i][4], parsed[i][5], parsed[i][6], parsed[i][7]);\n\n        length = length + curve.getTotalLength();\n        cur = [parsed[i][6], parsed[i][7]];\n        functions.push(curve);\n      } else if(parsed[i][0] === \"a\"){\n        curve = new Arc(cur[0], cur[1], parsed[i][1], parsed[i][2], parsed[i][3], parsed[i][4], parsed[i][5], cur[0] + parsed[i][6], cur[1] + parsed[i][7]);\n\n        length = length + curve.getTotalLength();\n        cur = [cur[0] + parsed[i][6], cur[1] + parsed[i][7]];\n        functions.push(curve);\n      }\n      partial_lengths.push(length);\n\n    }\n    return svgProperties;\n  }\n\n svgProperties.getTotalLength = function(){\n    return length;\n  };\n\n  svgProperties.getPointAtLength = function(fractionLength){\n    var fractionPart = getPartAtLength(fractionLength);\n    return functions[fractionPart.i].getPointAtLength(fractionPart.fraction);\n  };\n\n  svgProperties.getTangentAtLength = function(fractionLength){\n    var fractionPart = getPartAtLength(fractionLength);\n    return functions[fractionPart.i].getTangentAtLength(fractionPart.fraction);\n  };\n\n  svgProperties.getPropertiesAtLength = function(fractionLength){\n    var fractionPart = getPartAtLength(fractionLength);\n    return functions[fractionPart.i].getPropertiesAtLength(fractionPart.fraction);\n  };\n\n  var getPartAtLength = function(fractionLength){\n    if(fractionLength < 0){\n      fractionLength = 0;\n    } else if(fractionLength > length){\n      fractionLength = length;\n    }\n\n    var i = partial_lengths.length - 1;\n\n    while(partial_lengths[i] >= fractionLength && partial_lengths[i] > 0){\n      i--;\n    }\n    i++;\n    return {fraction: fractionLength-partial_lengths[i-1], i: i};\n  };\n\n  return svgProperties(svgString);\n}\n", "import { toPathString } from \"./svg.js\";\nimport { polygonCentroid as d3Centroid } from \"d3-polygon\";\n\nexport function distance(a, b) {\n  return Math.sqrt((a[0] - b[0]) * (a[0] - b[0]) + (a[1] - b[1]) * (a[1] - b[1]));\n}\n\nexport function pointAlong(a, b, pct) {\n  return [a[0] + (b[0] - a[0]) * pct, a[1] + (b[1] - a[1]) * pct];\n}\n\nexport function samePoint(a, b) {\n  return distance(a, b) < 1e-9;\n}\n\nexport function interpolatePoints(a, b, string) {\n  let interpolators = a.map((d, i) => interpolatePoint(d, b[i]));\n\n  return function(t) {\n    let values = interpolators.map(fn => fn(t));\n    return string ? toPathString(values) : values;\n  };\n}\n\nexport function interpolatePoint(a, b) {\n  return function(t) {\n    return a.map((d, i) => d + t * (b[i] - d));\n  };\n}\n\nexport function isFiniteNumber(number) {\n  return typeof number === \"number\" && isFinite(number);\n}\n\n// Use plain mean if it's a degenerate polygon (colinear points or single point)\nexport function polygonCentroid(polygon) {\n  return nonZeroArea(polygon) ? d3Centroid(polygon) : [\n    (polygon[0][0] + polygon[polygon.length - 1][0]) / 2,\n    (polygon[0][1] + polygon[polygon.length - 1][1]) / 2\n  ];\n}\n\nfunction nonZeroArea(polygon) {\n\n  for (let i = 0; i < polygon.length - 2; i++) {\n\n    let a = polygon[i],\n        b = polygon[i + 1],\n        c = polygon[i + 2];\n\n    if (a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) {\n      return true;\n    }\n\n  }\n\n  return false;\n\n}\n", "export const INVALID_INPUT = `All shapes must be supplied as arrays of [x, y] points or an SVG path string (https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/d).\nExample valid ways of supplying a shape would be:\n[[0, 0], [10, 0], [10, 10]]\n\"M0,0 L10,0 L10,10Z\"\n`;\n\nexport const INVALID_INPUT_ALL = `flubber.all() expects two arrays of equal length as arguments. Each element in both arrays should be an array of [x, y] points or an SVG path string (https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/d).`;\n\nexport const INVALID_PATH_STRING = `Invalid SVG path string supplied.\nPath string reference: https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/d\n`;\n", "import { polygonLength } from \"d3-polygon\";\nimport { distance, pointAlong } from \"./math.js\";\n\nexport function addPoints(ring, numPoints) {\n  const desiredLength = ring.length + numPoints,\n    step = polygonLength(ring) / numPoints;\n\n  let i = 0,\n    cursor = 0,\n    insertAt = step / 2;\n\n  while (ring.length < desiredLength) {\n    let a = ring[i],\n      b = ring[(i + 1) % ring.length],\n      segment = distance(a, b);\n\n    if (insertAt <= cursor + segment) {\n      ring.splice(i + 1, 0, segment ? pointAlong(a, b, (insertAt - cursor) / segment) : a.slice(0));\n      insertAt += step;\n      continue;\n    }\n\n    cursor += segment;\n    i++;\n  }\n}\n\nexport function bisect(ring, maxSegmentLength = Infinity) {\n  for (let i = 0; i < ring.length; i++) {\n    let a = ring[i],\n      b = i === ring.length - 1 ? ring[0] : ring[i + 1];\n\n    // Could splice the whole set for a segment instead, but a bit messy\n    while (distance(a, b) > maxSegmentLength) {\n      b = pointAlong(a, b, 0.5);\n      ring.splice(i + 1, 0, b);\n    }\n  }\n}\n", "import { polygonArea } from \"d3-polygon\";\nimport { pathStringToRing } from \"./svg.js\";\nimport { samePoint, isFiniteNumber } from \"./math.js\";\nimport { bisect } from \"./add.js\";\nimport { INVALID_INPUT } from \"./errors.js\";\n\nexport default function normalizeRing(ring, maxSegmentLength) {\n  let points, area, skipBisect;\n\n  if (typeof ring === \"string\") {\n    let converted = pathStringToRing(ring, maxSegmentLength);\n    ring = converted.ring;\n    skipBisect = converted.skipBisect;\n  } else if (!Array.isArray(ring)) {\n    throw new TypeError(INVALID_INPUT);\n  }\n\n  points = ring.slice(0);\n\n  if (!validRing(points)) {\n    throw new TypeError(INVALID_INPUT);\n  }\n\n  // TODO skip this test to avoid scale issues?\n  // Chosen epsilon (1e-6) is problematic for small coordinate range\n  if (points.length > 1 && samePoint(points[0], points[points.length - 1])) {\n    points.pop();\n  }\n\n  area = polygonArea(points);\n\n  // Make all rings clockwise\n  if (area > 0) {\n    points.reverse();\n  }\n\n  if (\n    !skipBisect &&\n    maxSegmentLength &&\n    isFiniteNumber(maxSegmentLength) &&\n    maxSegmentLength > 0\n  ) {\n    bisect(points, maxSegmentLength);\n  }\n\n  return points;\n}\n\nfunction validRing(ring) {\n  return ring.every(function(point) {\n    return (\n      Array.isArray(point) &&\n      point.length >= 2 &&\n      isFiniteNumber(point[0]) &&\n      isFiniteNumber(point[1])\n    );\n  });\n}\n", "import { distance } from \"./math.js\";\n\nexport default function(ring, vs) {\n  let len = ring.length,\n      min = Infinity,\n      bestOffset,\n      sumOfSquares,\n      spliced;\n\n  for (let offset = 0; offset < len; offset++) {\n    sumOfSquares = 0;\n\n    vs.forEach(function(p, i){\n      let d = distance(ring[(offset + i) % len], p);\n      sumOfSquares += d * d;\n    });\n\n    if (sumOfSquares < min) {\n      min = sumOfSquares;\n      bestOffset = offset;\n    }\n  }\n\n  if (bestOffset) {\n    spliced = ring.splice(0, bestOffset);\n    ring.splice(ring.length, 0, ...spliced);\n  }\n}\n", "import normalizeRing from \"./normalize.js\";\nimport { addPoints } from \"./add.js\";\nimport rotate from \"./rotate.js\";\nimport { interpolatePoints } from \"./math.js\";\n\nexport default function(fromShape, toShape, { maxSegmentLength = 10, string = true } = {}) {\n  let fromRing = normalizeRing(fromShape, maxSegmentLength),\n    toRing = normalizeRing(toShape, maxSegmentLength),\n    interpolator = interpolateRing(fromRing, toRing, string);\n\n  // Extra optimization for near either end with path strings\n  if (!string || (typeof fromShape !== \"string\" && typeof toShape !== \"string\")) {\n    return interpolator;\n  }\n\n  return t => {\n    if (t < 1e-4 && typeof fromShape === \"string\") {\n      return fromShape;\n    }\n    if (1 - t < 1e-4 && typeof toShape === \"string\") {\n      return toShape;\n    }\n    return interpolator(t);\n  };\n}\n\nexport function interpolateRing(fromRing, toRing, string) {\n  let diff;\n\n  diff = fromRing.length - toRing.length;\n\n  // TODO bisect and add points in one step?\n  addPoints(fromRing, diff < 0 ? diff * -1 : 0);\n  addPoints(toRing, diff > 0 ? diff : 0);\n\n  rotate(fromRing, toRing);\n\n  return interpolatePoints(fromRing, toRing, string);\n}\n", "import earcut from \"earcut\";\nimport { createTopology, collapseTopology } from \"./topology.js\";\n\nexport default function(ring, numPieces) {\n  return collapseTopology(createTopology(cut(ring), ring), numPieces);\n}\n\nexport function cut(ring) {\n  let cuts = earcut(ring.reduce((arr, point) => [...arr, point[0], point[1]], [])),\n    triangles = [];\n\n  for (let i = 0, l = cuts.length; i < l; i += 3) {\n    // Save each triangle as segments [a, b], [b, c], [c, a]\n    triangles.push([[cuts[i], cuts[i + 1]], [cuts[i + 1], cuts[i + 2]], [cuts[i + 2], cuts[i]]]);\n  }\n\n  return triangles;\n}\n", "export default function(x) {\n  return x;\n}\n", "import identity from \"./identity.js\";\n\nexport default function(transform) {\n  if (transform == null) return identity;\n  var x0,\n      y0,\n      kx = transform.scale[0],\n      ky = transform.scale[1],\n      dx = transform.translate[0],\n      dy = transform.translate[1];\n  return function(input, i) {\n    if (!i) x0 = y0 = 0;\n    var j = 2, n = input.length, output = new Array(n);\n    output[0] = (x0 += input[0]) * kx + dx;\n    output[1] = (y0 += input[1]) * ky + dy;\n    while (j < n) output[j] = input[j], ++j;\n    return output;\n  };\n}\n", "export default function(array, n) {\n  var t, j = array.length, i = j - n;\n  while (i < --j) t = array[i], array[i++] = array[j], array[j] = t;\n}\n", "import reverse from \"./reverse.js\";\nimport transform from \"./transform.js\";\n\nexport default function(topology, o) {\n  if (typeof o === \"string\") o = topology.objects[o];\n  return o.type === \"GeometryCollection\"\n      ? {type: \"FeatureCollection\", features: o.geometries.map(function(o) { return feature(topology, o); })}\n      : feature(topology, o);\n}\n\nfunction feature(topology, o) {\n  var id = o.id,\n      bbox = o.bbox,\n      properties = o.properties == null ? {} : o.properties,\n      geometry = object(topology, o);\n  return id == null && bbox == null ? {type: \"Feature\", properties: properties, geometry: geometry}\n      : bbox == null ? {type: \"Feature\", id: id, properties: properties, geometry: geometry}\n      : {type: \"Feature\", id: id, bbox: bbox, properties: properties, geometry: geometry};\n}\n\nexport function object(topology, o) {\n  var transformPoint = transform(topology.transform),\n      arcs = topology.arcs;\n\n  function arc(i, points) {\n    if (points.length) points.pop();\n    for (var a = arcs[i < 0 ? ~i : i], k = 0, n = a.length; k < n; ++k) {\n      points.push(transformPoint(a[k], k));\n    }\n    if (i < 0) reverse(points, n);\n  }\n\n  function point(p) {\n    return transformPoint(p);\n  }\n\n  function line(arcs) {\n    var points = [];\n    for (var i = 0, n = arcs.length; i < n; ++i) arc(arcs[i], points);\n    if (points.length < 2) points.push(points[0]); // This should never happen per the specification.\n    return points;\n  }\n\n  function ring(arcs) {\n    var points = line(arcs);\n    while (points.length < 4) points.push(points[0]); // This may happen if an arc has only two points.\n    return points;\n  }\n\n  function polygon(arcs) {\n    return arcs.map(ring);\n  }\n\n  function geometry(o) {\n    var type = o.type, coordinates;\n    switch (type) {\n      case \"GeometryCollection\": return {type: type, geometries: o.geometries.map(geometry)};\n      case \"Point\": coordinates = point(o.coordinates); break;\n      case \"MultiPoint\": coordinates = o.coordinates.map(point); break;\n      case \"LineString\": coordinates = line(o.arcs); break;\n      case \"MultiLineString\": coordinates = o.arcs.map(line); break;\n      case \"Polygon\": coordinates = polygon(o.arcs); break;\n      case \"MultiPolygon\": coordinates = o.arcs.map(polygon); break;\n      default: return null;\n    }\n    return {type: type, coordinates: coordinates};\n  }\n\n  return geometry(o);\n}\n", "export default function(topology, arcs) {\n  var stitchedArcs = {},\n      fragmentByStart = {},\n      fragmentByEnd = {},\n      fragments = [],\n      emptyIndex = -1;\n\n  // Stitch empty arcs first, since they may be subsumed by other arcs.\n  arcs.forEach(function(i, j) {\n    var arc = topology.arcs[i < 0 ? ~i : i], t;\n    if (arc.length < 3 && !arc[1][0] && !arc[1][1]) {\n      t = arcs[++emptyIndex], arcs[emptyIndex] = i, arcs[j] = t;\n    }\n  });\n\n  arcs.forEach(function(i) {\n    var e = ends(i),\n        start = e[0],\n        end = e[1],\n        f, g;\n\n    if (f = fragmentByEnd[start]) {\n      delete fragmentByEnd[f.end];\n      f.push(i);\n      f.end = end;\n      if (g = fragmentByStart[end]) {\n        delete fragmentByStart[g.start];\n        var fg = g === f ? f : f.concat(g);\n        fragmentByStart[fg.start = f.start] = fragmentByEnd[fg.end = g.end] = fg;\n      } else {\n        fragmentByStart[f.start] = fragmentByEnd[f.end] = f;\n      }\n    } else if (f = fragmentByStart[end]) {\n      delete fragmentByStart[f.start];\n      f.unshift(i);\n      f.start = start;\n      if (g = fragmentByEnd[start]) {\n        delete fragmentByEnd[g.end];\n        var gf = g === f ? f : g.concat(f);\n        fragmentByStart[gf.start = g.start] = fragmentByEnd[gf.end = f.end] = gf;\n      } else {\n        fragmentByStart[f.start] = fragmentByEnd[f.end] = f;\n      }\n    } else {\n      f = [i];\n      fragmentByStart[f.start = start] = fragmentByEnd[f.end = end] = f;\n    }\n  });\n\n  function ends(i) {\n    var arc = topology.arcs[i < 0 ? ~i : i], p0 = arc[0], p1;\n    if (topology.transform) p1 = [0, 0], arc.forEach(function(dp) { p1[0] += dp[0], p1[1] += dp[1]; });\n    else p1 = arc[arc.length - 1];\n    return i < 0 ? [p1, p0] : [p0, p1];\n  }\n\n  function flush(fragmentByEnd, fragmentByStart) {\n    for (var k in fragmentByEnd) {\n      var f = fragmentByEnd[k];\n      delete fragmentByStart[f.start];\n      delete f.start;\n      delete f.end;\n      f.forEach(function(i) { stitchedArcs[i < 0 ? ~i : i] = 1; });\n      fragments.push(f);\n    }\n  }\n\n  flush(fragmentByEnd, fragmentByStart);\n  flush(fragmentByStart, fragmentByEnd);\n  arcs.forEach(function(i) { if (!stitchedArcs[i < 0 ? ~i : i]) fragments.push([i]); });\n\n  return fragments;\n}\n", "import {object} from \"./feature.js\";\nimport stitch from \"./stitch.js\";\n\nfunction planarRingArea(ring) {\n  var i = -1, n = ring.length, a, b = ring[n - 1], area = 0;\n  while (++i < n) a = b, b = ring[i], area += a[0] * b[1] - a[1] * b[0];\n  return Math.abs(area); // Note: doubled area!\n}\n\nexport default function(topology) {\n  return object(topology, mergeArcs.apply(this, arguments));\n}\n\nexport function mergeArcs(topology, objects) {\n  var polygonsByArc = {},\n      polygons = [],\n      groups = [];\n\n  objects.forEach(geometry);\n\n  function geometry(o) {\n    switch (o.type) {\n      case \"GeometryCollection\": o.geometries.forEach(geometry); break;\n      case \"Polygon\": extract(o.arcs); break;\n      case \"MultiPolygon\": o.arcs.forEach(extract); break;\n    }\n  }\n\n  function extract(polygon) {\n    polygon.forEach(function(ring) {\n      ring.forEach(function(arc) {\n        (polygonsByArc[arc = arc < 0 ? ~arc : arc] || (polygonsByArc[arc] = [])).push(polygon);\n      });\n    });\n    polygons.push(polygon);\n  }\n\n  function area(ring) {\n    return planarRingArea(object(topology, {type: \"Polygon\", arcs: [ring]}).coordinates[0]);\n  }\n\n  polygons.forEach(function(polygon) {\n    if (!polygon._) {\n      var group = [],\n          neighbors = [polygon];\n      polygon._ = 1;\n      groups.push(group);\n      while (polygon = neighbors.pop()) {\n        group.push(polygon);\n        polygon.forEach(function(ring) {\n          ring.forEach(function(arc) {\n            polygonsByArc[arc < 0 ? ~arc : arc].forEach(function(polygon) {\n              if (!polygon._) {\n                polygon._ = 1;\n                neighbors.push(polygon);\n              }\n            });\n          });\n        });\n      }\n    }\n  });\n\n  polygons.forEach(function(polygon) {\n    delete polygon._;\n  });\n\n  return {\n    type: \"MultiPolygon\",\n    arcs: groups.map(function(polygons) {\n      var arcs = [], n;\n\n      // Extract the exterior (unique) arcs.\n      polygons.forEach(function(polygon) {\n        polygon.forEach(function(ring) {\n          ring.forEach(function(arc) {\n            if (polygonsByArc[arc < 0 ? ~arc : arc].length < 2) {\n              arcs.push(arc);\n            }\n          });\n        });\n      });\n\n      // Stitch the arcs into one or more rings.\n      arcs = stitch(topology, arcs);\n\n      // If more than one ring is returned,\n      // at most one of these rings can be the exterior;\n      // choose the one with the greatest absolute area.\n      if ((n = arcs.length) > 1) {\n        for (var i = 1, k = area(arcs[0]), ki, t; i < n; ++i) {\n          if ((ki = area(arcs[i])) > k) {\n            t = arcs[0], arcs[0] = arcs[i], arcs[i] = t, k = ki;\n          }\n        }\n      }\n\n      return arcs;\n    }).filter(function(arcs) {\n      return arcs.length > 0;\n    })\n  };\n}\n", "export default function(a, x) {\n  var lo = 0, hi = a.length;\n  while (lo < hi) {\n    var mid = lo + hi >>> 1;\n    if (a[mid] < x) lo = mid + 1;\n    else hi = mid;\n  }\n  return lo;\n}\n", "import bisect from \"./bisect.js\";\n\nexport default function(objects) {\n  var indexesByArc = {}, // arc index -> array of object indexes\n      neighbors = objects.map(function() { return []; });\n\n  function line(arcs, i) {\n    arcs.forEach(function(a) {\n      if (a < 0) a = ~a;\n      var o = indexesByArc[a];\n      if (o) o.push(i);\n      else indexesByArc[a] = [i];\n    });\n  }\n\n  function polygon(arcs, i) {\n    arcs.forEach(function(arc) { line(arc, i); });\n  }\n\n  function geometry(o, i) {\n    if (o.type === \"GeometryCollection\") o.geometries.forEach(function(o) { geometry(o, i); });\n    else if (o.type in geometryType) geometryType[o.type](o.arcs, i);\n  }\n\n  var geometryType = {\n    LineString: line,\n    MultiLineString: polygon,\n    Polygon: polygon,\n    MultiPolygon: function(arcs, i) { arcs.forEach(function(arc) { polygon(arc, i); }); }\n  };\n\n  objects.forEach(geometry);\n\n  for (var i in indexesByArc) {\n    for (var indexes = indexesByArc[i], m = indexes.length, j = 0; j < m; ++j) {\n      for (var k = j + 1; k < m; ++k) {\n        var ij = indexes[j], ik = indexes[k], n;\n        if ((n = neighbors[ij])[i = bisect(n, ik)] !== ik) n.splice(i, 0, ik);\n        if ((n = neighbors[ik])[i = bisect(n, ij)] !== ij) n.splice(i, 0, ij);\n      }\n    }\n  }\n\n  return neighbors;\n}\n", "export default function(a, b) {\n  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n}\n", "import ascending from \"./ascending\";\n\nexport default function(compare) {\n  if (compare.length === 1) compare = ascendingComparator(compare);\n  return {\n    left: function(a, x, lo, hi) {\n      if (lo == null) lo = 0;\n      if (hi == null) hi = a.length;\n      while (lo < hi) {\n        var mid = lo + hi >>> 1;\n        if (compare(a[mid], x) < 0) lo = mid + 1;\n        else hi = mid;\n      }\n      return lo;\n    },\n    right: function(a, x, lo, hi) {\n      if (lo == null) lo = 0;\n      if (hi == null) hi = a.length;\n      while (lo < hi) {\n        var mid = lo + hi >>> 1;\n        if (compare(a[mid], x) > 0) hi = mid;\n        else lo = mid + 1;\n      }\n      return lo;\n    }\n  };\n}\n\nfunction ascendingComparator(f) {\n  return function(d, x) {\n    return ascending(f(d), x);\n  };\n}\n", "import ascending from \"./ascending\";\nimport bisector from \"./bisector\";\n\nvar ascendingBisect = bisector(ascending);\nexport var bisectRight = ascendingBisect.right;\nexport var bisectLeft = ascendingBisect.left;\nexport default bisectRight;\n", "var array = Array.prototype;\n\nexport var slice = array.slice;\nexport var map = array.map;\n", "var e10 = Math.sqrt(50),\n    e5 = Math.sqrt(10),\n    e2 = Math.sqrt(2);\n\nexport default function(start, stop, count) {\n  var reverse,\n      i = -1,\n      n,\n      ticks,\n      step;\n\n  stop = +stop, start = +start, count = +count;\n  if (start === stop && count > 0) return [start];\n  if (reverse = stop < start) n = start, start = stop, stop = n;\n  if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];\n\n  if (step > 0) {\n    start = Math.ceil(start / step);\n    stop = Math.floor(stop / step);\n    ticks = new Array(n = Math.ceil(stop - start + 1));\n    while (++i < n) ticks[i] = (start + i) * step;\n  } else {\n    start = Math.floor(start * step);\n    stop = Math.ceil(stop * step);\n    ticks = new Array(n = Math.ceil(start - stop + 1));\n    while (++i < n) ticks[i] = (start - i) / step;\n  }\n\n  if (reverse) ticks.reverse();\n\n  return ticks;\n}\n\nexport function tickIncrement(start, stop, count) {\n  var step = (stop - start) / Math.max(0, count),\n      power = Math.floor(Math.log(step) / Math.LN10),\n      error = step / Math.pow(10, power);\n  return power >= 0\n      ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power)\n      : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);\n}\n\nexport function tickStep(start, stop, count) {\n  var step0 = Math.abs(stop - start) / Math.max(0, count),\n      step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),\n      error = step0 / step1;\n  if (error >= e10) step1 *= 10;\n  else if (error >= e5) step1 *= 5;\n  else if (error >= e2) step1 *= 2;\n  return stop < start ? -step1 : step1;\n}\n", "import { neighbors, mergeArcs, feature } from \"topojson-client\";\nimport { polygonArea } from \"d3-polygon\";\nimport { bisector } from \"d3-array\";\n\n// TODO use TopoJSON native instead?\nexport function createTopology(triangles, ring) {\n  const arcIndices = {},\n    topology = {\n      type: \"Topology\",\n      objects: {\n        triangles: {\n          type: \"GeometryCollection\",\n          geometries: []\n        }\n      },\n      arcs: []\n    };\n\n  triangles.forEach(function(triangle) {\n    const geometry = [];\n\n    triangle.forEach(function(arc, i) {\n      const slug = arc[0] < arc[1] ? arc.join(\",\") : arc[1] + \",\" + arc[0],\n        coordinates = arc.map(function(pointIndex) {\n          return ring[pointIndex];\n        });\n\n      if (slug in arcIndices) {\n        geometry.push(~arcIndices[slug]);\n      } else {\n        geometry.push((arcIndices[slug] = topology.arcs.length));\n        topology.arcs.push(coordinates);\n      }\n    });\n\n    topology.objects.triangles.geometries.push({\n      type: \"Polygon\",\n      area: Math.abs(\n        polygonArea(\n          triangle.map(function(d) {\n            return ring[d[0]];\n          })\n        )\n      ),\n      arcs: [geometry]\n    });\n  });\n\n  // Sort smallest first\n  // TODO sorted insertion?\n  topology.objects.triangles.geometries.sort((a, b) => a.area - b.area);\n\n  return topology;\n}\n\nexport function collapseTopology(topology, numPieces) {\n  const geometries = topology.objects.triangles.geometries,\n    bisect = bisector(d => d.area).left;\n\n  while (geometries.length > numPieces) {\n    mergeSmallestFeature();\n  }\n\n  if (numPieces > geometries.length) {\n    throw new RangeError(\"Can't collapse topology into \" + numPieces + \" pieces.\");\n  }\n\n  return feature(topology, topology.objects.triangles).features.map(f => {\n    f.geometry.coordinates[0].pop();\n    return f.geometry.coordinates[0];\n  });\n\n  function mergeSmallestFeature() {\n    const smallest = geometries[0],\n      neighborIndex = neighbors(geometries)[0][0],\n      neighbor = geometries[neighborIndex],\n      merged = mergeArcs(topology, [smallest, neighbor]);\n\n    // MultiPolygon -> Polygon\n    merged.area = smallest.area + neighbor.area;\n    merged.type = \"Polygon\";\n    merged.arcs = merged.arcs[0];\n\n    // Delete smallest and its chosen neighbor\n    geometries.splice(neighborIndex, 1);\n    geometries.shift();\n\n    // Add new merged shape in sorted order\n    geometries.splice(bisect(geometries, merged.area), 0, merged);\n  }\n}\n", "import { polygonCentroid, distance } from \"./math.js\";\n\n// With 8 or fewer shapes, find the best permutation\n// Skip if array is huge (9+ shapes)\nexport default function(start, end) {\n  if (start.length > 8) {\n    return start.map((d, i) => i);\n  }\n  let distances = start.map(p1 => end.map(p2 => squaredDistance(p1, p2)));\n  return bestOrder(start, end, distances);\n}\n\nexport function bestOrder(start, end, distances) {\n  let min = Infinity,\n    best = start.map((d, i) => i);\n\n  function permute(arr, order = [], sum = 0) {\n    for (let i = 0; i < arr.length; i++) {\n      let cur = arr.splice(i, 1),\n        dist = distances[cur[0]][order.length];\n      if (sum + dist < min) {\n        if (arr.length) {\n          permute(arr.slice(), order.concat(cur), sum + dist);\n        } else {\n          min = sum + dist;\n          best = order.concat(cur);\n        }\n      }\n      if (arr.length) {\n        arr.splice(i, 0, cur[0]);\n      }\n    }\n  }\n\n  permute(best);\n  return best;\n}\n\nfunction squaredDistance(p1, p2) {\n  let d = distance(polygonCentroid(p1), polygonCentroid(p2));\n  return d * d;\n}\n", "import { interpolateRing } from \"./interpolate.js\";\nimport { toPathString } from \"./svg.js\";\nimport { addPoints } from \"./add.js\";\nimport normalizeRing from \"./normalize.js\";\nimport triangulate from \"./triangulate.js\";\nimport pieceOrder from \"./order.js\";\nimport { INVALID_INPUT_ALL } from \"./errors.js\";\n\nexport function separate(\n  fromShape,\n  toShapes,\n  { maxSegmentLength = 10, string = true, single = false } = {}\n) {\n  let fromRing = normalizeRing(fromShape, maxSegmentLength);\n\n  if (fromRing.length < toShapes.length + 2) {\n    addPoints(fromRing, toShapes.length + 2 - fromRing.length);\n  }\n\n  let fromRings = triangulate(fromRing, toShapes.length),\n    toRings = toShapes.map(d => normalizeRing(d, maxSegmentLength)),\n    t0 = typeof fromShape === \"string\" && fromShape,\n    t1;\n\n  if (!single || toShapes.every(s => typeof s === \"string\")) {\n    t1 = toShapes.slice(0);\n  }\n\n  return interpolateSets(fromRings, toRings, { match: true, string, single, t0, t1 });\n}\n\nexport function combine(\n  fromShapes,\n  toShape,\n  { maxSegmentLength = 10, string = true, single = false } = {}\n) {\n  let interpolators = separate(toShape, fromShapes, { maxSegmentLength, string, single });\n  return single ? t => interpolators(1 - t) : interpolators.map(fn => t => fn(1 - t));\n}\n\nexport function interpolateAll(\n  fromShapes,\n  toShapes,\n  { maxSegmentLength = 10, string = true, single = false } = {}\n) {\n  if (\n    !Array.isArray(fromShapes) ||\n    !Array.isArray(toShapes) ||\n    fromShapes.length !== toShapes.length ||\n    !fromShapes.length\n  ) {\n    throw new TypeError(INVALID_INPUT_ALL);\n  }\n\n  let normalize = s => normalizeRing(s, maxSegmentLength),\n    fromRings = fromShapes.map(normalize),\n    toRings = toShapes.map(normalize),\n    t0,\n    t1;\n\n  if (single) {\n    if (fromShapes.every(s => typeof s === \"string\")) {\n      t0 = fromShapes.slice(0);\n    }\n    if (toShapes.every(s => typeof s === \"string\")) {\n      t1 = toShapes.slice(0);\n    }\n  } else {\n    t0 = fromShapes.slice(0);\n    t1 = toShapes.slice(0);\n  }\n\n  return interpolateSets(fromRings, toRings, { string, single, t0, t1, match: false });\n}\n\nfunction interpolateSets(fromRings, toRings, { string, single, t0, t1, match } = {}) {\n  let order = match ? pieceOrder(fromRings, toRings) : fromRings.map((d, i) => i),\n    interpolators = order.map((d, i) => interpolateRing(fromRings[d], toRings[i], string));\n\n  if (match && Array.isArray(t0)) {\n    t0 = order.map(d => t0[d]);\n  }\n\n  if (single && string) {\n    if (Array.isArray(t0)) {\n      t0 = t0.join(\" \");\n    }\n    if (Array.isArray(t1)) {\n      t1 = t1.join(\" \");\n    }\n  }\n\n  if (single) {\n    let multiInterpolator = string\n      ? t => interpolators.map(fn => fn(t)).join(\" \")\n      : t => interpolators.map(fn => fn(t));\n\n    if (string && (t0 || t1)) {\n      return t => (t < 1e-4 && t0) || (1 - t < 1e-4 && t1) || multiInterpolator(t);\n    }\n    return multiInterpolator;\n  } else if (string) {\n    t0 = Array.isArray(t0) ? t0.map(d => typeof d === \"string\" && d) : [];\n    t1 = Array.isArray(t1) ? t1.map(d => typeof d === \"string\" && d) : [];\n\n    return interpolators.map((fn, i) => {\n      if (t0[i] || t1[i]) {\n        return t => (t < 1e-4 && t0[i]) || (1 - t < 1e-4 && t1[i]) || fn(t);\n      }\n      return fn;\n    });\n  }\n\n  return interpolators;\n}\n", "import { polygonLength } from \"d3-polygon\";\nimport { polygonCentroid, interpolatePoints, distance, isFiniteNumber } from \"./math.js\";\nimport normalizeRing from \"./normalize.js\";\nimport { addPoints } from \"./add.js\";\nimport { toPathString } from \"./svg.js\";\n\nexport function fromCircle(x, y, radius, toShape, options) {\n  return fromShape(\n    circlePoints(x, y, radius),\n    toShape,\n    circlePath(x, y, radius),\n    2 * Math.PI * radius,\n    options\n  );\n}\n\nexport function toCircle(fromShape, x, y, radius, options) {\n  let interpolator = fromCircle(x, y, radius, fromShape, options);\n  return t => interpolator(1 - t);\n}\n\nexport function fromRect(x, y, width, height, toShape, options) {\n  return fromShape(\n    rectPoints(x, y, width, height),\n    toShape,\n    rectPath(x, y, width, height),\n    2 * width + 2 * height,\n    options\n  );\n}\n\nexport function toRect(fromShape, x, y, width, height, options) {\n  let interpolator = fromRect(x, y, width, height, fromShape, options);\n  return t => interpolator(1 - t);\n}\n\nfunction fromShape(fromFn, toShape, original, perimeter, { maxSegmentLength = 10, string = true } = {}) {\n  let toRing = normalizeRing(toShape, maxSegmentLength),\n      fromRing,\n      interpolator;\n\n  // Enforce maxSegmentLength on circle/rect perimeter too\n  if (isFiniteNumber(perimeter) && toRing.length < perimeter / maxSegmentLength) {\n    addPoints(toRing, Math.ceil(perimeter / maxSegmentLength - toRing.length));\n  }\n\n  fromRing = fromFn(toRing);\n  interpolator = interpolatePoints(fromRing, toRing, string);\n\n  if (string) {\n    return t => (t < 1e-4 ? original : interpolator(t));\n  }\n\n  return interpolator;\n}\n\nexport function circlePoints(x, y, radius) {\n  return function(ring) {\n    let centroid = polygonCentroid(ring),\n      perimeter = polygonLength([...ring, ring[0]]),\n      startingAngle = Math.atan2(ring[0][1] - centroid[1], ring[0][0] - centroid[0]),\n      along = 0;\n\n    return ring.map((point, i) => {\n      let angle;\n      if (i) {\n        along += distance(point, ring[i - 1]);\n      }\n      angle = startingAngle + 2 * Math.PI * (perimeter ? along / perimeter : i / ring.length);\n      return [Math.cos(angle) * radius + x, Math.sin(angle) * radius + y];\n    });\n  };\n}\n\n// TODO splice in exact corners?\nexport function rectPoints(x, y, width, height) {\n  return function(ring) {\n    let centroid = polygonCentroid(ring),\n      perimeter = polygonLength([...ring, ring[0]]),\n      startingAngle = Math.atan2(ring[0][1] - centroid[1], ring[0][0] - centroid[0]),\n      along = 0;\n\n    if (startingAngle < 0) {\n      startingAngle = 2 * Math.PI + startingAngle;\n    }\n\n    let startingProgress = startingAngle / (2 * Math.PI);\n\n    return ring.map((point, i) => {\n      if (i) {\n        along += distance(point, ring[i - 1]);\n      }\n      let relative = rectPoint(\n        (startingProgress + (perimeter ? along / perimeter : i / ring.length)) % 1\n      );\n      return [x + relative[0] * width, y + relative[1] * height];\n    });\n  };\n}\n\n// TODO don't do this\nfunction rectPoint(progress) {\n  if (progress <= 1 / 8) {\n    return [1, 0.5 + progress * 4];\n  }\n  if (progress <= 3 / 8) {\n    return [1.5 - 4 * progress, 1];\n  }\n  if (progress <= 5 / 8) {\n    return [0, 2.5 - 4 * progress];\n  }\n  if (progress <= 7 / 8) {\n    return [4 * progress - 2.5, 0];\n  }\n  return [1, 4 * progress - 3.5];\n}\n\nexport function circlePath(x, y, radius) {\n  let l = x - radius + \",\" + y,\n    r = x + radius + \",\" + y,\n    pre = \"A\" + radius + \",\" + radius + \",0,1,1,\";\n\n  return \"M\" + l + pre + r + pre + l + \"Z\";\n}\n\nexport function rectPath(x, y, width, height) {\n  let r = x + width,\n    b = y + height;\n  return \"M\" + x + \",\" + y + \"L\" + r + \",\" + y + \"L\" + r + \",\" + b + \"L\" + x + \",\" + b + \"Z\";\n}\n"],
  "mappings": ";;;;;;AAAA;AAAA;AAAA;AAGA,QAAI,cAAc,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG;AAEnF,QAAI,iBAAiB;AAAA,MACnB;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAChE;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA;AAG1D,qBAAiB,IAAI;AACnB,aAAQ,OAAO,MAAU,OAAO,MAAU,OAAO,QAAY,OAAO,QAEjE,OAAO,MAAU,OAAO,KAAU,OAAO,MAAU,OAAO,MAAU,OAAO,OAC3E,MAAM,QAAU,eAAe,QAAQ,OAAO;AAAA;AAGnD,uBAAmB,MAAM;AAEvB,cAAQ,OAAO;AAAA,aACR;AAAA,aACA;AAAA,aACA;AAAA,aACA;AAAA,aACA;AAAA,aACA;AAAA,aACA;AAAA,aACA;AAAA,aACA;AAAA,aACA;AAAA,aACA;AACH,iBAAO;AAAA;AAEX,aAAO;AAAA;AAGT,mBAAe,MAAM;AACnB,aAAQ,QAAO,QAAU;AAAA;AAG3B,qBAAiB,MAAM;AACrB,aAAQ,QAAQ,MAAM,QAAQ;AAAA;AAGhC,0BAAsB,MAAM;AAC1B,aAAQ,QAAQ,MAAM,QAAQ,MACtB,SAAS,MACT,SAAS,MACT,SAAS;AAAA;AAInB,mBAAe,MAAM;AACnB,WAAK,QAAS;AACd,WAAK,OAAS;AACd,WAAK,MAAS,KAAK;AACnB,WAAK,SAAS;AACd,WAAK,QAAS;AACd,WAAK,MAAS;AACd,WAAK,eAAe;AACpB,WAAK,OAAS;AAAA;AAGhB,wBAAoB,OAAO;AACzB,aAAO,MAAM,QAAQ,MAAM,OAAO,QAAQ,MAAM,KAAK,WAAW,MAAM,SAAS;AAC7E,cAAM;AAAA;AAAA;AAKV,sBAAkB,OAAO;AACvB,UAAI,KAAK,MAAM,KAAK,WAAW,MAAM;AAErC,UAAI,OAAO,IAAa;AACtB,cAAM,QAAQ;AACd,cAAM;AACN;AAAA;AAGF,UAAI,OAAO,IAAa;AACtB,cAAM,QAAQ;AACd,cAAM;AACN;AAAA;AAGF,YAAM,MAAM,kDAAkD,MAAM,QAAQ;AAAA;AAI9E,uBAAmB,OAAO;AACxB,UAAI,QAAQ,MAAM,OACd,QAAQ,OACR,MAAM,MAAM,KACZ,YAAY,OACZ,aAAa,OACb,aAAa,OACb,SAAS,OACT;AAEJ,UAAI,SAAS,KAAK;AAChB,cAAM,MAAM,mCAAmC,QAAQ;AACvD;AAAA;AAEF,WAAK,MAAM,KAAK,WAAW;AAE3B,UAAI,OAAO,MAAe,OAAO,IAAa;AAC5C;AACA,aAAM,QAAQ,MAAO,MAAM,KAAK,WAAW,SAAS;AAAA;AAMtD,UAAI,CAAC,QAAQ,OAAO,OAAO,IAAa;AACtC,cAAM,MAAM,0DAA0D,QAAQ;AAC9E;AAAA;AAGF,UAAI,OAAO,IAAa;AACtB,oBAAa,OAAO;AACpB;AAEA,aAAM,QAAQ,MAAO,MAAM,KAAK,WAAW,SAAS;AAEpD,YAAI,aAAa,QAAQ,KAAK;AAE5B,cAAI,MAAM,QAAQ,KAAK;AACrB,kBAAM,MAAM,wEAAwE,QAAQ;AAC5F;AAAA;AAAA;AAIJ,eAAO,QAAQ,OAAO,QAAQ,MAAM,KAAK,WAAW,SAAS;AAC3D;AACA,uBAAa;AAAA;AAEf,aAAM,QAAQ,MAAO,MAAM,KAAK,WAAW,SAAS;AAAA;AAGtD,UAAI,OAAO,IAAa;AACtB,iBAAS;AACT;AACA,eAAO,QAAQ,MAAM,KAAK,WAAW,SAAS;AAC5C;AACA,uBAAa;AAAA;AAEf,aAAM,QAAQ,MAAO,MAAM,KAAK,WAAW,SAAS;AAAA;AAGtD,UAAI,OAAO,OAAe,OAAO,IAAa;AAC5C,YAAI,UAAU,CAAC,cAAc,CAAC,YAAY;AACxC,gBAAM,MAAM,6CAA6C,QAAQ;AACjE;AAAA;AAGF;AAEA,aAAM,QAAQ,MAAO,MAAM,KAAK,WAAW,SAAS;AACpD,YAAI,OAAO,MAAe,OAAO,IAAa;AAC5C;AAAA;AAEF,YAAI,QAAQ,OAAO,QAAQ,MAAM,KAAK,WAAW,SAAS;AACxD,iBAAO,QAAQ,OAAO,QAAQ,MAAM,KAAK,WAAW,SAAS;AAC3D;AAAA;AAAA,eAEG;AACL,gBAAM,MAAM,6CAA6C,QAAQ;AACjE;AAAA;AAAA;AAIJ,YAAM,QAAQ;AACd,YAAM,QAAQ,WAAW,MAAM,KAAK,MAAM,OAAO,UAAU;AAAA;AAI7D,6BAAyB,OAAO;AAC9B,UAAI,KAAK;AAOT,YAAQ,MAAM,KAAK,MAAM;AACzB,cAAQ,IAAI;AAEZ,UAAI,SAAS,MAAM;AAEnB,UAAI,UAAU,OAAO,OAAO,SAAS,GAAG;AACtC,cAAM,OAAO,KAAK,CAAE,KAAK,OAAO,IAAI,OAAO;AAC3C,iBAAS,OAAO,MAAM;AACtB,gBAAQ;AACR,cAAO,QAAQ,MAAO,MAAM;AAAA;AAG9B,UAAI,UAAU,KAAK;AACjB,cAAM,OAAO,KAAK,CAAE,KAAM,OAAO;AAAA,aAC5B;AAEL,eAAO,OAAO,UAAU,YAAY,QAAQ;AAC1C,gBAAM,OAAO,KAAK,CAAE,KAAM,OAAO,OAAO,OAAO,GAAG,YAAY;AAC9D,cAAI,CAAC,YAAY,QAAQ;AACvB;AAAA;AAAA;AAAA;AAAA;AAOR,yBAAqB,OAAO;AAC1B,UAAI,MAAM,MAAM,KACZ,SAAS,QAAQ,aAAa,aAAa;AAE/C,YAAM,eAAe,MAAM;AAC3B,gBAAU,MAAM,KAAK,WAAW,MAAM;AACtC,eAAS,MAAM;AAEf,UAAI,CAAC,UAAU,UAAU;AACvB,cAAM,MAAM,0BAA0B,MAAM,KAAK,MAAM,SAAS,cAAc,MAAM,QAAQ;AAC5F;AAAA;AAGF,oBAAc,YAAY,MAAM,KAAK,MAAM,OAAO;AAElD,YAAM;AACN,iBAAW;AAEX,YAAM,OAAO;AAEb,UAAI,CAAC,aAAa;AAEhB,wBAAgB;AAChB;AAAA;AAGF,oBAAc;AAEd,iBAAS;AACP,aAAK,IAAI,aAAa,IAAI,GAAG,KAAK;AAChC,cAAI,UAAW,OAAM,KAAK,MAAM;AAAI,qBAAS;AAAA;AACxC,sBAAU;AAEf,cAAI,MAAM,IAAI,QAAQ;AACpB;AAAA;AAEF,gBAAM,KAAK,KAAK,MAAM;AAEtB,qBAAW;AACX,wBAAc;AAEd,cAAI,MAAM,QAAQ,OAAO,MAAM,KAAK,WAAW,MAAM,WAAW,IAAa;AAC3E,kBAAM;AACN,uBAAW;AACX,0BAAc;AAAA;AAAA;AAKlB,YAAI,aAAa;AACf;AAAA;AAGF,YAAI,MAAM,SAAS,MAAM,KAAK;AAC5B;AAAA;AAIF,YAAI,CAAC,aAAa,MAAM,KAAK,WAAW,MAAM,SAAS;AACrD;AAAA;AAAA;AAIJ,sBAAgB;AAAA;AAUlB,WAAO,UAAU,mBAAmB,SAAS;AAC3C,UAAI,QAAQ,IAAI,MAAM;AACtB,UAAI,MAAM,MAAM;AAEhB,iBAAW;AAEX,aAAO,MAAM,QAAQ,OAAO,CAAC,MAAM,IAAI,QAAQ;AAC7C,oBAAY;AAAA;AAGd,UAAI,MAAM,IAAI,QAAQ;AACpB,cAAM,SAAS;AAAA,iBAEN,MAAM,OAAO,QAAQ;AAE9B,YAAI,KAAK,QAAQ,MAAM,OAAO,GAAG,MAAM,GAAG;AACxC,gBAAM,MAAM;AACZ,gBAAM,SAAS;AAAA,eACV;AACL,gBAAM,OAAO,GAAG,KAAK;AAAA;AAAA;AAIzB,aAAO;AAAA,QACL,KAAK,MAAM;AAAA,QACX,UAAU,MAAM;AAAA;AAAA;AAAA;AAAA;;;ACpTpB;AAAA;AAAA;AAKA,sBAAiB,IAAI,IAAI;AACvB,aAAO;AAAA,QACL,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG;AAAA,QAC3B,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG;AAAA,QAC3B,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG;AAAA,QAC3B,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG;AAAA,QAC3B,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG;AAAA,QACnC,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG;AAAA;AAAA;AAKvC,sBAAkB;AAChB,UAAI,CAAE,iBAAgB,SAAS;AAAE,eAAO,IAAI;AAAA;AAC5C,WAAK,QAAQ;AACb,WAAK,QAAQ;AAAA;AAIf,WAAO,UAAU,SAAS,SAAU,GAAG;AACrC,UAAI,EAAE,OAAO,KAAK,EAAE,OAAO,KAAK,EAAE,OAAO,KAAK,EAAE,OAAO,KAAK,EAAE,OAAO,KAAK,EAAE,OAAO,GAAG;AACpF,eAAO;AAAA;AAET,WAAK,QAAQ;AACb,WAAK,MAAM,KAAK;AAChB,aAAO;AAAA;AAIT,WAAO,UAAU,YAAY,SAAU,IAAI,IAAI;AAC7C,UAAI,OAAO,KAAK,OAAO,GAAG;AACxB,aAAK,QAAQ;AACb,aAAK,MAAM,KAAK,CAAE,GAAG,GAAG,GAAG,GAAG,IAAI;AAAA;AAEpC,aAAO;AAAA;AAIT,WAAO,UAAU,QAAQ,SAAU,IAAI,IAAI;AACzC,UAAI,OAAO,KAAK,OAAO,GAAG;AACxB,aAAK,QAAQ;AACb,aAAK,MAAM,KAAK,CAAE,IAAI,GAAG,GAAG,IAAI,GAAG;AAAA;AAErC,aAAO;AAAA;AAIT,WAAO,UAAU,SAAS,SAAU,OAAO,IAAI,IAAI;AACjD,UAAI,KAAK,KAAK;AAEd,UAAI,UAAU,GAAG;AACf,aAAK,UAAU,IAAI;AAEnB,cAAM,QAAQ,KAAK,KAAK;AACxB,cAAM,KAAK,IAAI;AACf,cAAM,KAAK,IAAI;AAEf,aAAK,MAAM,KAAK,CAAE,KAAK,KAAK,CAAC,KAAK,KAAK,GAAG;AAC1C,aAAK,QAAQ;AAEb,aAAK,UAAU,CAAC,IAAI,CAAC;AAAA;AAEvB,aAAO;AAAA;AAIT,WAAO,UAAU,QAAQ,SAAU,OAAO;AACxC,UAAI,UAAU,GAAG;AACf,aAAK,QAAQ;AACb,aAAK,MAAM,KAAK,CAAE,GAAG,GAAG,KAAK,IAAI,QAAQ,KAAK,KAAK,MAAM,GAAG,GAAG;AAAA;AAEjE,aAAO;AAAA;AAIT,WAAO,UAAU,QAAQ,SAAU,OAAO;AACxC,UAAI,UAAU,GAAG;AACf,aAAK,QAAQ;AACb,aAAK,MAAM,KAAK,CAAE,GAAG,KAAK,IAAI,QAAQ,KAAK,KAAK,MAAM,GAAG,GAAG,GAAG;AAAA;AAEjE,aAAO;AAAA;AAMT,WAAO,UAAU,UAAU,WAAY;AACrC,UAAI,KAAK,OAAO;AACd,eAAO,KAAK;AAAA;AAGd,UAAI,CAAC,KAAK,MAAM,QAAQ;AACtB,aAAK,QAAQ,CAAE,GAAG,GAAG,GAAG,GAAG,GAAG;AAC9B,eAAO,KAAK;AAAA;AAGd,WAAK,QAAQ,KAAK,MAAM;AAExB,UAAI,KAAK,MAAM,WAAW,GAAG;AAC3B,eAAO,KAAK;AAAA;AAGd,eAAS,IAAI,GAAG,IAAI,KAAK,MAAM,QAAQ,KAAK;AAC1C,aAAK,QAAQ,SAAQ,KAAK,OAAO,KAAK,MAAM;AAAA;AAG9C,aAAO,KAAK;AAAA;AAOd,WAAO,UAAU,OAAO,SAAU,GAAG,GAAG,YAAY;AAClD,UAAI;AAGJ,UAAI,CAAC,KAAK,MAAM,QAAQ;AAAE,eAAO,CAAE,GAAG;AAAA;AAOtC,UAAI,CAAC,KAAK,OAAO;AACf,aAAK,QAAQ,KAAK;AAAA;AAGpB,UAAI,KAAK;AAGT,aAAO;AAAA,QACL,IAAI,EAAE,KAAK,IAAI,EAAE,KAAM,cAAa,IAAI,EAAE;AAAA,QAC1C,IAAI,EAAE,KAAK,IAAI,EAAE,KAAM,cAAa,IAAI,EAAE;AAAA;AAAA;AAK9C,WAAO,UAAU;AAAA;AAAA;;;AC/IjB;AAAA;AAAA;AAGA,QAAI,SAAS;AAEb,QAAI,aAAa;AAAA,MACf,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,WAAW;AAAA,MACX,OAAO;AAAA,MACP,OAAO;AAAA;AAGT,QAAI,eAAkB;AACtB,QAAI,kBAAkB;AAGtB,WAAO,UAAU,wBAAwB,iBAAiB;AACxD,UAAI,SAAS,IAAI;AACjB,UAAI,KAAK;AAGT,sBAAgB,MAAM,cAAc,QAAQ,SAAU,MAAM;AAG1D,YAAI,CAAC,KAAK,QAAQ;AAAE;AAAA;AAGpB,YAAI,OAAO,WAAW,UAAU,aAAa;AAC3C,gBAAM;AACN;AAAA;AAIF,iBAAS,KAAK,MAAM,iBAAiB,IAAI,SAAU,GAAG;AACpD,iBAAO,CAAC,KAAK;AAAA;AAIf,gBAAQ;AAAA,eACD;AACH,gBAAI,OAAO,WAAW,GAAG;AACvB,qBAAO,OAAO;AAAA;AAEhB;AAAA,eAEG;AACH,gBAAI,OAAO,WAAW,GAAG;AACvB,qBAAO,MAAM,OAAO,IAAI,OAAO;AAAA,uBACtB,OAAO,WAAW,GAAG;AAC9B,qBAAO,MAAM,OAAO,IAAI,OAAO;AAAA;AAEjC;AAAA,eAEG;AACH,gBAAI,OAAO,WAAW,GAAG;AACvB,qBAAO,OAAO,OAAO,IAAI,GAAG;AAAA,uBACnB,OAAO,WAAW,GAAG;AAC9B,qBAAO,OAAO,OAAO,IAAI,OAAO,IAAI,OAAO;AAAA;AAE7C;AAAA,eAEG;AACH,gBAAI,OAAO,WAAW,GAAG;AACvB,qBAAO,UAAU,OAAO,IAAI;AAAA,uBACnB,OAAO,WAAW,GAAG;AAC9B,qBAAO,UAAU,OAAO,IAAI,OAAO;AAAA;AAErC;AAAA,eAEG;AACH,gBAAI,OAAO,WAAW,GAAG;AACvB,qBAAO,MAAM,OAAO;AAAA;AAEtB;AAAA,eAEG;AACH,gBAAI,OAAO,WAAW,GAAG;AACvB,qBAAO,MAAM,OAAO;AAAA;AAEtB;AAAA;AAAA;AAIN,aAAO;AAAA;AAAA;AAAA;;;ACrFT;AAAA;AAEA;AAGA,QAAI,OAAM,KAAK,KAAK;AAUpB,gCAA2B,IAAI,IAAI,IAAI,IAAI;AACzC,UAAI,OAAQ,KAAK,KAAK,KAAK,KAAK,IAAK,KAAK;AAC1C,UAAI,MAAO,KAAK,KAAK,KAAK;AAM1B,UAAI,MAAO,GAAK;AAAE,cAAO;AAAA;AACzB,UAAI,MAAM,IAAM;AAAE,cAAM;AAAA;AAExB,aAAO,OAAO,KAAK,KAAK;AAAA;AAS1B,6BAAwB,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,SAAS,SAAS;AAOxE,UAAI,MAAO,UAAS,MAAG,MAAI,IAAI,UAAS,MAAG,MAAI;AAC/C,UAAI,MAAM,CAAC,UAAS,MAAG,MAAI,IAAI,UAAS,MAAG,MAAI;AAE/C,UAAI,QAAU,KAAK;AACnB,UAAI,QAAU,KAAK;AACnB,UAAI,SAAS,MAAM;AACnB,UAAI,SAAS,MAAM;AAOnB,UAAI,WAAY,QAAQ,QAAU,QAAQ,SAAW,QAAQ;AAE7D,UAAI,WAAW,GAAG;AAEhB,mBAAW;AAAA;AAGb,kBAAe,QAAQ,SAAW,QAAQ;AAC1C,iBAAW,KAAK,KAAK,YAAa,QAAO,KAAK,KAAK;AAEnD,UAAI,MAAM,WAAY,KAAG,KAAK;AAC9B,UAAI,MAAM,WAAW,CAAC,KAAG,KAAK;AAO9B,UAAI,KAAK,UAAQ,MAAM,UAAQ,MAAO,MAAG,MAAI;AAC7C,UAAI,KAAK,UAAQ,MAAM,UAAQ,MAAO,MAAG,MAAI;AAM7C,UAAI,MAAQ,OAAM,OAAO;AACzB,UAAI,MAAQ,OAAM,OAAO;AACzB,UAAI,MAAO,EAAC,MAAM,OAAO;AACzB,UAAI,MAAO,EAAC,MAAM,OAAO;AAEzB,UAAI,SAAS,mBAAkB,GAAG,GAAG,KAAK;AAC1C,UAAI,cAAc,mBAAkB,KAAK,KAAK,KAAK;AAEnD,UAAI,OAAO,KAAK,cAAc,GAAG;AAC/B,uBAAe;AAAA;AAEjB,UAAI,OAAO,KAAK,cAAc,GAAG;AAC/B,uBAAe;AAAA;AAGjB,aAAO,CAAE,IAAI,IAAI,QAAQ;AAAA;AAO3B,mCAA8B,QAAQ,aAAa;AACjD,UAAI,QAAQ,IAAE,IAAI,KAAK,IAAI,cAAY;AAEvC,UAAI,KAAK,KAAK,IAAI;AAClB,UAAI,KAAK,KAAK,IAAI;AAClB,UAAI,KAAK,KAAK,IAAI,SAAS;AAC3B,UAAI,KAAK,KAAK,IAAI,SAAS;AAE3B,aAAO,CAAE,IAAI,IAAI,KAAK,KAAG,OAAO,KAAK,KAAG,OAAO,KAAK,KAAG,OAAO,KAAK,KAAG,OAAO,IAAI;AAAA;AAGnF,WAAO,UAAU,aAAa,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAAK;AACjE,UAAI,UAAU,KAAK,IAAI,MAAM,OAAM;AACnC,UAAI,UAAU,KAAK,IAAI,MAAM,OAAM;AAInC,UAAI,MAAO,UAAS,MAAG,MAAI,IAAI,UAAS,MAAG,MAAI;AAC/C,UAAI,MAAM,CAAC,UAAS,MAAG,MAAI,IAAI,UAAS,MAAG,MAAI;AAE/C,UAAI,QAAQ,KAAK,QAAQ,GAAG;AAE1B,eAAO;AAAA;AAGT,UAAI,OAAO,KAAK,OAAO,GAAG;AAExB,eAAO;AAAA;AAMT,WAAK,KAAK,IAAI;AACd,WAAK,KAAK,IAAI;AAEd,UAAI,SAAU,MAAM,MAAQ,MAAK,MAAO,MAAM,MAAQ,MAAK;AAC3D,UAAI,SAAS,GAAG;AACd,cAAM,KAAK,KAAK;AAChB,cAAM,KAAK,KAAK;AAAA;AAMlB,UAAI,KAAK,gBAAe,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,SAAS;AAEjE,UAAI,SAAS;AACb,UAAI,SAAS,GAAG;AAChB,UAAI,cAAc,GAAG;AAKrB,UAAI,WAAW,KAAK,IAAI,KAAK,KAAK,KAAK,IAAI,eAAgB,QAAM,KAAK;AACtE,qBAAe;AAEf,eAAS,IAAI,GAAG,IAAI,UAAU,KAAK;AACjC,eAAO,KAAK,sBAAqB,QAAQ;AACzC,kBAAU;AAAA;AAMZ,aAAO,OAAO,IAAI,SAAU,OAAO;AACjC,iBAAS,KAAI,GAAG,KAAI,MAAM,QAAQ,MAAK,GAAG;AACxC,cAAI,IAAI,MAAM,KAAI;AAClB,cAAI,IAAI,MAAM,KAAI;AAGlB,eAAK;AACL,eAAK;AAGL,cAAI,KAAK,UAAQ,IAAI,UAAQ;AAC7B,cAAI,KAAK,UAAQ,IAAI,UAAQ;AAG7B,gBAAM,KAAI,KAAK,KAAK,GAAG;AACvB,gBAAM,KAAI,KAAK,KAAK,GAAG;AAAA;AAGzB,eAAO;AAAA;AAAA;AAAA;AAAA;;;ACzLX;AAAA;AAAA;AAMA,QAAI,UAAU;AAId,QAAI,QAAQ,KAAK,KAAK;AAKtB,qBAAiB,IAAI,IAAI,IAAI;AAC3B,UAAI,CAAE,iBAAgB,UAAU;AAAE,eAAO,IAAI,QAAQ,IAAI,IAAI;AAAA;AAC7D,WAAK,KAAK;AACV,WAAK,KAAK;AACV,WAAK,KAAK;AAAA;AAUZ,YAAQ,UAAU,YAAY,SAAU,GAAG;AAIzC,UAAI,IAAI,KAAK,IAAI,KAAK,KAAK,QAAQ,IAAI,KAAK,IAAI,KAAK,KAAK;AAC1D,UAAI,KAAK;AAAA,QACP,KAAK,KAAM,GAAE,KAAG,IAAI,EAAE,KAAG;AAAA,QACzB,KAAK,KAAM,GAAE,KAAG,IAAI,EAAE,KAAG;AAAA,QACzB,KAAK,KAAM,EAAC,EAAE,KAAG,IAAI,EAAE,KAAG;AAAA,QAC1B,KAAK,KAAM,EAAC,EAAE,KAAG,IAAI,EAAE,KAAG;AAAA;AAM5B,UAAI,IAAI,GAAG,KAAG,GAAG,KAAK,GAAG,KAAG,GAAG,IAC3B,IAAI,GAAG,KAAG,GAAG,KAAK,GAAG,KAAG,GAAG;AAG/B,UAAI,IAAM,KAAG,KAAG,GAAG,MAAK,IAAG,KAAG,GAAG,MAAO,IAAG,KAAG,GAAG,MAAK,IAAG,KAAG,GAAG,OACrD,KAAG,KAAG,GAAG,MAAK,IAAG,KAAG,GAAG,MAAO,IAAG,KAAG,GAAG,MAAK,IAAG,KAAG,GAAG;AAG/D,UAAI,KAAM,KAAI,KAAK;AAGnB,UAAI,IAAI,UAAU,IAAI;AAEpB,aAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AAC9B,aAAK,KAAK;AACV,eAAO;AAAA;AAIT,UAAI,IAAI,GAAG,KAAG,GAAG,KAAK,GAAG,KAAG,GAAG;AAE/B,UAAI,KAAK,KAAK;AAGd,UAAI,KAAK,KAAK,IAAE,GACZ,KAAK,KAAK,IAAE;AAGhB,WAAK,KAAM,KAAK,IAAI,KAAK,WAAW,KAAK,IAAI,KAAK,KAAK,UACrD,KAEA,KAAK,KAAK,KAAK,IAAI,KAAK,KAAK,IAAI,KAAK,KACnC,MAAK,KAAK,IAEX,IAAK,MAAK,MACR,MAAM,KAAK;AAIjB,UAAI,KAAK,MAAM,GAAG;AAEhB,aAAK,KAAK,KAAK,KAAK;AACpB,aAAK,KAAK,KAAK,KAAK;AAAA,aACf;AAEL,aAAK,MAAM;AACX,aAAK,KAAK,KAAK,KAAK;AACpB,aAAK,KAAK,KAAK,KAAK;AAAA;AAGtB,aAAO;AAAA;AAKT,YAAQ,UAAU,eAAe,WAAY;AAC3C,aAAQ,KAAK,KAAK,UAAU,KAAK,MAAM,KAAK,KAAK,UAAU,KAAK;AAAA;AAGlE,WAAO,UAAU;AAAA;AAAA;;;ACvGjB;AAAA;AAYA;AAGA,QAAI,YAAiB;AACrB,QAAI,iBAAiB;AACrB,QAAI,SAAiB;AACrB,QAAI,MAAiB;AACrB,QAAI,UAAiB;AAKrB,qBAAiB,MAAM;AACrB,UAAI,CAAE,iBAAgB,UAAU;AAAE,eAAO,IAAI,QAAQ;AAAA;AAErD,UAAI,SAAS,UAAU;AAIvB,WAAK,WAAW,OAAO;AAGvB,WAAK,MAAW,OAAO;AAGvB,WAAK,UAAa;AAAA;AAGpB,YAAQ,OAAO,SAAU,KAAK;AAC5B,UAAI,OAAO,QAAQ;AAAU,eAAO,IAAI,QAAQ;AAEhD,UAAI,eAAe,SAAS;AAE1B,YAAI,IAAI,IAAI,QAAQ;AAGpB,UAAE,MAAM,IAAI;AACZ,UAAE,WAAW,IAAI,SAAS,IAAI,SAAU,KAAK;AAAE,iBAAO,IAAI;AAAA;AAC1D,UAAE,UAAU,IAAI,QAAQ,IAAI,SAAU,GAAG;AACvC,iBAAO,SAAS,OAAO,EAAE;AAAA;AAG3B,eAAO;AAAA;AAGT,YAAM,IAAI,MAAM,sCAAsC;AAAA;AAIxD,YAAQ,UAAU,WAAW,SAAU,GAAG;AACxC,UAAI,OAAO,MAAM;AAGjB,UAAI,CAAC,EAAE,MAAM,QAAQ;AAAE;AAAA;AAEvB,WAAK,QAAQ,SAAU,GAAG,OAAO,GAAG,GAAG;AACrC,YAAI,GAAG,QAAQ,MAAM;AAErB,gBAAQ,EAAE;AAAA,eAGH;AACH,gBAAS,EAAE,KAAK,GAAG,EAAE,IAAI;AACzB,qBAAU,EAAE,OAAO,IAAK,CAAE,KAAK,EAAE,MAAO,CAAE,KAAK,EAAE,IAAI,EAAE;AACvD;AAAA,eAEG;AACH,gBAAS,EAAE,KAAK,GAAG,EAAE,IAAI;AACzB,qBAAU,EAAE,OAAO,EAAE,KAAK,GAAG,GAAG,OAAO,KAAM,CAAE,KAAK,EAAE,MAAO,CAAE,KAAK,EAAE,IAAI,EAAE;AAC5E;AAAA,eAEG;AACH,gBAAS,EAAE,KAAK,EAAE,IAAI,GAAG;AACzB,qBAAU,EAAE,OAAO,IAAK,CAAE,KAAK,EAAE,MAAO,CAAE,KAAK,EAAE,IAAI,EAAE;AACvD;AAAA,eAEG;AACH,gBAAS,EAAE,KAAK,EAAE,IAAI,GAAG;AACzB,qBAAU,EAAE,OAAO,EAAE,KAAK,GAAG,GAAG,OAAO,KAAM,CAAE,KAAK,EAAE,MAAO,CAAE,KAAK,EAAE,IAAI,EAAE;AAC5E;AAAA,eAEG;AAAA,eACA;AAUH,gBAAI,KAAK,EAAE;AACX,gBAAI,IAAI,QAAQ,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,UAAU;AAG5C,gBAAI,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG;AACrC,gBAAE,KAAK,EAAE,KAAK,MAAM;AAAA;AAItB,gBAAI,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,OAAO;AAIhC,gBAAK,EAAE,OAAO,OAAO,EAAE,OAAO,KAAK,EAAE,OAAO,KACvC,EAAE,OAAO,OAAO,EAAE,OAAO,KAAK,EAAE,OAAO,GAAI;AAC9C,uBAAS,CAAE,EAAE,OAAO,MAAM,MAAM,KAAK,EAAE,IAAI,EAAE;AAC7C;AAAA;AAIF,gBAAI,EAAE,gBAAgB;AAEpB,uBAAS,CAAE,EAAE,OAAO,MAAM,MAAM,KAAK,EAAE,IAAI,EAAE;AAAA,mBACxC;AAGL,uBAAS,CAAE,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE;AAAA;AAGzD;AAAA,eAEG;AAGH,yBAAa,QAAQ;AAErB,gBAAI,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI;AACvB,qBAAS,CAAE,KAAK,EAAE,IAAI,EAAE;AACxB;AAAA;AAGA,mBAAa,EAAE;AACf,qBAAa,CAAE;AACf,yBAAc,KAAK,kBAAkB;AAGrC,iBAAK,IAAI,GAAG,IAAI,EAAE,QAAQ,KAAK,GAAG;AAChC,kBAAI,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,IAAI;AAC3B,qBAAO,KAAK,EAAE,IAAI,EAAE;AAAA;AAAA;AAI1B,aAAK,SAAS,SAAS;AAAA,SACtB;AAAA;AAML,YAAQ,UAAU,kBAAkB,WAAY;AAC9C,UAAI,GAAG;AAEP,UAAI,CAAC,KAAK,QAAQ,QAAQ;AAAE;AAAA;AAE5B,UAAI,KAAK,QAAQ,WAAW,GAAG;AAC7B,aAAK,SAAS,KAAK,QAAQ;AAC3B,aAAK,UAAU;AACf;AAAA;AAGF,UAAI;AACJ,UAAI,KAAK,QAAQ;AAEjB,aAAO,EAAE,KAAK,GAAG;AACf,UAAE,OAAO,KAAK,QAAQ,GAAG;AAAA;AAG3B,WAAK,SAAS;AACd,WAAK,UAAU;AAAA;AAMjB,YAAQ,UAAU,WAAW,WAAY;AACvC,UAAI,SAAS,IAAI,UAAU,IAAI,aAAa;AAE5C,WAAK;AAEL,eAAS,IAAI,GAAG,MAAM,KAAK,SAAS,QAAQ,IAAI,KAAK,KAAK;AACxD,YAAI,WAAU,KAAK,SAAS;AAC5B,YAAI,MAAM,SAAQ;AAGlB,YAAI,QAAQ,WAAW,QAAQ,OAAO,QAAQ,KAAK;AAEjD,cAAI,QAAQ,OAAO,YAAY;AAAK,sBAAU;AAC9C,oBAAU;AAEV,uBAAa;AAAA,eACR;AACL,uBAAa;AAAA;AAIf,iBAAS,MAAM,GAAG,MAAM,SAAQ,QAAQ,OAAO;AAC7C,cAAI,MAAM,SAAQ;AAIlB,cAAI,QAAQ,GAAG;AACb,gBAAI,cAAc,OAAO;AAAG,wBAAU;AAAA,qBAC7B,OAAO;AAAG,sBAAU;AAE/B,oBAAU;AAAA;AAGZ,kBAAU;AAAA;AAGZ,aAAO;AAAA;AAMT,YAAQ,UAAU,YAAY,SAAU,GAAG,GAAG;AAC5C,WAAK,QAAQ,KAAK,SAAS,UAAU,GAAG,KAAK;AAC7C,aAAO;AAAA;AAOT,YAAQ,UAAU,QAAQ,SAAU,IAAI,IAAI;AAC1C,WAAK,QAAQ,KAAK,SAAS,MAAM,IAAK,CAAC,MAAO,OAAO,IAAM,KAAK;AAChE,aAAO;AAAA;AAOT,YAAQ,UAAU,SAAS,SAAU,OAAO,IAAI,IAAI;AAClD,WAAK,QAAQ,KAAK,SAAS,OAAO,OAAO,MAAM,GAAG,MAAM;AACxD,aAAO;AAAA;AAMT,YAAQ,UAAU,QAAQ,SAAU,SAAS;AAC3C,WAAK,QAAQ,KAAK,SAAS,MAAM;AACjC,aAAO;AAAA;AAMT,YAAQ,UAAU,QAAQ,SAAU,SAAS;AAC3C,WAAK,QAAQ,KAAK,SAAS,MAAM;AACjC,aAAO;AAAA;AAMT,YAAQ,UAAU,SAAS,SAAU,GAAG;AACtC,WAAK,QAAQ,KAAK,SAAS,OAAO;AAClC,aAAO;AAAA;AAMT,YAAQ,UAAU,YAAY,SAAU,iBAAiB;AACvD,UAAI,CAAC,gBAAgB,QAAQ;AAC3B,eAAO;AAAA;AAET,WAAK,QAAQ,KAAK,eAAe;AACjC,aAAO;AAAA;AAOT,YAAQ,UAAU,QAAQ,SAAU,GAAG;AACrC,UAAI,qBAAqB,GAAG,qBAAqB,GAAG,SAAS,GAAG,SAAS,GAAG;AAE5E,UAAI,KAAK;AAET,WAAK;AAEL,WAAK,SAAS,QAAQ,SAAU,GAAG;AACjC,YAAI,aAAc,EAAE,GAAG,kBAAkB,EAAE;AAE3C,gBAAQ,EAAE;AAAA,eACH;AAAA,eACA;AACH,gBAAI,YAAY;AAAE,gBAAE,MAAM;AAAA;AAC1B,qBAAS,EAAE,KAAK,EAAE,GAAG,QAAQ;AAC7B,cAAE,KAAK,CAAC,EAAE,GAAG,QAAQ;AACrB;AAAA,eAEG;AAAA,eACA;AACH,gBAAI,YAAY;AAAE,gBAAE,MAAM;AAAA;AAC1B,qBAAS,EAAE,KAAK,EAAE,GAAG,QAAQ;AAC7B,cAAE,KAAK,CAAC,EAAE,GAAG,QAAQ;AACrB;AAAA,eAEG;AAAA,eACA;AACH,qBAAS;AACT,qBAAS;AACT;AAAA,eAEG;AAAA,eACA;AACH,gBAAI,YAAY;AACd,gBAAE,MAAM;AACR,gBAAE,MAAM;AAAA;AAGV,qBAAS,EAAE,KAAK,EAAE,GAAG,QAAQ;AAC7B,qBAAS,EAAE,KAAK,EAAE,GAAG,QAAQ;AAE7B,iCAAqB;AACrB,iCAAqB;AAErB,cAAE,KAAK,CAAC,EAAE,GAAG,QAAQ;AACrB,cAAE,KAAK,CAAC,EAAE,GAAG,QAAQ;AACrB;AAAA,eAEG;AAAA,eACA;AAEH,gBAAI,YAAY;AACd,gBAAE,MAAM;AACR,gBAAE,MAAM;AAAA;AAGV,qBAAS,EAAE,KAAK,EAAE,GAAG,QAAQ;AAC7B,qBAAS,EAAE,KAAK,EAAE,GAAG,QAAQ;AAE7B,cAAE,KAAK,CAAC,EAAE,GAAG,QAAQ;AACrB,cAAE,KAAK,CAAC,EAAE,GAAG,QAAQ;AACrB,cAAE,KAAK,CAAC,EAAE,GAAG,QAAQ,IAAI;AACzB,cAAE,KAAK,CAAC,EAAE,GAAG,QAAQ;AACrB,cAAE,KAAK,CAAC,EAAE,GAAG,QAAQ;AACrB;AAAA;AAIA,gBAAI,EAAE;AAEN,gBAAI,YAAY;AACd,gBAAE,IAAI,MAAM;AACZ,gBAAE,IAAI,MAAM;AAAA;AAGd,qBAAS,EAAE,IAAI,KAAK,EAAE,IAAI,GAAG,QAAQ;AACrC,qBAAS,EAAE,IAAI,KAAK,EAAE,IAAI,GAAG,QAAQ;AAErC,cAAE,QAAQ,SAAU,KAAK,GAAG;AAC1B,kBAAI,CAAC,GAAG;AAAE;AAAA;AACV,gBAAE,KAAK,CAAC,EAAE,GAAG,QAAQ;AAAA;AAEvB;AAAA;AAAA;AAIN,aAAO;AAAA;AAQT,YAAQ,UAAU,UAAU,SAAU,UAAU,eAAe;AAC7D,UAAI,WAAW,KAAK,UAChB,eAAe,IACf,cAAc,OACd,QAAQ,GACR,QAAQ,GACR,iBAAiB,GACjB,iBAAiB;AACrB,UAAI,GAAG,GAAG;AAEV,UAAI,CAAC,eAAe;AAClB,aAAK;AAAA;AAGP,eAAS,QAAQ,SAAU,GAAG,OAAO;AAEnC,YAAI,MAAM,SAAS,GAAG,OAAO,OAAO;AAEpC,YAAI,MAAM,QAAQ,MAAM;AACtB,uBAAa,SAAS;AACtB,wBAAc;AAAA;AAGhB,YAAI,aAAc,EAAE,OAAO,EAAE,GAAG;AAGhC,gBAAQ,EAAE;AAAA,eACH;AAAA,eACA;AACH,oBAAQ,EAAE,KAAM,cAAa,QAAQ;AACrC,oBAAQ,EAAE,KAAM,cAAa,QAAQ;AACrC,6BAAiB;AACjB,6BAAiB;AACjB;AAAA,eAEG;AAAA,eACA;AACH,oBAAQ,EAAE,KAAM,cAAa,QAAQ;AACrC;AAAA,eAEG;AAAA,eACA;AACH,oBAAQ,EAAE,KAAM,cAAa,QAAQ;AACrC;AAAA,eAEG;AAAA,eACA;AAEH,oBAAQ;AACR,oBAAQ;AACR;AAAA;AAGA,oBAAQ,EAAE,EAAE,SAAS,KAAM,cAAa,QAAQ;AAChD,oBAAQ,EAAE,EAAE,SAAS,KAAM,cAAa,QAAQ;AAAA;AAAA;AAMtD,UAAI,CAAC,aAAa;AAAE,eAAO;AAAA;AAE3B,oBAAc;AAEd,WAAK,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK;AACpC,YAAI,OAAO,aAAa,OAAO,aAAa;AAC1C,eAAK,IAAI,GAAG,IAAI,aAAa,GAAG,QAAQ,KAAK;AAC3C,wBAAY,KAAK,aAAa,GAAG;AAAA;AAAA,eAE9B;AACL,sBAAY,KAAK,SAAS;AAAA;AAAA;AAI9B,WAAK,WAAW;AAEhB,aAAO;AAAA;AAMT,YAAQ,UAAU,MAAM,WAAY;AAElC,WAAK,QAAQ,SAAU,GAAG,OAAO,GAAG,GAAG;AACrC,YAAI,OAAO,EAAE,IACT,SAAS,KAAK,eACd;AAGJ,YAAI,SAAS,QAAQ;AAAE;AAAA;AAEvB,UAAE,KAAK;AAEP,gBAAQ;AAAA,eACD;AAEH,cAAE,MAAM;AACR;AAAA,eAEG;AAGH,cAAE,MAAM;AACR,cAAE,MAAM;AACR;AAAA;AAGA,iBAAK,IAAI,GAAG,IAAI,EAAE,QAAQ,KAAK;AAC7B,gBAAE,MAAM,IAAI,IAAI,IAAI;AAAA;AAAA;AAAA,SAGzB;AAEH,aAAO;AAAA;AAMT,YAAQ,UAAU,MAAM,WAAY;AAElC,WAAK,QAAQ,SAAU,GAAG,OAAO,GAAG,GAAG;AACrC,YAAI,OAAO,EAAE,IACT,SAAS,KAAK,eACd;AAGJ,YAAI,SAAS,QAAQ;AAAE;AAAA;AAGvB,YAAI,UAAU,KAAK,SAAS,KAAK;AAAE;AAAA;AAEnC,UAAE,KAAK;AAEP,gBAAQ;AAAA,eACD;AAEH,cAAE,MAAM;AACR;AAAA,eAEG;AAGH,cAAE,MAAM;AACR,cAAE,MAAM;AACR;AAAA;AAGA,iBAAK,IAAI,GAAG,IAAI,EAAE,QAAQ,KAAK;AAC7B,gBAAE,MAAM,IAAI,IAAI,IAAI;AAAA;AAAA;AAAA,SAGzB;AAEH,aAAO;AAAA;AAMT,YAAQ,UAAU,QAAQ,WAAY;AACpC,WAAK,QAAQ,SAAU,GAAG,OAAO,GAAG,GAAG;AACrC,YAAI,cAAc,OAAO,OAAO,SAAS,IAAI,OAAO,EAAE;AAGtD,YAAI,SAAS,OAAO,SAAS,KAAK;AAAE,iBAAO;AAAA;AAE3C,YAAI,SAAS,KAAK;AAEhB,kBAAQ,IAAI,EAAE;AACd,kBAAQ,IAAI,EAAE;AAAA,eACT;AACL,kBAAQ,EAAE;AACV,kBAAQ,EAAE;AAAA;AAGZ,uBAAe,IAAI,GAAG,GAAG,OAAO,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE;AAIjE,YAAI,aAAa,WAAW,GAAG;AAC7B,iBAAO,CAAE,CAAE,EAAE,OAAO,MAAM,MAAM,KAAK,EAAE,IAAI,EAAE;AAAA;AAG/C,qBAAa,QAAQ,SAAU,IAAG;AAChC,iBAAO,KAAK,CAAE,KAAK,GAAE,IAAI,GAAE,IAAI,GAAE,IAAI,GAAE,IAAI,GAAE,IAAI,GAAE;AAAA;AAGrD,eAAO;AAAA;AAGT,aAAO;AAAA;AAMT,YAAQ,UAAU,UAAU,WAAY;AACtC,UAAI,WAAW,KAAK;AACpB,UAAI,cAAc,cAAc;AAChC,UAAI,aAAa;AAIjB,WAAK,QAAQ,SAAU,GAAG,KAAK,GAAG,GAAG;AACnC,YAAI,OAAO,EAAE,IAAI,SAAS,KAAK,eAAe;AAI9C,YAAI,CAAC,KAAK;AAAE;AAAA;AAEZ,YAAI,WAAW,KAAK;AAClB,uBAAc,SAAS;AAEvB,wBAAc,SAAS,MAAM;AAE7B,cAAI,YAAY,OAAO,KAAK;AAC1B,2BAAe,YAAY,KAAK;AAChC,2BAAe,YAAY,KAAK;AAAA,qBACvB,YAAY,OAAO,KAAK;AACjC,2BAAe,YAAY,KAAK,YAAY;AAC5C,2BAAe,YAAY,KAAK,YAAY;AAAA,iBACvC;AACL,2BAAe;AACf,2BAAe;AAAA;AAGjB,wBAAc,CAAC;AACf,wBAAc,CAAC;AAEf,cAAI,CAAC,YAAY;AACf,2BAAe;AACf,2BAAe;AAAA;AAGjB,mBAAS,OAAO;AAAA,YACd,aAAa,MAAM;AAAA,YACnB;AAAA,YAAa;AAAA,YACb,EAAE;AAAA,YAAI,EAAE;AAAA;AAAA,mBAGD,WAAW,KAAK;AACzB,uBAAc,SAAS;AAEvB,wBAAc,SAAS,MAAM;AAE7B,cAAI,YAAY,OAAO,KAAK;AAC1B,2BAAe,YAAY,KAAK;AAChC,2BAAe,YAAY,KAAK;AAAA,qBACvB,YAAY,OAAO,KAAK;AACjC,2BAAe,YAAY,KAAK,YAAY;AAC5C,2BAAe,YAAY,KAAK,YAAY;AAAA,iBACvC;AACL,2BAAe;AACf,2BAAe;AAAA;AAGjB,wBAAc,CAAC;AACf,wBAAc,CAAC;AAEf,cAAI,CAAC,YAAY;AACf,2BAAe;AACf,2BAAe;AAAA;AAGjB,mBAAS,OAAO;AAAA,YACd,aAAa,MAAM;AAAA,YACnB;AAAA,YAAa;AAAA,YACb,EAAE;AAAA,YAAI,EAAE;AAAA,YAAI,EAAE;AAAA,YAAI,EAAE;AAAA;AAAA;AAAA;AAK1B,aAAO;AAAA;AAIT,WAAO,UAAU;AAAA;AAAA;;;ACxpBjB;AAAA;AAAA;AAEA,WAAO,UAAU;AAAA;AAAA;;;ACFjB;AAAA;AAAA;AAEA,WAAO,UAAU;AACjB,WAAO,QAAQ,UAAU;AAEzB,qBAAgB,MAAM,aAAa,KAAK;AAEpC,YAAM,OAAO;AAEb,UAAI,WAAW,eAAe,YAAY,QACtC,WAAW,WAAW,YAAY,KAAK,MAAM,KAAK,QAClD,YAAY,WAAW,MAAM,GAAG,UAAU,KAAK,OAC/C,YAAY;AAEhB,UAAI,CAAC,aAAa,UAAU,SAAS,UAAU;AAAM,eAAO;AAE5D,UAAI,MAAM,MAAM,MAAM,MAAM,GAAG,GAAG;AAElC,UAAI;AAAU,oBAAY,eAAe,MAAM,aAAa,WAAW;AAGvE,UAAI,KAAK,SAAS,KAAK,KAAK;AACxB,eAAO,OAAO,KAAK;AACnB,eAAO,OAAO,KAAK;AAEnB,iBAAS,IAAI,KAAK,IAAI,UAAU,KAAK,KAAK;AACtC,cAAI,KAAK;AACT,cAAI,KAAK,IAAI;AACb,cAAI,IAAI;AAAM,mBAAO;AACrB,cAAI,IAAI;AAAM,mBAAO;AACrB,cAAI,IAAI;AAAM,mBAAO;AACrB,cAAI,IAAI;AAAM,mBAAO;AAAA;AAIzB,kBAAU,KAAK,IAAI,OAAO,MAAM,OAAO;AACvC,kBAAU,YAAY,IAAI,IAAI,UAAU;AAAA;AAG5C,mBAAa,WAAW,WAAW,KAAK,MAAM,MAAM;AAEpD,aAAO;AAAA;AAIX,wBAAoB,MAAM,OAAO,KAAK,KAAK,WAAW;AAClD,UAAI,GAAG;AAEP,UAAI,cAAe,WAAW,MAAM,OAAO,KAAK,OAAO,GAAI;AACvD,aAAK,IAAI,OAAO,IAAI,KAAK,KAAK;AAAK,iBAAO,WAAW,GAAG,KAAK,IAAI,KAAK,IAAI,IAAI;AAAA,aAC3E;AACH,aAAK,IAAI,MAAM,KAAK,KAAK,OAAO,KAAK;AAAK,iBAAO,WAAW,GAAG,KAAK,IAAI,KAAK,IAAI,IAAI;AAAA;AAGzF,UAAI,QAAQ,OAAO,MAAM,KAAK,OAAO;AACjC,mBAAW;AACX,eAAO,KAAK;AAAA;AAGhB,aAAO;AAAA;AAIX,0BAAsB,OAAO,KAAK;AAC9B,UAAI,CAAC;AAAO,eAAO;AACnB,UAAI,CAAC;AAAK,cAAM;AAEhB,UAAI,IAAI,OACJ;AACJ,SAAG;AACC,gBAAQ;AAER,YAAI,CAAC,EAAE,WAAY,QAAO,GAAG,EAAE,SAAS,KAAK,EAAE,MAAM,GAAG,EAAE,UAAU,IAAI;AACpE,qBAAW;AACX,cAAI,MAAM,EAAE;AACZ,cAAI,MAAM,EAAE;AAAM;AAClB,kBAAQ;AAAA,eAEL;AACH,cAAI,EAAE;AAAA;AAAA,eAEL,SAAS,MAAM;AAExB,aAAO;AAAA;AAIX,0BAAsB,KAAK,WAAW,KAAK,MAAM,MAAM,SAAS,MAAM;AAClE,UAAI,CAAC;AAAK;AAGV,UAAI,CAAC,QAAQ;AAAS,mBAAW,KAAK,MAAM,MAAM;AAElD,UAAI,OAAO,KACP,MAAM;AAGV,aAAO,IAAI,SAAS,IAAI,MAAM;AAC1B,eAAO,IAAI;AACX,eAAO,IAAI;AAEX,YAAI,UAAU,YAAY,KAAK,MAAM,MAAM,WAAW,MAAM,MAAM;AAE9D,oBAAU,KAAK,KAAK,IAAI;AACxB,oBAAU,KAAK,IAAI,IAAI;AACvB,oBAAU,KAAK,KAAK,IAAI;AAExB,qBAAW;AAGX,gBAAM,KAAK;AACX,iBAAO,KAAK;AAEZ;AAAA;AAGJ,cAAM;AAGN,YAAI,QAAQ,MAAM;AAEd,cAAI,CAAC,MAAM;AACP,yBAAa,aAAa,MAAM,WAAW,KAAK,MAAM,MAAM,SAAS;AAAA,qBAG9D,SAAS,GAAG;AACnB,kBAAM,uBAAuB,aAAa,MAAM,WAAW;AAC3D,yBAAa,KAAK,WAAW,KAAK,MAAM,MAAM,SAAS;AAAA,qBAGhD,SAAS,GAAG;AACnB,wBAAY,KAAK,WAAW,KAAK,MAAM,MAAM;AAAA;AAGjD;AAAA;AAAA;AAAA;AAMZ,mBAAe,KAAK;AAChB,UAAI,IAAI,IAAI,MACR,IAAI,KACJ,IAAI,IAAI;AAEZ,UAAI,KAAK,GAAG,GAAG,MAAM;AAAG,eAAO;AAG/B,UAAI,IAAI,IAAI,KAAK;AAEjB,aAAO,MAAM,IAAI,MAAM;AACnB,YAAI,gBAAgB,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,MACrD,KAAK,EAAE,MAAM,GAAG,EAAE,SAAS;AAAG,iBAAO;AACzC,YAAI,EAAE;AAAA;AAGV,aAAO;AAAA;AAGX,yBAAqB,KAAK,MAAM,MAAM,SAAS;AAC3C,UAAI,IAAI,IAAI,MACR,IAAI,KACJ,IAAI,IAAI;AAEZ,UAAI,KAAK,GAAG,GAAG,MAAM;AAAG,eAAO;AAG/B,UAAI,QAAQ,EAAE,IAAI,EAAE,IAAK,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAM,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,GACnE,QAAQ,EAAE,IAAI,EAAE,IAAK,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAM,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,GACnE,QAAQ,EAAE,IAAI,EAAE,IAAK,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAM,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,GACnE,QAAQ,EAAE,IAAI,EAAE,IAAK,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAM,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE;AAGvE,UAAI,OAAO,OAAO,OAAO,OAAO,MAAM,MAAM,UACxC,OAAO,OAAO,OAAO,OAAO,MAAM,MAAM;AAE5C,UAAI,IAAI,IAAI,OACR,IAAI,IAAI;AAGZ,aAAO,KAAK,EAAE,KAAK,QAAQ,KAAK,EAAE,KAAK,MAAM;AACzC,YAAI,MAAM,IAAI,QAAQ,MAAM,IAAI,QAC5B,gBAAgB,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,MACrD,KAAK,EAAE,MAAM,GAAG,EAAE,SAAS;AAAG,iBAAO;AACzC,YAAI,EAAE;AAEN,YAAI,MAAM,IAAI,QAAQ,MAAM,IAAI,QAC5B,gBAAgB,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,MACrD,KAAK,EAAE,MAAM,GAAG,EAAE,SAAS;AAAG,iBAAO;AACzC,YAAI,EAAE;AAAA;AAIV,aAAO,KAAK,EAAE,KAAK,MAAM;AACrB,YAAI,MAAM,IAAI,QAAQ,MAAM,IAAI,QAC5B,gBAAgB,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,MACrD,KAAK,EAAE,MAAM,GAAG,EAAE,SAAS;AAAG,iBAAO;AACzC,YAAI,EAAE;AAAA;AAIV,aAAO,KAAK,EAAE,KAAK,MAAM;AACrB,YAAI,MAAM,IAAI,QAAQ,MAAM,IAAI,QAC5B,gBAAgB,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,MACrD,KAAK,EAAE,MAAM,GAAG,EAAE,SAAS;AAAG,iBAAO;AACzC,YAAI,EAAE;AAAA;AAGV,aAAO;AAAA;AAIX,oCAAgC,OAAO,WAAW,KAAK;AACnD,UAAI,IAAI;AACR,SAAG;AACC,YAAI,IAAI,EAAE,MACN,IAAI,EAAE,KAAK;AAEf,YAAI,CAAC,OAAO,GAAG,MAAM,WAAW,GAAG,GAAG,EAAE,MAAM,MAAM,cAAc,GAAG,MAAM,cAAc,GAAG,IAAI;AAE5F,oBAAU,KAAK,EAAE,IAAI;AACrB,oBAAU,KAAK,EAAE,IAAI;AACrB,oBAAU,KAAK,EAAE,IAAI;AAGrB,qBAAW;AACX,qBAAW,EAAE;AAEb,cAAI,QAAQ;AAAA;AAEhB,YAAI,EAAE;AAAA,eACD,MAAM;AAEf,aAAO,aAAa;AAAA;AAIxB,yBAAqB,OAAO,WAAW,KAAK,MAAM,MAAM,SAAS;AAE7D,UAAI,IAAI;AACR,SAAG;AACC,YAAI,IAAI,EAAE,KAAK;AACf,eAAO,MAAM,EAAE,MAAM;AACjB,cAAI,EAAE,MAAM,EAAE,KAAK,gBAAgB,GAAG,IAAI;AAEtC,gBAAI,IAAI,aAAa,GAAG;AAGxB,gBAAI,aAAa,GAAG,EAAE;AACtB,gBAAI,aAAa,GAAG,EAAE;AAGtB,yBAAa,GAAG,WAAW,KAAK,MAAM,MAAM;AAC5C,yBAAa,GAAG,WAAW,KAAK,MAAM,MAAM;AAC5C;AAAA;AAEJ,cAAI,EAAE;AAAA;AAEV,YAAI,EAAE;AAAA,eACD,MAAM;AAAA;AAInB,4BAAwB,MAAM,aAAa,WAAW,KAAK;AACvD,UAAI,QAAQ,IACR,GAAG,KAAK,OAAO,KAAK;AAExB,WAAK,IAAI,GAAG,MAAM,YAAY,QAAQ,IAAI,KAAK,KAAK;AAChD,gBAAQ,YAAY,KAAK;AACzB,cAAM,IAAI,MAAM,IAAI,YAAY,IAAI,KAAK,MAAM,KAAK;AACpD,eAAO,WAAW,MAAM,OAAO,KAAK,KAAK;AACzC,YAAI,SAAS,KAAK;AAAM,eAAK,UAAU;AACvC,cAAM,KAAK,YAAY;AAAA;AAG3B,YAAM,KAAK;AAGX,WAAK,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AAC/B,oBAAY,cAAc,MAAM,IAAI;AACpC,oBAAY,aAAa,WAAW,UAAU;AAAA;AAGlD,aAAO;AAAA;AAGX,sBAAkB,GAAG,GAAG;AACpB,aAAO,EAAE,IAAI,EAAE;AAAA;AAInB,2BAAuB,MAAM,WAAW;AACpC,UAAI,SAAS,eAAe,MAAM;AAClC,UAAI,CAAC,QAAQ;AACT,eAAO;AAAA;AAGX,UAAI,gBAAgB,aAAa,QAAQ;AAGzC,UAAI,iBAAiB,aAAa,QAAQ,OAAO;AACjD,mBAAa,eAAe,cAAc;AAG1C,aAAO,cAAc,SAAS,iBAAiB;AAAA;AAInD,4BAAwB,MAAM,WAAW;AACrC,UAAI,IAAI,WACJ,KAAK,KAAK,GACV,KAAK,KAAK,GACV,KAAK,WACL;AAIJ,SAAG;AACC,YAAI,MAAM,EAAE,KAAK,MAAM,EAAE,KAAK,KAAK,EAAE,KAAK,MAAM,EAAE,GAAG;AACjD,cAAI,IAAI,EAAE,IAAK,MAAK,EAAE,KAAM,GAAE,KAAK,IAAI,EAAE,KAAM,GAAE,KAAK,IAAI,EAAE;AAC5D,cAAI,KAAK,MAAM,IAAI,IAAI;AACnB,iBAAK;AACL,gBAAI,MAAM,IAAI;AACV,kBAAI,OAAO,EAAE;AAAG,uBAAO;AACvB,kBAAI,OAAO,EAAE,KAAK;AAAG,uBAAO,EAAE;AAAA;AAElC,gBAAI,EAAE,IAAI,EAAE,KAAK,IAAI,IAAI,EAAE;AAAA;AAAA;AAGnC,YAAI,EAAE;AAAA,eACD,MAAM;AAEf,UAAI,CAAC;AAAG,eAAO;AAEf,UAAI,OAAO;AAAI,eAAO;AAMtB,UAAI,OAAO,GACP,KAAK,EAAE,GACP,KAAK,EAAE,GACP,SAAS,UACT;AAEJ,UAAI;AAEJ,SAAG;AACC,YAAI,MAAM,EAAE,KAAK,EAAE,KAAK,MAAM,OAAO,EAAE,KAC/B,gBAAgB,KAAK,KAAK,KAAK,IAAI,IAAI,IAAI,IAAI,KAAK,KAAK,KAAK,IAAI,IAAI,EAAE,GAAG,EAAE,IAAI;AAErF,gBAAM,KAAK,IAAI,KAAK,EAAE,KAAM,MAAK,EAAE;AAEnC,cAAI,cAAc,GAAG,SAChB,OAAM,UAAW,QAAQ,UAAW,GAAE,IAAI,EAAE,KAAM,EAAE,MAAM,EAAE,KAAK,qBAAqB,GAAG,MAAQ;AAClG,gBAAI;AACJ,qBAAS;AAAA;AAAA;AAIjB,YAAI,EAAE;AAAA,eACD,MAAM;AAEf,aAAO;AAAA;AAIX,kCAA8B,GAAG,GAAG;AAChC,aAAO,KAAK,EAAE,MAAM,GAAG,EAAE,QAAQ,KAAK,KAAK,EAAE,MAAM,GAAG,EAAE,QAAQ;AAAA;AAIpE,wBAAoB,OAAO,MAAM,MAAM,SAAS;AAC5C,UAAI,IAAI;AACR,SAAG;AACC,YAAI,EAAE,MAAM;AAAM,YAAE,IAAI,OAAO,EAAE,GAAG,EAAE,GAAG,MAAM,MAAM;AACrD,UAAE,QAAQ,EAAE;AACZ,UAAE,QAAQ,EAAE;AACZ,YAAI,EAAE;AAAA,eACD,MAAM;AAEf,QAAE,MAAM,QAAQ;AAChB,QAAE,QAAQ;AAEV,iBAAW;AAAA;AAKf,wBAAoB,MAAM;AACtB,UAAI,GAAG,GAAG,GAAG,GAAG,MAAM,WAAW,OAAO,OACpC,SAAS;AAEb,SAAG;AACC,YAAI;AACJ,eAAO;AACP,eAAO;AACP,oBAAY;AAEZ,eAAO,GAAG;AACN;AACA,cAAI;AACJ,kBAAQ;AACR,eAAK,IAAI,GAAG,IAAI,QAAQ,KAAK;AACzB;AACA,gBAAI,EAAE;AACN,gBAAI,CAAC;AAAG;AAAA;AAEZ,kBAAQ;AAER,iBAAO,QAAQ,KAAM,QAAQ,KAAK,GAAI;AAElC,gBAAI,UAAU,KAAM,WAAU,KAAK,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI;AAClD,kBAAI;AACJ,kBAAI,EAAE;AACN;AAAA,mBACG;AACH,kBAAI;AACJ,kBAAI,EAAE;AACN;AAAA;AAGJ,gBAAI;AAAM,mBAAK,QAAQ;AAAA;AAClB,qBAAO;AAEZ,cAAE,QAAQ;AACV,mBAAO;AAAA;AAGX,cAAI;AAAA;AAGR,aAAK,QAAQ;AACb,kBAAU;AAAA,eAEL,YAAY;AAErB,aAAO;AAAA;AAIX,oBAAgB,GAAG,GAAG,MAAM,MAAM,SAAS;AAEvC,UAAI,QAAS,KAAI,QAAQ;AACzB,UAAI,QAAS,KAAI,QAAQ;AAEzB,UAAK,KAAK,KAAK,KAAM;AACrB,UAAK,KAAK,KAAK,KAAM;AACrB,UAAK,KAAK,KAAK,KAAM;AACrB,UAAK,KAAK,KAAK,KAAM;AAErB,UAAK,KAAK,KAAK,KAAM;AACrB,UAAK,KAAK,KAAK,KAAM;AACrB,UAAK,KAAK,KAAK,KAAM;AACrB,UAAK,KAAK,KAAK,KAAM;AAErB,aAAO,IAAK,KAAK;AAAA;AAIrB,yBAAqB,OAAO;AACxB,UAAI,IAAI,OACJ,WAAW;AACf,SAAG;AACC,YAAI,EAAE,IAAI,SAAS,KAAM,EAAE,MAAM,SAAS,KAAK,EAAE,IAAI,SAAS;AAAI,qBAAW;AAC7E,YAAI,EAAE;AAAA,eACD,MAAM;AAEf,aAAO;AAAA;AAIX,6BAAyB,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI;AACrD,aAAQ,MAAK,MAAO,MAAK,MAAO,MAAK,MAAO,MAAK,OAAO,KAChD,MAAK,MAAO,MAAK,MAAO,MAAK,MAAO,MAAK,OAAO,KAChD,MAAK,MAAO,MAAK,MAAO,MAAK,MAAO,MAAK,OAAO;AAAA;AAI5D,6BAAyB,GAAG,GAAG;AAC3B,aAAO,EAAE,KAAK,MAAM,EAAE,KAAK,EAAE,KAAK,MAAM,EAAE,KAAK,CAAC,kBAAkB,GAAG,MAC7D,eAAc,GAAG,MAAM,cAAc,GAAG,MAAM,aAAa,GAAG,MAC7D,MAAK,EAAE,MAAM,GAAG,EAAE,SAAS,KAAK,GAAG,EAAE,MAAM,OAC5C,OAAO,GAAG,MAAM,KAAK,EAAE,MAAM,GAAG,EAAE,QAAQ,KAAK,KAAK,EAAE,MAAM,GAAG,EAAE,QAAQ;AAAA;AAIrF,kBAAc,GAAG,GAAG,GAAG;AACnB,aAAQ,GAAE,IAAI,EAAE,KAAM,GAAE,IAAI,EAAE,KAAM,GAAE,IAAI,EAAE,KAAM,GAAE,IAAI,EAAE;AAAA;AAI9D,oBAAgB,IAAI,IAAI;AACpB,aAAO,GAAG,MAAM,GAAG,KAAK,GAAG,MAAM,GAAG;AAAA;AAIxC,wBAAoB,IAAI,IAAI,IAAI,IAAI;AAChC,UAAI,KAAK,KAAK,KAAK,IAAI,IAAI;AAC3B,UAAI,KAAK,KAAK,KAAK,IAAI,IAAI;AAC3B,UAAI,KAAK,KAAK,KAAK,IAAI,IAAI;AAC3B,UAAI,KAAK,KAAK,KAAK,IAAI,IAAI;AAE3B,UAAI,OAAO,MAAM,OAAO;AAAI,eAAO;AAEnC,UAAI,OAAO,KAAK,UAAU,IAAI,IAAI;AAAK,eAAO;AAC9C,UAAI,OAAO,KAAK,UAAU,IAAI,IAAI;AAAK,eAAO;AAC9C,UAAI,OAAO,KAAK,UAAU,IAAI,IAAI;AAAK,eAAO;AAC9C,UAAI,OAAO,KAAK,UAAU,IAAI,IAAI;AAAK,eAAO;AAE9C,aAAO;AAAA;AAIX,uBAAmB,GAAG,GAAG,GAAG;AACxB,aAAO,EAAE,KAAK,KAAK,IAAI,EAAE,GAAG,EAAE,MAAM,EAAE,KAAK,KAAK,IAAI,EAAE,GAAG,EAAE,MAAM,EAAE,KAAK,KAAK,IAAI,EAAE,GAAG,EAAE,MAAM,EAAE,KAAK,KAAK,IAAI,EAAE,GAAG,EAAE;AAAA;AAGzH,kBAAc,KAAK;AACf,aAAO,MAAM,IAAI,IAAI,MAAM,IAAI,KAAK;AAAA;AAIxC,+BAA2B,GAAG,GAAG;AAC7B,UAAI,IAAI;AACR,SAAG;AACC,YAAI,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,MAAM,EAAE,KAC7D,WAAW,GAAG,EAAE,MAAM,GAAG;AAAI,iBAAO;AAC5C,YAAI,EAAE;AAAA,eACD,MAAM;AAEf,aAAO;AAAA;AAIX,2BAAuB,GAAG,GAAG;AACzB,aAAO,KAAK,EAAE,MAAM,GAAG,EAAE,QAAQ,IAC7B,KAAK,GAAG,GAAG,EAAE,SAAS,KAAK,KAAK,GAAG,EAAE,MAAM,MAAM,IACjD,KAAK,GAAG,GAAG,EAAE,QAAQ,KAAK,KAAK,GAAG,EAAE,MAAM,KAAK;AAAA;AAIvD,0BAAsB,GAAG,GAAG;AACxB,UAAI,IAAI,GACJ,SAAS,OACT,KAAM,GAAE,IAAI,EAAE,KAAK,GACnB,KAAM,GAAE,IAAI,EAAE,KAAK;AACvB,SAAG;AACC,YAAM,EAAE,IAAI,OAAS,EAAE,KAAK,IAAI,MAAQ,EAAE,KAAK,MAAM,EAAE,KAC9C,KAAM,GAAE,KAAK,IAAI,EAAE,KAAM,MAAK,EAAE,KAAM,GAAE,KAAK,IAAI,EAAE,KAAK,EAAE;AAC/D,mBAAS,CAAC;AACd,YAAI,EAAE;AAAA,eACD,MAAM;AAEf,aAAO;AAAA;AAKX,0BAAsB,GAAG,GAAG;AACxB,UAAI,KAAK,IAAI,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,IAC1B,KAAK,IAAI,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,IAC1B,KAAK,EAAE,MACP,KAAK,EAAE;AAEX,QAAE,OAAO;AACT,QAAE,OAAO;AAET,SAAG,OAAO;AACV,SAAG,OAAO;AAEV,SAAG,OAAO;AACV,SAAG,OAAO;AAEV,SAAG,OAAO;AACV,SAAG,OAAO;AAEV,aAAO;AAAA;AAIX,wBAAoB,GAAG,GAAG,GAAG,MAAM;AAC/B,UAAI,IAAI,IAAI,KAAK,GAAG,GAAG;AAEvB,UAAI,CAAC,MAAM;AACP,UAAE,OAAO;AACT,UAAE,OAAO;AAAA,aAEN;AACH,UAAE,OAAO,KAAK;AACd,UAAE,OAAO;AACT,aAAK,KAAK,OAAO;AACjB,aAAK,OAAO;AAAA;AAEhB,aAAO;AAAA;AAGX,wBAAoB,GAAG;AACnB,QAAE,KAAK,OAAO,EAAE;AAChB,QAAE,KAAK,OAAO,EAAE;AAEhB,UAAI,EAAE;AAAO,UAAE,MAAM,QAAQ,EAAE;AAC/B,UAAI,EAAE;AAAO,UAAE,MAAM,QAAQ,EAAE;AAAA;AAGnC,kBAAc,GAAG,GAAG,GAAG;AAEnB,WAAK,IAAI;AAGT,WAAK,IAAI;AACT,WAAK,IAAI;AAGT,WAAK,OAAO;AACZ,WAAK,OAAO;AAGZ,WAAK,IAAI;AAGT,WAAK,QAAQ;AACb,WAAK,QAAQ;AAGb,WAAK,UAAU;AAAA;AAKnB,YAAO,YAAY,SAAU,MAAM,aAAa,KAAK,WAAW;AAC5D,UAAI,WAAW,eAAe,YAAY;AAC1C,UAAI,WAAW,WAAW,YAAY,KAAK,MAAM,KAAK;AAEtD,UAAI,cAAc,KAAK,IAAI,WAAW,MAAM,GAAG,UAAU;AACzD,UAAI,UAAU;AACV,iBAAS,IAAI,GAAG,MAAM,YAAY,QAAQ,IAAI,KAAK,KAAK;AACpD,cAAI,QAAQ,YAAY,KAAK;AAC7B,cAAI,MAAM,IAAI,MAAM,IAAI,YAAY,IAAI,KAAK,MAAM,KAAK;AACxD,yBAAe,KAAK,IAAI,WAAW,MAAM,OAAO,KAAK;AAAA;AAAA;AAI7D,UAAI,gBAAgB;AACpB,WAAK,IAAI,GAAG,IAAI,UAAU,QAAQ,KAAK,GAAG;AACtC,YAAI,IAAI,UAAU,KAAK;AACvB,YAAI,IAAI,UAAU,IAAI,KAAK;AAC3B,YAAI,IAAI,UAAU,IAAI,KAAK;AAC3B,yBAAiB,KAAK,IACjB,MAAK,KAAK,KAAK,MAAO,MAAK,IAAI,KAAK,KAAK,IAAI,MAC7C,MAAK,KAAK,KAAK,MAAO,MAAK,IAAI,KAAK,KAAK,IAAI;AAAA;AAGtD,aAAO,gBAAgB,KAAK,kBAAkB,IAAI,IAC9C,KAAK,IAAK,iBAAgB,eAAe;AAAA;AAGjD,wBAAoB,MAAM,OAAO,KAAK,KAAK;AACvC,UAAI,MAAM;AACV,eAAS,IAAI,OAAO,IAAI,MAAM,KAAK,IAAI,KAAK,KAAK,KAAK;AAClD,eAAQ,MAAK,KAAK,KAAK,MAAO,MAAK,IAAI,KAAK,KAAK,IAAI;AACrD,YAAI;AAAA;AAER,aAAO;AAAA;AAIX,YAAO,UAAU,SAAU,MAAM;AAC7B,UAAI,MAAM,KAAK,GAAG,GAAG,QACjB,SAAS,EAAC,UAAU,IAAI,OAAO,IAAI,YAAY,OAC/C,YAAY;AAEhB,eAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AAClC,iBAAS,IAAI,GAAG,IAAI,KAAK,GAAG,QAAQ,KAAK;AACrC,mBAAS,IAAI,GAAG,IAAI,KAAK;AAAK,mBAAO,SAAS,KAAK,KAAK,GAAG,GAAG;AAAA;AAElE,YAAI,IAAI,GAAG;AACP,uBAAa,KAAK,IAAI,GAAG;AACzB,iBAAO,MAAM,KAAK;AAAA;AAAA;AAG1B,aAAO;AAAA;AAAA;AAAA;;;AC1qBI,sBAAS,SAAS;AAC/B,MAAI,IAAI,IACJ,IAAI,QAAQ,QACZ,GACA,IAAI,QAAQ,IAAI,IAChB,OAAO;AAEX,SAAO,EAAE,IAAI,GAAG;AACd,QAAI;AACJ,QAAI,QAAQ;AACZ,YAAQ,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE;AAAA;AAGjC,SAAO,OAAO;AAAA;;;ACbD,0BAAS,SAAS;AAC/B,MAAI,IAAI,IACJ,IAAI,QAAQ,QACZ,IAAI,GACJ,IAAI,GACJ,GACA,IAAI,QAAQ,IAAI,IAChB,GACA,IAAI;AAER,SAAO,EAAE,IAAI,GAAG;AACd,QAAI;AACJ,QAAI,QAAQ;AACZ,SAAK,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE;AAChC,SAAM,GAAE,KAAK,EAAE,MAAM;AACrB,SAAM,GAAE,KAAK,EAAE,MAAM;AAAA;AAGvB,SAAO,KAAK,GAAG,CAAC,IAAI,GAAG,IAAI;AAAA;;;AClBd,wBAAS,SAAS;AAC/B,MAAI,IAAI,IACJ,IAAI,QAAQ,QACZ,IAAI,QAAQ,IAAI,IAChB,IACA,IACA,KAAK,EAAE,IACP,KAAK,EAAE,IACP,YAAY;AAEhB,SAAO,EAAE,IAAI,GAAG;AACd,SAAK;AACL,SAAK;AACL,QAAI,QAAQ;AACZ,SAAK,EAAE;AACP,SAAK,EAAE;AACP,UAAM;AACN,UAAM;AACN,iBAAa,KAAK,KAAK,KAAK,KAAK,KAAK;AAAA;AAGxC,SAAO;AAAA;;;ACrBT,qBAAiB;;;ACGjB,IAAI,SAAS,EAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG;AACvE,IAAI,UAAU;AAEC,uBAAS,MAAM;AAC5B,MAAI,OAAO;AACZ,OAAK,QAAQ,SAAS,SAAS,GAAG,SAAS,MAAK;AAC/C,QAAI,OAAO,QAAQ;AACnB,WAAO,YAAY;AAGnB,QAAI,SAAS,OAAO,KAAK,SAAS,GAAG;AACpC,WAAK,KAAK,CAAC,SAAS,OAAO,KAAK,OAAO,GAAG;AAC1C,aAAO;AACP,gBAAU,YAAY,MAAM,MAAM;AAAA;AAGnC,WAAO,KAAK,UAAU,GAAG;AACxB,UAAI,KAAK,WAAW,OAAO,OAAO;AACjC,aAAK,QAAQ;AACb,eAAO,KAAK,KAAK;AAAA;AAElB,UAAI,KAAK,SAAS,OAAO,OAAO;AAC3B,cAAM,IAAI,MAAM;AAAA;AAErB,WAAK,KAAK,CAAC,SAAS,OAAO,KAAK,OAAO,GAAG,OAAO;AAAA;AAAA;AAGlD,SAAO;AAAA;AAGT,IAAI,SAAS;AAEb,qBAAqB,MAAM;AAC1B,MAAI,UAAU,KAAK,MAAM;AACzB,SAAO,UAAU,QAAQ,IAAI,UAAU;AAAA;;;AClCzB,wBAAS,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI;AACtD,SAAO,IAAI,OAAO,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI;AAAA;AAGhD,gBAAgB,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI;AAC9C,OAAK,IAAI,EAAC,GAAE,IAAI,GAAE;AAClB,OAAK,IAAI,EAAC,GAAE,IAAI,GAAE;AAClB,OAAK,IAAI,EAAC,GAAE,IAAI,GAAE;AAClB,OAAK,IAAI,EAAC,GAAE,IAAI,GAAE;AAElB,MAAG,OAAO,QAAQ,OAAO,UAAa,OAAO,QAAQ,OAAO,QAAU;AACpE,SAAK,eAAe;AACpB,SAAK,WAAW;AAChB,SAAK,gBAAgB;AAAA,SAChB;AACL,SAAK,eAAe;AACpB,SAAK,WAAW;AAChB,SAAK,gBAAgB;AAAA;AAGvB,OAAK;AAAA;AAGP,OAAO,YAAY;AAAA,EACjB,aAAa;AAAA,EACb,MAAM,WAAW;AAEf,SAAK,SAAS,KAAK,aAAa,CAAC,KAAK,EAAE,GAAG,KAAK,EAAE,GAAG,KAAK,EAAE,GAAG,KAAK,EAAE,IACtC,CAAC,KAAK,EAAE,GAAG,KAAK,EAAE,GAAG,KAAK,EAAE,GAAG,KAAK,EAAE;AAAA;AAAA,EAGxE,gBAAgB,WAAW;AACzB,WAAO,KAAK;AAAA;AAAA,EAEd,kBAAkB,SAAS,SAAQ;AACjC,QAAI,IAAI,SAAS,SAAQ,KAAK,QAAQ,KAAK,cAC3B,CAAC,KAAK,EAAE,GAAG,KAAK,EAAE,GAAG,KAAK,EAAE,GAAG,KAAK,EAAE,IACtC,CAAC,KAAK,EAAE,GAAG,KAAK,EAAE,GAAG,KAAK,EAAE,GAAG,KAAK,EAAE;AAEtD,WAAO,KAAK,SAAS,CAAC,KAAK,EAAE,GAAG,KAAK,EAAE,GAAG,KAAK,EAAE,GAAG,KAAK,EAAE,IAC3B,CAAC,KAAK,EAAE,GAAG,KAAK,EAAE,GAAG,KAAK,EAAE,GAAG,KAAK,EAAE,IACxC;AAAA;AAAA,EAEhC,oBAAoB,SAAS,SAAO;AAClC,QAAI,IAAI,SAAS,SAAQ,KAAK,QAAQ,KAAK,cAC3B,CAAC,KAAK,EAAE,GAAG,KAAK,EAAE,GAAG,KAAK,EAAE,GAAG,KAAK,EAAE,IACtC,CAAC,KAAK,EAAE,GAAG,KAAK,EAAE,GAAG,KAAK,EAAE,GAAG,KAAK,EAAE;AAEtD,QAAI,aAAa,KAAK,cAAc,CAAC,KAAK,EAAE,GAAG,KAAK,EAAE,GAAG,KAAK,EAAE,GAAG,KAAK,EAAE,IAC1D,CAAC,KAAK,EAAE,GAAG,KAAK,EAAE,GAAG,KAAK,EAAE,GAAG,KAAK,EAAE,IAAI;AAC1D,QAAI,MAAM,KAAK,KAAK,WAAW,IAAI,WAAW,IAAI,WAAW,IAAI,WAAW;AAC5E,QAAI;AACJ,QAAI,MAAM,GAAE;AACV,gBAAU,EAAC,GAAG,WAAW,IAAE,KAAK,GAAG,WAAW,IAAE;AAAA,WAC3C;AACL,gBAAU,EAAC,GAAG,GAAG,GAAG;AAAA;AAEtB,WAAO;AAAA;AAAA,EAET,uBAAuB,SAAS,SAAO;AACrC,QAAI,IAAI,SAAS,SAAQ,KAAK,QAAQ,KAAK,cAC3B,CAAC,KAAK,EAAE,GAAG,KAAK,EAAE,GAAG,KAAK,EAAE,GAAG,KAAK,EAAE,IACtC,CAAC,KAAK,EAAE,GAAG,KAAK,EAAE,GAAG,KAAK,EAAE,GAAG,KAAK,EAAE;AAEtD,QAAI,aAAa,KAAK,cAAc,CAAC,KAAK,EAAE,GAAG,KAAK,EAAE,GAAG,KAAK,EAAE,GAAG,KAAK,EAAE,IAC1D,CAAC,KAAK,EAAE,GAAG,KAAK,EAAE,GAAG,KAAK,EAAE,GAAG,KAAK,EAAE,IAAI;AAC1D,QAAI,MAAM,KAAK,KAAK,WAAW,IAAI,WAAW,IAAI,WAAW,IAAI,WAAW;AAC5E,QAAI;AACJ,QAAI,MAAM,GAAE;AACV,gBAAU,EAAC,GAAG,WAAW,IAAE,KAAK,GAAG,WAAW,IAAE;AAAA,WAC3C;AACL,gBAAU,EAAC,GAAG,GAAG,GAAG;AAAA;AAEtB,QAAI,QAAQ,KAAK,SAAS,CAAC,KAAK,EAAE,GAAG,KAAK,EAAE,GAAG,KAAK,EAAE,GAAG,KAAK,EAAE,IAChC,CAAC,KAAK,EAAE,GAAG,KAAK,EAAE,GAAG,KAAK,EAAE,GAAG,KAAK,EAAE,IACxC;AAC9B,WAAO,EAAC,GAAG,MAAM,GAAG,GAAG,MAAM,GAAG,UAAU,QAAQ,GAAG,UAAU,QAAQ;AAAA;AAAA;AAI3E,6BAA6B,IAAI,IAAI,GAAE;AACrC,SAAO;AAAA,IAAC,GAAI,KAAI,KAAK,IAAG,IAAG,KAAK,GAAG,MAAK,IAAI,IAAG,IAAG,KAAK,GAAG;AAAA,IACxD,GAAI,KAAI,KAAK,IAAG,IAAG,KAAK,GAAG,MAAK,IAAI,IAAG,IAAG,KAAK,GAAG;AAAA;AAAA;AAItD,yBAAyB,IAAI,IAAI,GAAE;AACjC,MAAI,aAAa,eACP,CAAC,IAAG,IAAG,KAAK,GAAG,KAAK,IAAG,IAAG,KAAK,GAAG,KAAK,IAAG,IAAG,KAAK,GAAG,MACrD,CAAC,IAAG,IAAG,KAAK,GAAG,KAAK,IAAG,IAAG,KAAK,GAAG,KAAK,IAAG,IAAG,KAAK,GAAG,MACrD;AACV,SAAO;AAAA;AAGT,kBAAkB,SAAQ,cAAc,MAAM,IAAI,IAAG;AACnD,MAAI,QAAQ;AACZ,MAAI,IAAI,UAAO;AACf,MAAI,OAAQ,WAAS,KAAK,IAAI,IAAI,MAAI;AAEtC,SAAO,QAAQ,MAAM;AACnB,QAAI,mBAAmB,KAAK,IAAI,IAAI,IAAI;AACxC,QAAI,mBAAmB,KAAK,IAAI,IAAI,IAAI;AACxC,QAAI,kBAAkB,KAAK,IAAI,UAAS,oBAAkB;AAC1D,QAAI,kBAAkB,KAAK,IAAI,UAAS,oBAAkB;AAC1D,QAAI,kBAAkB,OAAO;AAC3B,cAAQ;AACR,WAAK;AAAA,eACI,kBAAkB,OAAO;AAClC,cAAQ;AACR,WAAK;AAAA,WACA;AACL,cAAQ;AAAA;AAAA;AAIZ,SAAO;AAAA;AAGT,wBAAwB,IAAI,IAAI,GAAE;AAChC,MAAI,IAAK,KAAI,KAAM,KAAI,KAAK,GAAG,KAAK,IAAK,KAAI,KAAK,IAAI,GAAG,KAAK,IAAI,IAAI,GAAG;AACzE,MAAI,IAAK,KAAI,KAAM,KAAI,KAAK,GAAG,KAAK,IAAK,KAAI,KAAK,IAAI,GAAG,KAAK,IAAI,IAAI,GAAG;AACzE,SAAO,EAAC,GAAM;AAAA;AAGhB,oBAAoB,IAAI,IAAI,GAAE;AAC5B,MAAI,IAAK,KAAI,KAAM,KAAI,KAAM,KAAI,KAAK,GAAG,KAAK,IAAK,KAAI,KAAM,KAAI,KAAK,IAAI,GAAG,KAC7E,IAAK,KAAI,KAAK,IAAI,IAAI,GAAG,KAAK,IAAI,IAAI,IAAI,GAAG;AAC7C,MAAI,IAAK,KAAI,KAAM,KAAI,KAAM,KAAI,KAAK,GAAG,KAAK,IAAK,KAAI,KAAM,KAAI,KAAK,IAAI,GAAG,KAC7E,IAAK,KAAI,KAAK,IAAI,IAAI,GAAG,KAAK,IAAI,IAAI,IAAI,GAAG;AAE7C,SAAO,EAAC,GAAM;AAAA;AAGhB,+BAA+B,IAAI,IAAI,GAAG;AACxC,MAAI,MAAM,QAAW;AACnB,QAAI;AAAA;AAEL,MAAI,KAAK,GAAG,KAAK,IAAI,GAAG,KAAK,GAAG;AAChC,MAAI,KAAK,GAAG,KAAK,IAAI,GAAG,KAAK,GAAG;AAChC,MAAI,KAAK,IAAI,GAAG,KAAK,IAAI,GAAG;AAC5B,MAAI,KAAK,IAAI,GAAG,KAAK,IAAI,GAAG;AAE5B,MAAI,IAAI,IAAK,MAAK,KAAK,KAAK;AAC5B,MAAI,KAAI,IAAK,MAAK,KAAK,KAAK;AAC5B,MAAI,IAAI,KAAK,KAAK,KAAK;AAEvB,MAAG,MAAM,GAAE;AACT,WAAO,IAAI,KAAK,KAAK,KAAK,IAAI,GAAG,KAAK,GAAG,IAAI,KAAK,KAAK,IAAI,GAAG,KAAK,GAAG,IAAI;AAAA;AAE5E,MAAI,IAAI,KAAG,KAAE;AACb,MAAI,IAAI,IAAE;AACV,MAAI,IAAI,IAAI;AACZ,MAAI,IAAI,IAAI,IAAE;AAEd,SAAQ,KAAK,KAAK,KAAG,IACnB,KAAE,KAAK,KAAK,IAAE,IAAE,KAAG,IAAE,KAAK,KAAK,IAAE,IAAE,KACnC,IAAE,KAAK,IAAI,KAAK,IACb,KAAE,KAAK,KAAK,IAAE,IAAE,MAAK,KAAE,KAAK,KAAK,IAAE,IAAE;AAAA;AAO7C,IAAI,UAAU;AAAA,EACZ;AAAA,EACA;AAAA,EACA,CAAC,qBAA4C;AAAA,EAC7C,CAAC,GAAE,qBAA4C;AAAA,EAC/C,CAAC,sBAA4C,qBAA2C,qBAA4C;AAAA,EACpI,CAAC,GAAE,qBAA4C,oBAA2C,oBAA4C;AAAA,EACtI,CAAC,oBAA2C,qBAA4C,qBAA4C,oBAA2C,oBAA4C;AAAA,EAC3N,CAAC,GAAG,oBAA2C,qBAA4C,qBAA4C,oBAA2C,qBAA4C;AAAA,EAC9N,CAAC,qBAA4C,oBAA2C,oBAA4C,mBAA2C,qBAA4C,oBAA2C,qBAA4C;AAAA,EAClT,CAAC,GAAE,qBAA4C,oBAA2C,qBAA4C,oBAA2C,qBAA4C,oBAA2C,qBAA4C;AAAA,EACpT,CAAC,sBAA4C,qBAA2C,qBAA4C,oBAA2C,qBAA4C,oBAA2C,qBAA4C,oBAA2C,qBAA4C;AAAA,EACzY,CAAC,GAAE,sBAA4C,qBAA2C,qBAA4C,oBAA2C,qBAA4C,oBAA2C,qBAA4C,oBAA2C,oBAA4C;AAAA,EAC3Y,CAAC,qBAA4C,oBAA2C,qBAA4C,oBAA2C,qBAA4C,oBAA2C,qBAA4C,oBAA2C,qBAA4C,oBAA2C,qBAA4C;AAAA,EAChe,CAAC,GAAE,qBAA4C,oBAA2C,sBAA4C,qBAA2C,qBAA4C,oBAA2C,qBAA4C,oBAA2C,qBAA4C,oBAA2C,qBAA4C;AAAA,EACle,CAAC,sBAA4C,qBAA2C,sBAA4C,qBAA2C,qBAA4C,oBAA2C,qBAA4C,oBAA2C,oBAA4C,mBAA2C,qBAA4C,oBAA2C,qBAA4C;AAAA,EACvjB,CAAC,GAAE,sBAA4C,qBAA2C,qBAA4C,oBAA2C,qBAA4C,oBAA2C,qBAA4C,oBAA2C,qBAA4C,oBAA2C,oBAA4C,mBAA2C,qBAA4C;AAAA,EACzjB,CAAC,sBAA4C,qBAA2C,qBAA4C,oBAA2C,sBAA4C,qBAA2C,qBAA4C,oBAA2C,oBAA4C,mBAA2C,qBAA4C,oBAA2C,qBAA4C,oBAA2C,qBAA4C;AAAA,EAC9oB,CAAC,GAAE,sBAA4C,qBAA2C,qBAA4C,oBAA2C,qBAA4C,oBAA2C,qBAA4C,oBAA2C,qBAA4C,oBAA2C,qBAA4C,oBAA2C,qBAA4C,oBAA2C,qBAA4C;AAAA,EAChpB,CAAC,qBAA4C,oBAA2C,qBAA4C,oBAA2C,sBAA4C,qBAA2C,qBAA4C,oBAA2C,qBAA4C,oBAA2C,qBAA4C,oBAA2C,qBAA4C,oBAA2C,qBAA4C,oBAA2C,qBAA4C;AAAA,EACruB,CAAC,GAAE,sBAA4C,qBAA2C,sBAA4C,qBAA2C,sBAA4C,qBAA2C,oBAA4C,mBAA2C,qBAA4C,oBAA2C,qBAA4C,oBAA2C,qBAA4C,oBAA2C,mBAA4C,kBAA2C,qBAA4C;AAAA,EACvuB,CAAC,sBAA4C,qBAA2C,sBAA4C,qBAA2C,sBAA4C,qBAA2C,qBAA4C,oBAA2C,oBAA4C,mBAA2C,qBAA4C,oBAA2C,qBAA4C,oBAA2C,oBAA4C,mBAA2C,qBAA4C,oBAA2C,qBAA4C;AAAA,EAC5zB,CAAC,GAAE,qBAA4C,oBAA2C,qBAA4C,oBAA2C,qBAA4C,oBAA2C,qBAA4C,oBAA2C,qBAA4C,oBAA2C,qBAA4C,oBAA2C,qBAA4C,oBAA2C,qBAA4C,oBAA2C,qBAA4C,oBAA2C,qBAA4C;AAAA,EAC9zB,CAAC,sBAA4C,qBAA2C,sBAA4C,qBAA2C,sBAA4C,qBAA2C,oBAA4C,mBAA2C,qBAA4C,oBAA2C,qBAA4C,oBAA2C,qBAA4C,oBAA2C,qBAA4C,oBAA2C,oBAA4C,mBAA2C,qBAA4C,oBAA2C,qBAA4C;AAAA,EACn5B,CAAC,GAAE,qBAA4C,oBAA2C,sBAA4C,qBAA2C,qBAA4C,oBAA2C,qBAA4C,oBAA2C,qBAA4C,oBAA2C,qBAA4C,oBAA2C,qBAA4C,oBAA2C,qBAA4C,oBAA2C,qBAA4C,oBAA2C,qBAA4C,oBAA2C,qBAA4C;AAAA,EACr5B,CAAC,sBAA4C,qBAA2C,qBAA4C,oBAA2C,qBAA4C,oBAA2C,qBAA4C,oBAA2C,qBAA4C,oBAA2C,qBAA4C,oBAA2C,qBAA4C,oBAA2C,oBAA4C,mBAA2C,qBAA4C,oBAA2C,qBAA4C,oBAA2C,qBAA4C,oBAA2C,qBAA4C;AAAA;AAI5+B,IAAI,UAAU;AAAA,EACZ;AAAA,EAAG;AAAA,EACH,CAAC,GAAI;AAAA,EACL,CAAC,oBAA2C,oBAA2C;AAAA,EACvF,CAAC,oBAA2C,oBAA2C,qBAA2C;AAAA,EAClI,CAAC,oBAA2C,qBAA2C,qBAA2C,qBAA2C;AAAA,EAC7K,CAAC,oBAA2C,oBAA2C,qBAA2C,qBAA2C,qBAA2C;AAAA,EACxN,CAAC,oBAA2C,oBAA2C,oBAA2C,qBAA2C,qBAA2C,oBAA2C;AAAA,EACnQ,CAAC,mBAA2C,mBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C;AAAA,EAC9S,CAAC,oBAA2C,oBAA2C,oBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C;AAAA,EACzV,CAAC,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,oBAA2C,oBAA2C,qBAA2C;AAAA,EACpY,CAAC,oBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,oBAA2C,oBAA2C,qBAA2C;AAAA,EAC/a,CAAC,qBAA2C,qBAA2C,oBAA2C,oBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C;AAAA,EAC1d,CAAC,oBAA2C,qBAA2C,qBAA2C,oBAA2C,oBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C;AAAA,EACrgB,CAAC,oBAA2C,oBAA2C,oBAA2C,oBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C;AAAA,EAChjB,CAAC,oBAA2C,qBAA2C,qBAA2C,oBAA2C,oBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C;AAAA,EAC3lB,CAAC,oBAA2C,oBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,sBAA2C,sBAA2C,sBAA2C;AAAA,EACtoB,CAAC,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,oBAA2C,oBAA2C,qBAA2C;AAAA,EACjrB,CAAC,oBAA2C,oBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,oBAA2C,oBAA2C,qBAA2C;AAAA,EAC5tB,CAAC,oBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,oBAA2C,oBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,kBAA2C,kBAA2C,qBAA2C,qBAA2C,oBAA2C,oBAA2C,sBAA2C;AAAA,EACvwB,CAAC,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,sBAA2C;AAAA,EAClzB,CAAC,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,oBAA2C,oBAA2C,sBAA2C,sBAA2C,sBAA2C,sBAA2C,sBAA2C;AAAA,EAC71B,CAAC,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,sBAA2C,sBAA2C,qBAA2C,qBAA2C,oBAA2C;AAAA,EACx4B,CAAC,qBAA2C,oBAA2C,oBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,sBAA2C,sBAA2C,sBAA2C;AAAA,EACn7B,CAAC,qBAA2C,qBAA2C,oBAA2C,oBAA2C,qBAA2C,qBAA2C,oBAA2C,oBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,oBAA2C,oBAA2C,qBAA2C,qBAA2C,qBAA2C,qBAA2C,sBAA2C,sBAA2C,oBAA2C;AAAA;AAIh+B,IAAI,uBAAuB,CAAC,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG;AAG9D,mBAAmB,GAAG,GAAG;AACvB,SAAO,qBAAqB,GAAG;AAAA;AAMjC,uBAAuB,YAAY,GAAG,IAAI;AAExC,MAAI,IAAI,GAAG,SAAS,GAChB,KACA,OACA;AACJ,MAAI,MAAM,GAAG;AACX,WAAO;AAAA;AAIT,MAAI,eAAe,GAAG;AACpB,YAAQ;AACR,SAAK,IAAI,GAAG,KAAK,GAAG,KAAK;AACvB,eAAS,UAAU,GAAG,KAAK,KAAK,IAAI,IAAI,GAAG,IAAI,KAAK,KAAK,IAAI,GAAG,KAAK,GAAG;AAAA;AAE1E,WAAO;AAAA,SACF;AAGL,UAAM,IAAI,MAAM;AAChB,SAAK,IAAI,GAAG,IAAI,GAAG,KAAK;AACtB,UAAI,KAAK,IAAK,IAAG,IAAI,KAAK,GAAG;AAAA;AAE/B,WAAO,cAAc,aAAa,GAAG,GAAG;AAAA;AAAA;AAI5C,WAAW,IAAI,IAAI,GAAG;AACpB,MAAI,QAAQ,cAAc,GAAG,GAAG;AAChC,MAAI,QAAQ,cAAc,GAAG,GAAG;AAChC,MAAI,WAAW,QAAQ,QAAQ,QAAQ;AACvC,SAAO,KAAK,KAAK;AAAA;AAGnB,2BAA2B,IAAI,IAAI,GAAG;AACpC,MAAI,GAAG,KAAK,GAAG;AAMf,MAAI,MAAM,QAAW;AACnB,QAAI;AAAA;AAEN,MAAI,IAAI;AAER,MAAI,IAAI;AACR,QAAM;AACN,OAAK,IAAI,GAAG,IAAI,GAAG,KAAK;AACtB,iBAAa,IAAI,QAAQ,GAAG,KAAK;AACjC,WAAO,QAAQ,GAAG,KAAK,EAAE,IAAI,IAAI;AAAA;AAEnC,SAAO,IAAI;AAAA;;;AC5Rb;AAGA,IAAI,MAAM,KAAK,KAAK;AAUpB,2BAA2B,IAAI,IAAI,IAAI,IAAI;AACzC,MAAI,OAAQ,KAAK,KAAK,KAAK,KAAK,IAAK,KAAK;AAC1C,MAAI,MAAO,KAAK,KAAK,KAAK;AAM1B,MAAI,MAAO,GAAK;AAAE,UAAO;AAAA;AACzB,MAAI,MAAM,IAAM;AAAE,UAAM;AAAA;AAExB,SAAO,OAAO,KAAK,KAAK;AAAA;AAS1B,wBAAwB,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,SAAS,SAAS;AAOxE,MAAI,MAAO,UAAS,MAAG,MAAI,IAAI,UAAS,MAAG,MAAI;AAC/C,MAAI,MAAM,CAAC,UAAS,MAAG,MAAI,IAAI,UAAS,MAAG,MAAI;AAE/C,MAAI,QAAU,KAAK;AACnB,MAAI,QAAU,KAAK;AACnB,MAAI,SAAS,MAAM;AACnB,MAAI,SAAS,MAAM;AAOnB,MAAI,WAAY,QAAQ,QAAU,QAAQ,SAAW,QAAQ;AAE7D,MAAI,WAAW,GAAG;AAEhB,eAAW;AAAA;AAGb,cAAe,QAAQ,SAAW,QAAQ;AAC1C,aAAW,KAAK,KAAK,YAAa,QAAO,KAAK,KAAK;AAEnD,MAAI,MAAM,WAAY,KAAG,KAAK;AAC9B,MAAI,MAAM,WAAW,CAAC,KAAG,KAAK;AAO9B,MAAI,KAAK,UAAQ,MAAM,UAAQ,MAAO,MAAG,MAAI;AAC7C,MAAI,KAAK,UAAQ,MAAM,UAAQ,MAAO,MAAG,MAAI;AAM7C,MAAI,MAAQ,OAAM,OAAO;AACzB,MAAI,MAAQ,OAAM,OAAO;AACzB,MAAI,MAAO,EAAC,MAAM,OAAO;AACzB,MAAI,MAAO,EAAC,MAAM,OAAO;AAEzB,MAAI,SAAS,kBAAkB,GAAG,GAAG,KAAK;AAC1C,MAAI,cAAc,kBAAkB,KAAK,KAAK,KAAK;AAEnD,MAAI,OAAO,KAAK,cAAc,GAAG;AAC/B,mBAAe;AAAA;AAEjB,MAAI,OAAO,KAAK,cAAc,GAAG;AAC/B,mBAAe;AAAA;AAGjB,SAAO,CAAE,IAAI,IAAI,QAAQ;AAAA;AAO3B,8BAA8B,QAAQ,aAAa;AACjD,MAAI,QAAQ,IAAE,IAAI,KAAK,IAAI,cAAY;AAEvC,MAAI,KAAK,KAAK,IAAI;AAClB,MAAI,KAAK,KAAK,IAAI;AAClB,MAAI,KAAK,KAAK,IAAI,SAAS;AAC3B,MAAI,KAAK,KAAK,IAAI,SAAS;AAE3B,SAAO,CAAE,IAAI,IAAI,KAAK,KAAG,OAAO,KAAK,KAAG,OAAO,KAAK,KAAG,OAAO,KAAK,KAAG,OAAO,IAAI;AAAA;AAGpE,qBAAS,IAAI,IAAI,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,IAAI;AAC3D,MAAI,UAAU,KAAK,IAAI,MAAM,MAAM;AACnC,MAAI,UAAU,KAAK,IAAI,MAAM,MAAM;AAInC,MAAI,MAAO,UAAS,MAAG,MAAI,IAAI,UAAS,MAAG,MAAI;AAC/C,MAAI,MAAM,CAAC,UAAS,MAAG,MAAI,IAAI,UAAS,MAAG,MAAI;AAE/C,MAAI,QAAQ,KAAK,QAAQ,GAAG;AAE1B,WAAO;AAAA;AAGT,MAAI,OAAO,KAAK,OAAO,GAAG;AAExB,WAAO;AAAA;AAMT,OAAK,KAAK,IAAI;AACd,OAAK,KAAK,IAAI;AAEd,MAAI,SAAU,MAAM,MAAQ,MAAK,MAAO,MAAM,MAAQ,MAAK;AAC3D,MAAI,SAAS,GAAG;AACd,UAAM,KAAK,KAAK;AAChB,UAAM,KAAK,KAAK;AAAA;AAMlB,MAAI,KAAK,eAAe,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,SAAS;AAEjE,MAAI,SAAS;AACb,MAAI,SAAS,GAAG;AAChB,MAAI,cAAc,GAAG;AAKrB,MAAI,WAAW,KAAK,IAAI,KAAK,KAAK,KAAK,IAAI,eAAgB,OAAM,KAAK;AACtE,iBAAe;AAEf,WAAS,IAAI,GAAG,IAAI,UAAU,KAAK;AACjC,WAAO,KAAK,qBAAqB,QAAQ;AACzC,cAAU;AAAA;AAMZ,SAAO,OAAO,IAAI,SAAU,OAAO;AACjC,aAAS,KAAI,GAAG,KAAI,MAAM,QAAQ,MAAK,GAAG;AACxC,UAAI,IAAI,MAAM,KAAI;AAClB,UAAI,IAAI,MAAM,KAAI;AAGlB,WAAK;AACL,WAAK;AAGL,UAAI,KAAK,UAAQ,IAAI,UAAQ;AAC7B,UAAI,KAAK,UAAQ,IAAI,UAAQ;AAG7B,YAAM,KAAI,KAAK,KAAK,GAAG;AACvB,YAAM,KAAI,KAAK,KAAK,GAAG;AAAA;AAGzB,WAAO;AAAA;AAAA;;;ACpLI,qBAAS,IAAI,IAAI,IAAG,IAAI,aAAa,cAAa,WAAW,GAAE,GAAG;AAC/E,SAAO,IAAI,IAAI,IAAI,IAAI,IAAG,IAAI,aAAa,cAAa,WAAW,GAAE;AAAA;AAGvE,aAAa,IAAI,IAAG,IAAG,IAAI,aAAa,cAAa,WAAU,GAAE,GAAG;AAChE,MAAI,UAAS;AACb,MAAI,iBAAiB;AACrB,MAAI,SAAS;AACb,MAAI,MAAM,YAAI,IAAI,IAAG,IAAG,IAAI,aAAa,cAAa,WAAU,GAAE;AAClE,MAAI,QAAQ,SAAS,GAAE;AACnB,QAAI,QAAQ,IAAI,eAAO,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE;AACnE,QAAI,cAAc,MAAM;AACxB,eAAU;AACV,mBAAe,KAAK;AACpB,WAAO,KAAK;AAAA;AAEhB,OAAK,SAAS;AACd,OAAK,iBAAiB;AACtB,OAAK,SAAS;AAAA;AAGlB,IAAI,YAAY;AAAA,EACd,aAAa;AAAA,EACb,MAAM,WAAW;AAAA;AAAA,EAKjB,gBAAgB,WAAW;AACzB,WAAO,KAAK;AAAA;AAAA,EAEd,kBAAkB,SAAS,gBAAgB;AAEzC,QAAG,iBAAiB,GAAE;AACpB,uBAAiB;AAAA,eACT,iBAAiB,KAAK,QAAO;AACrC,uBAAiB,KAAK;AAAA;AAExB,QAAI,IAAI,KAAK,eAAe,SAAS;AAErC,WAAM,KAAK,eAAe,MAAM,kBAAkB,KAAK,eAAe,KAAK,GAAE;AAC3E;AAAA;AAEF,QAAG,IAAE,KAAK,eAAe,SAAO,GAAE;AAC9B;AAAA;AAGJ,QAAI,eAAe;AACnB,aAAQ,IAAE,GAAG,IAAE,GAAG,KAAI;AAClB,sBAAgB,KAAK,eAAe;AAAA;AAGxC,WAAO,KAAK,OAAO,GAAG,iBAAiB,iBAAiB;AAAA;AAAA,EAE1D,oBAAoB,SAAS,gBAAgB;AAC3C,QAAG,iBAAiB,GAAE;AAClB,uBAAiB;AAAA,eACP,iBAAiB,KAAK,QAAO;AACvC,uBAAiB,KAAK;AAAA;AAEtB,QAAI,IAAI,KAAK,eAAe,SAAS;AAErC,WAAM,KAAK,eAAe,MAAM,kBAAkB,KAAK,eAAe,KAAK,GAAE;AAC7E;AAAA;AAEA,QAAG,IAAE,KAAK,eAAe,SAAO,GAAE;AAC9B;AAAA;AAGJ,QAAI,eAAe;AACnB,aAAQ,IAAE,GAAG,IAAE,GAAG,KAAI;AAClB,sBAAgB,KAAK,eAAe;AAAA;AAG5C,WAAO,KAAK,OAAO,GAAG,mBAAmB,iBAAiB;AAAA;AAAA,EAE5D,uBAAuB,SAAS,gBAAe;AAC7C,QAAI,UAAU,KAAK,mBAAmB;AACtC,QAAI,QAAQ,KAAK,iBAAiB;AAClC,WAAO,EAAC,GAAG,MAAM,GAAG,GAAG,MAAM,GAAG,UAAU,QAAQ,GAAG,UAAU,QAAQ;AAAA;AAAA;;;ACrF5D,wBAAS,IAAI,IAAI,IAAI,IAAI;AACtC,SAAO,IAAI,eAAe,IAAI,IAAI,IAAI;AAAA;AAIxC,wBAAwB,IAAI,IAAI,IAAI,IAAG;AACrC,OAAK,KAAK;AACV,OAAK,KAAK;AACV,OAAK,KAAK;AACV,OAAK,KAAK;AAAA;AAGZ,eAAe,UAAU,iBAAiB,WAAU;AAClD,SAAO,KAAK,KAAK,KAAK,IAAI,KAAK,KAAK,KAAK,IAAI,KACtC,KAAK,IAAI,KAAK,KAAK,KAAK,IAAI;AAAA;AAGrC,eAAe,UAAU,mBAAmB,SAAS,KAAI;AACvD,MAAI,WAAW,MAAM,KAAK,KAAK,KAAK,IAAI,KAAK,KAAK,KAAK,IAAI,KACpD,KAAK,IAAI,KAAK,KAAK,KAAK,IAAI;AAEnC,MAAI,YAAa,MAAK,KAAK,KAAK,MAAI;AACpC,MAAI,YAAa,MAAK,KAAK,KAAK,MAAI;AACpC,SAAO,EAAE,GAAG,KAAK,KAAK,WAAW,GAAG,KAAK,KAAK;AAAA;AAEhD,eAAe,UAAU,qBAAqB,WAAU;AACtD,MAAI,SAAS,KAAK,KAAM,MAAK,KAAK,KAAK,MAAO,MAAK,KAAK,KAAK,MAChD,MAAK,KAAK,KAAK,MAAO,MAAK,KAAK,KAAK;AAClD,SAAO,EAAE,GAAI,MAAK,KAAK,KAAK,MAAI,QAAQ,GAAI,MAAK,KAAK,KAAK,MAAI;AAAA;AAEjE,eAAe,UAAU,wBAAwB,SAAS,KAAI;AAC5D,MAAI,QAAQ,KAAK,iBAAiB;AAClC,MAAI,UAAU,KAAK;AACnB,SAAO,EAAC,GAAG,MAAM,GAAG,GAAG,MAAM,GAAG,UAAU,QAAQ,GAAG,UAAU,QAAQ;AAAA;;;AC5B1D,iCAAS,WAAW;AACjC,MAAI,UAAS;AACb,MAAI,kBAAkB;AACtB,MAAI,YAAY;AAEhB,yBAAuB,QAAO;AAC5B,QAAG,CAAC,QAAO;AAAC,aAAO;AAAA;AACnB,QAAI,SAAS,cAAM;AACnB,QAAI,MAAM,CAAC,GAAG;AACd,QAAI,aAAa,CAAC,GAAG;AACrB,QAAI;AACJ,QAAI;AACJ,aAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAI;AAErC,UAAG,OAAO,GAAG,OAAO,KAAI;AACtB,cAAM,CAAC,OAAO,GAAG,IAAI,OAAO,GAAG;AAC/B,oBAAY,CAAC,IAAI,IAAI,IAAI;AACzB,kBAAU,KAAK;AAAA,iBACP,OAAO,GAAG,OAAO,KAAI;AAC7B,cAAM,CAAC,OAAO,GAAG,KAAK,IAAI,IAAI,OAAO,GAAG,KAAK,IAAI;AACjD,oBAAY,CAAC,IAAI,IAAI,IAAI;AACzB,kBAAU,KAAK;AAAA,iBAGT,OAAO,GAAG,OAAO,KAAI;AAC3B,kBAAS,UAAS,KAAK,KAAK,KAAK,IAAI,IAAI,KAAK,OAAO,GAAG,IAAI,KAAK,KAAK,IAAI,IAAI,KAAK,OAAO,GAAG,IAAI;AACjG,kBAAU,KAAK,IAAI,eAAe,IAAI,IAAI,OAAO,GAAG,IAAI,IAAI,IAAI,OAAO,GAAG;AAC1E,cAAM,CAAC,OAAO,GAAG,IAAI,OAAO,GAAG;AAAA,iBACvB,OAAO,GAAG,OAAO,KAAI;AAC7B,kBAAS,UAAS,KAAK,KAAK,KAAK,IAAI,OAAO,GAAG,IAAI,KAAK,KAAK,IAAI,OAAO,GAAG,IAAI;AAC/E,kBAAU,KAAK,IAAI,eAAe,IAAI,IAAI,OAAO,GAAG,KAAK,IAAI,IAAI,IAAI,IAAI,OAAO,GAAG,KAAK,IAAI;AAC5F,cAAM,CAAC,OAAO,GAAG,KAAK,IAAI,IAAI,OAAO,GAAG,KAAK,IAAI;AAAA,iBACzC,OAAO,GAAG,OAAO,KAAI;AAC7B,kBAAS,UAAS,KAAK,IAAI,IAAI,KAAK,OAAO,GAAG;AAC9C,kBAAU,KAAK,IAAI,eAAe,IAAI,IAAI,OAAO,GAAG,IAAI,IAAI,IAAI,IAAI;AACpE,YAAI,KAAK,OAAO,GAAG;AAAA,iBACX,OAAO,GAAG,OAAO,KAAI;AAC7B,kBAAS,UAAS,KAAK,IAAI,OAAO,GAAG;AACrC,kBAAU,KAAK,IAAI,eAAe,IAAI,IAAI,IAAI,KAAK,OAAO,GAAG,IAAI,IAAI,IAAI,IAAI;AAC7E,YAAI,KAAK,OAAO,GAAG,KAAK,IAAI;AAAA,iBACpB,OAAO,GAAG,OAAO,KAAI;AAC7B,kBAAS,UAAS,KAAK,IAAI,IAAI,KAAK,OAAO,GAAG;AAC9C,kBAAU,KAAK,IAAI,eAAe,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,OAAO,GAAG;AACpE,YAAI,KAAK,OAAO,GAAG;AAAA,iBACX,OAAO,GAAG,OAAO,KAAI;AAC7B,kBAAS,UAAS,KAAK,IAAI,OAAO,GAAG;AACrC,kBAAU,KAAK,IAAI,eAAe,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAAK,OAAO,GAAG;AAC7E,YAAI,KAAK,OAAO,GAAG,KAAK,IAAI;AAAA,iBAEnB,OAAO,GAAG,OAAO,OAAO,OAAO,GAAG,OAAO,KAAI;AACtD,kBAAS,UAAS,KAAK,KAAK,KAAK,IAAI,UAAU,KAAK,IAAI,IAAI,KAAK,KAAK,IAAI,UAAU,KAAK,IAAI,IAAI;AACjG,kBAAU,KAAK,IAAI,eAAe,IAAI,IAAI,UAAU,IAAI,IAAI,IAAI,UAAU;AAC1E,cAAM,CAAC,UAAU,IAAI,UAAU;AAAA,iBAGzB,OAAO,GAAG,OAAO,KAAI;AAC3B,gBAAQ,IAAI,eAAO,IAAI,IAAI,IAAI,IAAK,OAAO,GAAG,IAAI,OAAO,GAAG,IAAK,OAAO,GAAG,IAAI,OAAO,GAAG,IAAK,OAAO,GAAG,IAAI,OAAO,GAAG;AACtH,kBAAS,UAAS,MAAM;AACxB,cAAM,CAAC,OAAO,GAAG,IAAI,OAAO,GAAG;AAC/B,kBAAU,KAAK;AAAA,iBACP,OAAO,GAAG,OAAO,KAAI;AAC7B,gBAAQ,IAAI,eAAO,IAAI,IAAI,IAAI,IAAK,IAAI,KAAK,OAAO,GAAG,IAAI,IAAI,KAAK,OAAO,GAAG,IAAK,IAAI,KAAK,OAAO,GAAG,IAAI,IAAI,KAAK,OAAO,GAAG,IAAK,IAAI,KAAK,OAAO,GAAG,IAAI,IAAI,KAAK,OAAO,GAAG;AAC5K,kBAAS,UAAS,MAAM;AACxB,cAAM,CAAC,OAAO,GAAG,KAAK,IAAI,IAAI,OAAO,GAAG,KAAK,IAAI;AACjD,kBAAU,KAAK;AAAA,iBACP,OAAO,GAAG,OAAO,KAAI;AAC7B,YAAG,IAAE,KAAK,CAAC,KAAI,KAAI,KAAI,KAAK,QAAQ,OAAO,IAAE,GAAG,MAAM,IAAG;AACvD,kBAAQ,IAAI,eAAO,IAAI,IAAI,IAAI,IAAK,IAAE,IAAI,KAAK,OAAO,IAAE,GAAG,OAAO,IAAE,GAAG,SAAS,IAAI,IAAE,IAAI,KAAK,OAAO,IAAE,GAAG,OAAO,IAAE,GAAG,SAAS,IAAI,OAAO,GAAG,IAAI,OAAO,GAAG,IAAK,OAAO,GAAG,IAAI,OAAO,GAAG;AAAA,eACpL;AACL,kBAAQ,IAAI,eAAO,IAAI,IAAI,IAAI,IAAK,IAAI,IAAI,IAAI,IAAI,OAAO,GAAG,IAAI,OAAO,GAAG,IAAK,OAAO,GAAG,IAAI,OAAO,GAAG;AAAA;AAE3G,kBAAS,UAAS,MAAM;AACxB,cAAM,CAAC,OAAO,GAAG,IAAI,OAAO,GAAG;AAC/B,kBAAU,KAAK;AAAA,iBACN,OAAO,GAAG,OAAO,KAAI;AAC9B,YAAG,IAAE,KAAK,CAAC,KAAI,KAAI,KAAI,KAAK,QAAQ,OAAO,IAAE,GAAG,MAAM,IAAG;AACvD,kBAAQ,IAAI,eAAO,IAAI,IAAI,IAAI,IAAK,IAAI,KAAK,MAAM,EAAE,IAAI,MAAM,EAAE,GAAG,IAAI,KAAK,MAAM,EAAE,IAAI,MAAM,EAAE,GAAG,IAAI,KAAK,OAAO,GAAG,IAAI,IAAI,KAAK,OAAO,GAAG,IAAK,IAAI,KAAK,OAAO,GAAG,IAAI,IAAI,KAAK,OAAO,GAAG;AAAA,eACxL;AACL,kBAAQ,IAAI,eAAO,IAAI,IAAI,IAAI,IAAK,IAAI,IAAI,IAAI,IAAI,IAAI,KAAK,OAAO,GAAG,IAAI,IAAI,KAAK,OAAO,GAAG,IAAK,IAAI,KAAK,OAAO,GAAG,IAAI,IAAI,KAAK,OAAO,GAAG;AAAA;AAE/I,kBAAS,UAAS,MAAM;AACxB,cAAM,CAAC,OAAO,GAAG,KAAK,IAAI,IAAI,OAAO,GAAG,KAAK,IAAI;AACjD,kBAAU,KAAK;AAAA,iBAGT,OAAO,GAAG,OAAO,KAAI;AAC3B,YAAG,IAAI,MAAM,OAAO,GAAG,MAAM,IAAI,MAAM,OAAO,GAAG,IAAG;AAClD,kBAAQ,IAAI,eAAO,IAAI,IAAI,IAAI,IAAK,OAAO,GAAG,IAAI,OAAO,GAAG,IAAK,OAAO,GAAG,IAAI,OAAO,GAAG;AAAA,eACpF;AACL,kBAAQ,IAAI,eAAe,OAAO,GAAG,IAAI,OAAO,GAAG,IAAI,OAAO,GAAG,IAAI,OAAO,GAAG;AAAA;AAEjF,kBAAS,UAAS,MAAM;AACxB,kBAAU,KAAK;AACf,cAAM,CAAC,OAAO,GAAG,IAAI,OAAO,GAAG;AAC/B,qBAAa,CAAC,OAAO,GAAG,IAAI,OAAO,GAAG;AAAA,iBAE7B,OAAO,GAAG,OAAO,KAAI;AAC9B,YAAG,CAAE,QAAO,GAAG,MAAM,KAAK,OAAO,GAAG,MAAM,IAAG;AAC3C,kBAAQ,IAAI,eAAO,IAAI,IAAI,IAAI,IAAK,IAAI,KAAK,OAAO,GAAG,IAAI,IAAI,KAAK,OAAO,GAAG,IAAK,IAAI,KAAK,OAAO,GAAG,IAAI,IAAI,KAAK,OAAO,GAAG;AAAA,eACxH;AACL,kBAAQ,IAAI,eAAe,IAAI,KAAK,OAAO,GAAG,IAAI,IAAI,KAAK,OAAO,GAAG,IAAI,IAAI,KAAK,OAAO,GAAG,IAAI,IAAI,KAAK,OAAO,GAAG;AAAA;AAErH,kBAAS,UAAS,MAAM;AACxB,qBAAa,CAAC,IAAI,KAAK,OAAO,GAAG,IAAI,IAAI,KAAK,OAAO,GAAG;AACxD,cAAM,CAAC,OAAO,GAAG,KAAK,IAAI,IAAI,OAAO,GAAG,KAAK,IAAI;AACjD,kBAAU,KAAK;AAAA,iBACP,OAAO,GAAG,OAAO,KAAI;AAC7B,YAAG,IAAE,KAAK,CAAC,KAAI,KAAI,KAAI,KAAK,QAAQ,OAAO,IAAE,GAAG,MAAM,IAAG;AACvD,kBAAQ,IAAI,eAAO,IAAI,IAAI,IAAI,IAAK,IAAI,IAAI,KAAK,WAAW,IAAK,IAAI,IAAI,KAAK,WAAW,IAAK,OAAO,GAAG,IAAI,OAAO,GAAG;AAAA,eACjH;AACL,kBAAQ,IAAI,eAAe,IAAI,IAAI,OAAO,GAAG,IAAI,IAAI,IAAI,OAAO,GAAG;AAAA;AAErE,kBAAU,KAAK;AACf,kBAAS,UAAS,MAAM;AACxB,qBAAa,CAAC,IAAI,IAAI,KAAK,WAAW,IAAK,IAAI,IAAI,KAAK,WAAW;AACnE,cAAM,CAAC,OAAO,GAAG,IAAI,OAAO,GAAG;AAAA,iBAEvB,OAAO,GAAG,OAAO,KAAI;AAC7B,YAAG,IAAE,KAAK,CAAC,KAAI,KAAI,KAAI,KAAK,QAAQ,OAAO,IAAE,GAAG,MAAM,IAAG;AACvD,kBAAQ,IAAI,eAAO,IAAI,IAAI,IAAI,IAAK,IAAI,IAAI,KAAK,WAAW,IAAK,IAAI,IAAI,KAAK,WAAW,IAAK,IAAI,KAAK,OAAO,GAAG,IAAI,IAAI,KAAK,OAAO,GAAG;AAAA,eACnI;AACL,kBAAQ,IAAI,eAAe,IAAI,IAAI,IAAI,KAAK,OAAO,GAAG,IAAI,IAAI,IAAI,IAAI,KAAK,OAAO,GAAG;AAAA;AAEvF,kBAAS,UAAS,MAAM;AACxB,qBAAa,CAAC,IAAI,IAAI,KAAK,WAAW,IAAK,IAAI,IAAI,KAAK,WAAW;AACnE,cAAM,CAAC,OAAO,GAAG,KAAK,IAAI,IAAI,OAAO,GAAG,KAAK,IAAI;AACjD,kBAAU,KAAK;AAAA,iBACP,OAAO,GAAG,OAAO,KAAI;AAC7B,gBAAQ,IAAI,YAAI,IAAI,IAAI,IAAI,IAAI,OAAO,GAAG,IAAI,OAAO,GAAG,IAAI,OAAO,GAAG,IAAI,OAAO,GAAG,IAAI,OAAO,GAAG,IAAI,OAAO,GAAG,IAAI,OAAO,GAAG;AAE9H,kBAAS,UAAS,MAAM;AACxB,cAAM,CAAC,OAAO,GAAG,IAAI,OAAO,GAAG;AAC/B,kBAAU,KAAK;AAAA,iBACP,OAAO,GAAG,OAAO,KAAI;AAC7B,gBAAQ,IAAI,YAAI,IAAI,IAAI,IAAI,IAAI,OAAO,GAAG,IAAI,OAAO,GAAG,IAAI,OAAO,GAAG,IAAI,OAAO,GAAG,IAAI,OAAO,GAAG,IAAI,IAAI,KAAK,OAAO,GAAG,IAAI,IAAI,KAAK,OAAO,GAAG;AAEhJ,kBAAS,UAAS,MAAM;AACxB,cAAM,CAAC,IAAI,KAAK,OAAO,GAAG,IAAI,IAAI,KAAK,OAAO,GAAG;AACjD,kBAAU,KAAK;AAAA;AAEjB,sBAAgB,KAAK;AAAA;AAGvB,WAAO;AAAA;AAGV,gBAAc,iBAAiB,WAAU;AACtC,WAAO;AAAA;AAGT,gBAAc,mBAAmB,SAAS,gBAAe;AACvD,QAAI,eAAe,gBAAgB;AACnC,WAAO,UAAU,aAAa,GAAG,iBAAiB,aAAa;AAAA;AAGjE,gBAAc,qBAAqB,SAAS,gBAAe;AACzD,QAAI,eAAe,gBAAgB;AACnC,WAAO,UAAU,aAAa,GAAG,mBAAmB,aAAa;AAAA;AAGnE,gBAAc,wBAAwB,SAAS,gBAAe;AAC5D,QAAI,eAAe,gBAAgB;AACnC,WAAO,UAAU,aAAa,GAAG,sBAAsB,aAAa;AAAA;AAGtE,MAAI,kBAAkB,SAAS,gBAAe;AAC5C,QAAG,iBAAiB,GAAE;AACpB,uBAAiB;AAAA,eACT,iBAAiB,SAAO;AAChC,uBAAiB;AAAA;AAGnB,QAAI,IAAI,gBAAgB,SAAS;AAEjC,WAAM,gBAAgB,MAAM,kBAAkB,gBAAgB,KAAK,GAAE;AACnE;AAAA;AAEF;AACA,WAAO,EAAC,UAAU,iBAAe,gBAAgB,IAAE,IAAI;AAAA;AAGzD,SAAO,cAAc;AAAA;;;ACvLhB,kBAAkB,GAAG,GAAG;AAC7B,SAAO,KAAK,KAAM,GAAE,KAAK,EAAE,MAAO,GAAE,KAAK,EAAE,MAAO,GAAE,KAAK,EAAE,MAAO,GAAE,KAAK,EAAE;AAAA;AAGtE,oBAAoB,GAAG,GAAG,KAAK;AACpC,SAAO,CAAC,EAAE,KAAM,GAAE,KAAK,EAAE,MAAM,KAAK,EAAE,KAAM,GAAE,KAAK,EAAE,MAAM;AAAA;AAGtD,mBAAmB,GAAG,GAAG;AAC9B,SAAO,SAAS,GAAG,KAAK;AAAA;AAGnB,2BAA2B,GAAG,GAAG,QAAQ;AAC9C,MAAI,gBAAgB,EAAE,IAAI,CAAC,GAAG,MAAM,iBAAiB,GAAG,EAAE;AAE1D,SAAO,SAAS,GAAG;AACjB,QAAI,SAAS,cAAc,IAAI,QAAM,GAAG;AACxC,WAAO,SAAS,aAAa,UAAU;AAAA;AAAA;AAIpC,0BAA0B,GAAG,GAAG;AACrC,SAAO,SAAS,GAAG;AACjB,WAAO,EAAE,IAAI,CAAC,GAAG,MAAM,IAAI,IAAK,GAAE,KAAK;AAAA;AAAA;AAIpC,wBAAwB,SAAQ;AACrC,SAAO,OAAO,YAAW,YAAY,SAAS;AAAA;AAIzC,yBAAyB,SAAS;AACvC,SAAO,YAAY,WAAW,iBAAW,WAAW;AAAA,IACjD,SAAQ,GAAG,KAAK,QAAQ,QAAQ,SAAS,GAAG,MAAM;AAAA,IAClD,SAAQ,GAAG,KAAK,QAAQ,QAAQ,SAAS,GAAG,MAAM;AAAA;AAAA;AAIvD,qBAAqB,SAAS;AAE5B,WAAS,IAAI,GAAG,IAAI,QAAQ,SAAS,GAAG,KAAK;AAE3C,QAAI,IAAI,QAAQ,IACZ,IAAI,QAAQ,IAAI,IAChB,IAAI,QAAQ,IAAI;AAEpB,QAAI,EAAE,KAAM,GAAE,KAAK,EAAE,MAAM,EAAE,KAAM,GAAE,KAAK,EAAE,MAAM,EAAE,KAAM,GAAE,KAAK,EAAE,KAAK;AACtE,aAAO;AAAA;AAAA;AAKX,SAAO;AAAA;;;ACxDF,IAAM,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAMtB,IAAM,oBAAoB;;;ARAjC,eAAe,KAAK;AAClB,SAAO,IAAI,uBAAK,KAAK;AAAA;AAGvB,eAAe,QAAQ;AACrB,SAAO,OACJ,WACA,MAAM,KACN,IAAI,CAAC,GAAG,MAAM;AACb,QAAI,EAAE;AACN,WAAO,KAAK,IAAI,MAAM,IAAI;AAAA,KAE3B,OAAO,OAAK;AAAA;AAGV,sBAAsB,MAAM;AACjC,SAAO,MAAM,KAAK,KAAK,OAAO;AAAA;AAGzB,yBAAyB,KAAK;AACnC,SAAO,MAAM,MAAM;AAAA;AAGd,0BAA0B,KAAK,kBAAkB;AACtD,MAAI,SAAS,MAAM;AAEnB,SAAO,UAAU,WAAW,gBAAgB,QAAQ;AAAA;AAGtD,mBAAmB,QAAQ;AACzB,MAAI,WAAW,OAAO,YAAY,IAChC,OAAO;AAET,MAAI,CAAC,SAAS,UAAU,SAAS,GAAG,OAAO,KAAK;AAC9C,WAAO;AAAA;AAGT,WAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK;AACxC,QAAI,CAAC,SAAS,GAAG,KAAK,SAAS;AAC/B,QAAK,YAAY,OAAO,KAAM,YAAY,KAAK;AAC7C;AAAA,eACS,YAAY,OAAO,YAAY,KAAK;AAC7C,WAAK,KAAK,CAAC,GAAG;AAAA,eACL,YAAY,KAAK;AAC1B,WAAK,KAAK,CAAC,GAAG,KAAK,KAAK,SAAS,GAAG;AAAA,eAC3B,YAAY,KAAK;AAC1B,WAAK,KAAK,CAAC,KAAK,KAAK,SAAS,GAAG,IAAI;AAAA,WAChC;AACL,aAAO;AAAA;AAAA;AAIX,SAAO,KAAK,SAAS,EAAE,SAAS;AAAA;AAGlC,yBAAyB,QAAQ,kBAAkB;AACjD,MAAI,WAAW,MAAM,QAAQ,IAC3B,OAAO,IACP,OACA,KACA,GACA,YAAY;AAEd,MAAI,CAAC,UAAU;AACb,UAAM,IAAI,UAAU;AAAA;AAGtB,MAAI,QAAQ;AACZ,QAAM,EAAE;AAER,MAAI,oBAAoB,eAAe,qBAAqB,mBAAmB,GAAG;AAChF,gBAAY,KAAK,IAAI,WAAW,KAAK,KAAK,MAAM;AAAA;AAGlD,WAAS,IAAI,GAAG,IAAI,WAAW,KAAK;AAClC,QAAI,IAAI,EAAE,iBAAiB,MAAM,IAAI;AACrC,SAAK,KAAK,CAAC,EAAE,GAAG,EAAE;AAAA;AAGpB,SAAO;AAAA,IACL;AAAA,IACA,YAAY;AAAA;AAAA;AAIhB,iBAAiB,GAAG;AAElB,MAAI,OAAO,WAAW,eAAe,UAAU,OAAO,UAAU;AAC9D,QAAI;AACF,UAAI,OAAO,OAAO,SAAS,gBAAgB,8BAA8B;AACzE,WAAK,eAAe,MAAM,KAAK;AAC/B,aAAO;AAAA,aACA,GAAP;AAAA;AAAA;AAGJ,SAAO,wBAAkB;AAAA;;;ASlGpB,mBAAmB,MAAM,WAAW;AACzC,QAAM,gBAAgB,KAAK,SAAS,WAClC,OAAO,eAAc,QAAQ;AAE/B,MAAI,IAAI,GACN,SAAS,GACT,WAAW,OAAO;AAEpB,SAAO,KAAK,SAAS,eAAe;AAClC,QAAI,IAAI,KAAK,IACX,IAAI,KAAM,KAAI,KAAK,KAAK,SACxB,WAAU,SAAS,GAAG;AAExB,QAAI,YAAY,SAAS,UAAS;AAChC,WAAK,OAAO,IAAI,GAAG,GAAG,WAAU,WAAW,GAAG,GAAI,YAAW,UAAU,YAAW,EAAE,MAAM;AAC1F,kBAAY;AACZ;AAAA;AAGF,cAAU;AACV;AAAA;AAAA;AAIG,gBAAgB,MAAM,mBAAmB,UAAU;AACxD,WAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AACpC,QAAI,IAAI,KAAK,IACX,IAAI,MAAM,KAAK,SAAS,IAAI,KAAK,KAAK,KAAK,IAAI;AAGjD,WAAO,SAAS,GAAG,KAAK,kBAAkB;AACxC,UAAI,WAAW,GAAG,GAAG;AACrB,WAAK,OAAO,IAAI,GAAG,GAAG;AAAA;AAAA;AAAA;;;AC7Bb,uBAAuB,MAAM,kBAAkB;AAC5D,MAAI,QAAQ,MAAM;AAElB,MAAI,OAAO,SAAS,UAAU;AAC5B,QAAI,YAAY,iBAAiB,MAAM;AACvC,WAAO,UAAU;AACjB,iBAAa,UAAU;AAAA,aACd,CAAC,MAAM,QAAQ,OAAO;AAC/B,UAAM,IAAI,UAAU;AAAA;AAGtB,WAAS,KAAK,MAAM;AAEpB,MAAI,CAAC,UAAU,SAAS;AACtB,UAAM,IAAI,UAAU;AAAA;AAKtB,MAAI,OAAO,SAAS,KAAK,UAAU,OAAO,IAAI,OAAO,OAAO,SAAS,KAAK;AACxE,WAAO;AAAA;AAGT,SAAO,aAAY;AAGnB,MAAI,OAAO,GAAG;AACZ,WAAO;AAAA;AAGT,MACE,CAAC,cACD,oBACA,eAAe,qBACf,mBAAmB,GACnB;AACA,WAAO,QAAQ;AAAA;AAGjB,SAAO;AAAA;AAGT,mBAAmB,MAAM;AACvB,SAAO,KAAK,MAAM,SAAS,OAAO;AAChC,WACE,MAAM,QAAQ,UACd,MAAM,UAAU,KAChB,eAAe,MAAM,OACrB,eAAe,MAAM;AAAA;AAAA;;;ACpDZ,wBAAS,MAAM,IAAI;AAChC,MAAI,MAAM,KAAK,QACX,MAAM,UACN,YACA,cACA;AAEJ,WAAS,SAAS,GAAG,SAAS,KAAK,UAAU;AAC3C,mBAAe;AAEf,OAAG,QAAQ,SAAS,GAAG,GAAE;AACvB,UAAI,IAAI,SAAS,KAAM,UAAS,KAAK,MAAM;AAC3C,sBAAgB,IAAI;AAAA;AAGtB,QAAI,eAAe,KAAK;AACtB,YAAM;AACN,mBAAa;AAAA;AAAA;AAIjB,MAAI,YAAY;AACd,cAAU,KAAK,OAAO,GAAG;AACzB,SAAK,OAAO,KAAK,QAAQ,GAAG,GAAG;AAAA;AAAA;;;ACpBpB,6BAAS,YAAW,SAAS,EAAE,mBAAmB,IAAI,SAAS,SAAS,IAAI;AACzF,MAAI,WAAW,cAAc,YAAW,mBACtC,SAAS,cAAc,SAAS,mBAChC,eAAe,gBAAgB,UAAU,QAAQ;AAGnD,MAAI,CAAC,UAAW,OAAO,eAAc,YAAY,OAAO,YAAY,UAAW;AAC7E,WAAO;AAAA;AAGT,SAAO,OAAK;AACV,QAAI,IAAI,QAAQ,OAAO,eAAc,UAAU;AAC7C,aAAO;AAAA;AAET,QAAI,IAAI,IAAI,QAAQ,OAAO,YAAY,UAAU;AAC/C,aAAO;AAAA;AAET,WAAO,aAAa;AAAA;AAAA;AAIjB,yBAAyB,UAAU,QAAQ,QAAQ;AACxD,MAAI;AAEJ,SAAO,SAAS,SAAS,OAAO;AAGhC,YAAU,UAAU,OAAO,IAAI,OAAO,KAAK;AAC3C,YAAU,QAAQ,OAAO,IAAI,OAAO;AAEpC,iBAAO,UAAU;AAEjB,SAAO,kBAAkB,UAAU,QAAQ;AAAA;;;ACrC7C,oBAAmB;;;ACAJ,0BAAS,GAAG;AACzB,SAAO;AAAA;;;ACCM,2BAAS,WAAW;AACjC,MAAI,aAAa;AAAM,WAAO;AAC9B,MAAI,IACA,IACA,KAAK,UAAU,MAAM,IACrB,KAAK,UAAU,MAAM,IACrB,KAAK,UAAU,UAAU,IACzB,KAAK,UAAU,UAAU;AAC7B,SAAO,SAAS,OAAO,GAAG;AACxB,QAAI,CAAC;AAAG,WAAK,KAAK;AAClB,QAAI,IAAI,GAAG,IAAI,MAAM,QAAQ,SAAS,IAAI,MAAM;AAChD,WAAO,KAAM,OAAM,MAAM,MAAM,KAAK;AACpC,WAAO,KAAM,OAAM,MAAM,MAAM,KAAK;AACpC,WAAO,IAAI;AAAG,aAAO,KAAK,MAAM,IAAI,EAAE;AACtC,WAAO;AAAA;AAAA;;;AChBI,yBAAS,QAAO,GAAG;AAChC,MAAI,GAAG,IAAI,OAAM,QAAQ,IAAI,IAAI;AACjC,SAAO,IAAI,EAAE;AAAG,QAAI,OAAM,IAAI,OAAM,OAAO,OAAM,IAAI,OAAM,KAAK;AAAA;;;ACCnD,yBAAS,UAAU,GAAG;AACnC,MAAI,OAAO,MAAM;AAAU,QAAI,SAAS,QAAQ;AAChD,SAAO,EAAE,SAAS,uBACZ,EAAC,MAAM,qBAAqB,UAAU,EAAE,WAAW,IAAI,SAAS,IAAG;AAAE,WAAO,QAAQ,UAAU;AAAA,SAC9F,QAAQ,UAAU;AAAA;AAG1B,iBAAiB,UAAU,GAAG;AAC5B,MAAI,KAAK,EAAE,IACP,OAAO,EAAE,MACT,aAAa,EAAE,cAAc,OAAO,KAAK,EAAE,YAC3C,WAAW,OAAO,UAAU;AAChC,SAAO,MAAM,QAAQ,QAAQ,OAAO,EAAC,MAAM,WAAW,YAAwB,aACxE,QAAQ,OAAO,EAAC,MAAM,WAAW,IAAQ,YAAwB,aACjE,EAAC,MAAM,WAAW,IAAQ,MAAY,YAAwB;AAAA;AAG/D,gBAAgB,UAAU,GAAG;AAClC,MAAI,iBAAiB,kBAAU,SAAS,YACpC,OAAO,SAAS;AAEpB,eAAa,GAAG,QAAQ;AACtB,QAAI,OAAO;AAAQ,aAAO;AAC1B,aAAS,IAAI,KAAK,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,GAAG,IAAI,EAAE,QAAQ,IAAI,GAAG,EAAE,GAAG;AAClE,aAAO,KAAK,eAAe,EAAE,IAAI;AAAA;AAEnC,QAAI,IAAI;AAAG,sBAAQ,QAAQ;AAAA;AAG7B,iBAAe,GAAG;AAChB,WAAO,eAAe;AAAA;AAGxB,gBAAc,OAAM;AAClB,QAAI,SAAS;AACb,aAAS,IAAI,GAAG,IAAI,MAAK,QAAQ,IAAI,GAAG,EAAE;AAAG,UAAI,MAAK,IAAI;AAC1D,QAAI,OAAO,SAAS;AAAG,aAAO,KAAK,OAAO;AAC1C,WAAO;AAAA;AAGT,gBAAc,OAAM;AAClB,QAAI,SAAS,KAAK;AAClB,WAAO,OAAO,SAAS;AAAG,aAAO,KAAK,OAAO;AAC7C,WAAO;AAAA;AAGT,mBAAiB,OAAM;AACrB,WAAO,MAAK,IAAI;AAAA;AAGlB,oBAAkB,IAAG;AACnB,QAAI,OAAO,GAAE,MAAM;AACnB,YAAQ;AAAA,WACD;AAAsB,eAAO,EAAC,MAAY,YAAY,GAAE,WAAW,IAAI;AAAA,WACvE;AAAS,sBAAc,MAAM,GAAE;AAAc;AAAA,WAC7C;AAAc,sBAAc,GAAE,YAAY,IAAI;AAAQ;AAAA,WACtD;AAAc,sBAAc,KAAK,GAAE;AAAO;AAAA,WAC1C;AAAmB,sBAAc,GAAE,KAAK,IAAI;AAAO;AAAA,WACnD;AAAW,sBAAc,QAAQ,GAAE;AAAO;AAAA,WAC1C;AAAgB,sBAAc,GAAE,KAAK,IAAI;AAAU;AAAA;AAC/C,eAAO;AAAA;AAElB,WAAO,EAAC,MAAY;AAAA;AAGtB,SAAO,SAAS;AAAA;;;ACpEH,wBAAS,UAAU,MAAM;AACtC,MAAI,eAAe,IACf,kBAAkB,IAClB,gBAAgB,IAChB,YAAY,IACZ,aAAa;AAGjB,OAAK,QAAQ,SAAS,GAAG,GAAG;AAC1B,QAAI,MAAM,SAAS,KAAK,IAAI,IAAI,CAAC,IAAI,IAAI;AACzC,QAAI,IAAI,SAAS,KAAK,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,GAAG,IAAI;AAC9C,UAAI,KAAK,EAAE,aAAa,KAAK,cAAc,GAAG,KAAK,KAAK;AAAA;AAAA;AAI5D,OAAK,QAAQ,SAAS,GAAG;AACvB,QAAI,IAAI,KAAK,IACT,QAAQ,EAAE,IACV,MAAM,EAAE,IACR,GAAG;AAEP,QAAI,IAAI,cAAc,QAAQ;AAC5B,aAAO,cAAc,EAAE;AACvB,QAAE,KAAK;AACP,QAAE,MAAM;AACR,UAAI,IAAI,gBAAgB,MAAM;AAC5B,eAAO,gBAAgB,EAAE;AACzB,YAAI,KAAK,MAAM,IAAI,IAAI,EAAE,OAAO;AAChC,wBAAgB,GAAG,QAAQ,EAAE,SAAS,cAAc,GAAG,MAAM,EAAE,OAAO;AAAA,aACjE;AACL,wBAAgB,EAAE,SAAS,cAAc,EAAE,OAAO;AAAA;AAAA,eAE3C,IAAI,gBAAgB,MAAM;AACnC,aAAO,gBAAgB,EAAE;AACzB,QAAE,QAAQ;AACV,QAAE,QAAQ;AACV,UAAI,IAAI,cAAc,QAAQ;AAC5B,eAAO,cAAc,EAAE;AACvB,YAAI,KAAK,MAAM,IAAI,IAAI,EAAE,OAAO;AAChC,wBAAgB,GAAG,QAAQ,EAAE,SAAS,cAAc,GAAG,MAAM,EAAE,OAAO;AAAA,aACjE;AACL,wBAAgB,EAAE,SAAS,cAAc,EAAE,OAAO;AAAA;AAAA,WAE/C;AACL,UAAI,CAAC;AACL,sBAAgB,EAAE,QAAQ,SAAS,cAAc,EAAE,MAAM,OAAO;AAAA;AAAA;AAIpE,gBAAc,GAAG;AACf,QAAI,MAAM,SAAS,KAAK,IAAI,IAAI,CAAC,IAAI,IAAI,KAAK,IAAI,IAAI;AACtD,QAAI,SAAS;AAAW,WAAK,CAAC,GAAG,IAAI,IAAI,QAAQ,SAAS,IAAI;AAAE,WAAG,MAAM,GAAG,IAAI,GAAG,MAAM,GAAG;AAAA;AAAA;AACvF,WAAK,IAAI,IAAI,SAAS;AAC3B,WAAO,IAAI,IAAI,CAAC,IAAI,MAAM,CAAC,IAAI;AAAA;AAGjC,iBAAe,gBAAe,kBAAiB;AAC7C,aAAS,KAAK,gBAAe;AAC3B,UAAI,IAAI,eAAc;AACtB,aAAO,iBAAgB,EAAE;AACzB,aAAO,EAAE;AACT,aAAO,EAAE;AACT,QAAE,QAAQ,SAAS,GAAG;AAAE,qBAAa,IAAI,IAAI,CAAC,IAAI,KAAK;AAAA;AACvD,gBAAU,KAAK;AAAA;AAAA;AAInB,QAAM,eAAe;AACrB,QAAM,iBAAiB;AACvB,OAAK,QAAQ,SAAS,GAAG;AAAE,QAAI,CAAC,aAAa,IAAI,IAAI,CAAC,IAAI;AAAI,gBAAU,KAAK,CAAC;AAAA;AAE9E,SAAO;AAAA;;;ACpET,wBAAwB,MAAM;AAC5B,MAAI,IAAI,IAAI,IAAI,KAAK,QAAQ,GAAG,IAAI,KAAK,IAAI,IAAI,OAAO;AACxD,SAAO,EAAE,IAAI;AAAG,QAAI,GAAG,IAAI,KAAK,IAAI,QAAQ,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE;AACnE,SAAO,KAAK,IAAI;AAAA;AAOX,mBAAmB,UAAU,SAAS;AAC3C,MAAI,gBAAgB,IAChB,WAAW,IACX,SAAS;AAEb,UAAQ,QAAQ;AAEhB,oBAAkB,GAAG;AACnB,YAAQ,EAAE;AAAA,WACH;AAAsB,UAAE,WAAW,QAAQ;AAAW;AAAA,WACtD;AAAW,gBAAQ,EAAE;AAAO;AAAA,WAC5B;AAAgB,UAAE,KAAK,QAAQ;AAAU;AAAA;AAAA;AAIlD,mBAAiB,SAAS;AACxB,YAAQ,QAAQ,SAAS,MAAM;AAC7B,WAAK,QAAQ,SAAS,KAAK;AACzB,QAAC,eAAc,MAAM,MAAM,IAAI,CAAC,MAAM,QAAS,eAAc,OAAO,KAAK,KAAK;AAAA;AAAA;AAGlF,aAAS,KAAK;AAAA;AAGhB,gBAAc,MAAM;AAClB,WAAO,eAAe,OAAO,UAAU,EAAC,MAAM,WAAW,MAAM,CAAC,SAAQ,YAAY;AAAA;AAGtF,WAAS,QAAQ,SAAS,SAAS;AACjC,QAAI,CAAC,QAAQ,GAAG;AACd,UAAI,QAAQ,IACR,YAAY,CAAC;AACjB,cAAQ,IAAI;AACZ,aAAO,KAAK;AACZ,aAAO,UAAU,UAAU,OAAO;AAChC,cAAM,KAAK;AACX,gBAAQ,QAAQ,SAAS,MAAM;AAC7B,eAAK,QAAQ,SAAS,KAAK;AACzB,0BAAc,MAAM,IAAI,CAAC,MAAM,KAAK,QAAQ,SAAS,UAAS;AAC5D,kBAAI,CAAC,SAAQ,GAAG;AACd,yBAAQ,IAAI;AACZ,0BAAU,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAS7B,WAAS,QAAQ,SAAS,SAAS;AACjC,WAAO,QAAQ;AAAA;AAGjB,SAAO;AAAA,IACL,MAAM;AAAA,IACN,MAAM,OAAO,IAAI,SAAS,WAAU;AAClC,UAAI,OAAO,IAAI;AAGf,gBAAS,QAAQ,SAAS,SAAS;AACjC,gBAAQ,QAAQ,SAAS,MAAM;AAC7B,eAAK,QAAQ,SAAS,KAAK;AACzB,gBAAI,cAAc,MAAM,IAAI,CAAC,MAAM,KAAK,SAAS,GAAG;AAClD,mBAAK,KAAK;AAAA;AAAA;AAAA;AAAA;AAOlB,aAAO,eAAO,UAAU;AAKxB,UAAK,KAAI,KAAK,UAAU,GAAG;AACzB,iBAAS,IAAI,GAAG,IAAI,KAAK,KAAK,KAAK,IAAI,GAAG,IAAI,GAAG,EAAE,GAAG;AACpD,cAAK,MAAK,KAAK,KAAK,OAAO,GAAG;AAC5B,gBAAI,KAAK,IAAI,KAAK,KAAK,KAAK,IAAI,KAAK,KAAK,GAAG,IAAI;AAAA;AAAA;AAAA;AAKvD,aAAO;AAAA,OACN,OAAO,SAAS,MAAM;AACvB,aAAO,KAAK,SAAS;AAAA;AAAA;AAAA;;;ACnGZ,wBAAS,GAAG,GAAG;AAC5B,MAAI,KAAK,GAAG,KAAK,EAAE;AACnB,SAAO,KAAK,IAAI;AACd,QAAI,MAAM,KAAK,OAAO;AACtB,QAAI,EAAE,OAAO;AAAG,WAAK,MAAM;AAAA;AACtB,WAAK;AAAA;AAEZ,SAAO;AAAA;;;ACLM,2BAAS,SAAS;AAC/B,MAAI,eAAe,IACf,YAAY,QAAQ,IAAI,WAAW;AAAE,WAAO;AAAA;AAEhD,gBAAc,MAAM,IAAG;AACrB,SAAK,QAAQ,SAAS,GAAG;AACvB,UAAI,IAAI;AAAG,YAAI,CAAC;AAChB,UAAI,IAAI,aAAa;AACrB,UAAI;AAAG,UAAE,KAAK;AAAA;AACT,qBAAa,KAAK,CAAC;AAAA;AAAA;AAI5B,mBAAiB,MAAM,IAAG;AACxB,SAAK,QAAQ,SAAS,KAAK;AAAE,WAAK,KAAK;AAAA;AAAA;AAGzC,oBAAkB,GAAG,IAAG;AACtB,QAAI,EAAE,SAAS;AAAsB,QAAE,WAAW,QAAQ,SAAS,IAAG;AAAE,iBAAS,IAAG;AAAA;AAAA,aAC3E,EAAE,QAAQ;AAAc,mBAAa,EAAE,MAAM,EAAE,MAAM;AAAA;AAGhE,MAAI,eAAe;AAAA,IACjB,YAAY;AAAA,IACZ,iBAAiB;AAAA,IACjB,SAAS;AAAA,IACT,cAAc,SAAS,MAAM,IAAG;AAAE,WAAK,QAAQ,SAAS,KAAK;AAAE,gBAAQ,KAAK;AAAA;AAAA;AAAA;AAG9E,UAAQ,QAAQ;AAEhB,WAAS,KAAK,cAAc;AAC1B,aAAS,UAAU,aAAa,IAAI,IAAI,QAAQ,QAAQ,IAAI,GAAG,IAAI,GAAG,EAAE,GAAG;AACzE,eAAS,IAAI,IAAI,GAAG,IAAI,GAAG,EAAE,GAAG;AAC9B,YAAI,KAAK,QAAQ,IAAI,KAAK,QAAQ,IAAI;AACtC,YAAK,KAAI,UAAU,KAAK,IAAI,eAAO,GAAG,SAAS;AAAI,YAAE,OAAO,GAAG,GAAG;AAClE,YAAK,KAAI,UAAU,KAAK,IAAI,eAAO,GAAG,SAAS;AAAI,YAAE,OAAO,GAAG,GAAG;AAAA;AAAA;AAAA;AAKxE,SAAO;AAAA;;;AC3CM,2BAAS,GAAG,GAAG;AAC5B,SAAO,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK,IAAI,IAAI;AAAA;;;ACChC,0BAAS,SAAS;AAC/B,MAAI,QAAQ,WAAW;AAAG,cAAU,oBAAoB;AACxD,SAAO;AAAA,IACL,MAAM,SAAS,GAAG,GAAG,IAAI,IAAI;AAC3B,UAAI,MAAM;AAAM,aAAK;AACrB,UAAI,MAAM;AAAM,aAAK,EAAE;AACvB,aAAO,KAAK,IAAI;AACd,YAAI,MAAM,KAAK,OAAO;AACtB,YAAI,QAAQ,EAAE,MAAM,KAAK;AAAG,eAAK,MAAM;AAAA;AAClC,eAAK;AAAA;AAEZ,aAAO;AAAA;AAAA,IAET,OAAO,SAAS,GAAG,GAAG,IAAI,IAAI;AAC5B,UAAI,MAAM;AAAM,aAAK;AACrB,UAAI,MAAM;AAAM,aAAK,EAAE;AACvB,aAAO,KAAK,IAAI;AACd,YAAI,MAAM,KAAK,OAAO;AACtB,YAAI,QAAQ,EAAE,MAAM,KAAK;AAAG,eAAK;AAAA;AAC5B,eAAK,MAAM;AAAA;AAElB,aAAO;AAAA;AAAA;AAAA;AAKb,6BAA6B,GAAG;AAC9B,SAAO,SAAS,GAAG,GAAG;AACpB,WAAO,kBAAU,EAAE,IAAI;AAAA;AAAA;;;AC3B3B,IAAI,kBAAkB,iBAAS;AACxB,IAAI,cAAc,gBAAgB;AAClC,IAAI,aAAa,gBAAgB;;;ACLxC,IAAI,QAAQ,MAAM;AAEX,IAAI,QAAQ,MAAM;AAClB,IAAI,MAAM,MAAM;;;ACHvB,IAAI,MAAM,KAAK,KAAK;AAApB,IACI,KAAK,KAAK,KAAK;AADnB,IAEI,KAAK,KAAK,KAAK;;;ACGZ,wBAAwB,WAAW,MAAM;AAC9C,QAAM,aAAa,IACjB,WAAW;AAAA,IACT,MAAM;AAAA,IACN,SAAS;AAAA,MACP,WAAW;AAAA,QACT,MAAM;AAAA,QACN,YAAY;AAAA;AAAA;AAAA,IAGhB,MAAM;AAAA;AAGV,YAAU,QAAQ,SAAS,UAAU;AACnC,UAAM,WAAW;AAEjB,aAAS,QAAQ,SAAS,KAAK,GAAG;AAChC,YAAM,OAAO,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,OAAO,IAAI,KAAK,MAAM,IAAI,IAChE,cAAc,IAAI,IAAI,SAAS,YAAY;AACzC,eAAO,KAAK;AAAA;AAGhB,UAAI,QAAQ,YAAY;AACtB,iBAAS,KAAK,CAAC,WAAW;AAAA,aACrB;AACL,iBAAS,KAAM,WAAW,QAAQ,SAAS,KAAK;AAChD,iBAAS,KAAK,KAAK;AAAA;AAAA;AAIvB,aAAS,QAAQ,UAAU,WAAW,KAAK;AAAA,MACzC,MAAM;AAAA,MACN,MAAM,KAAK,IACT,aACE,SAAS,IAAI,SAAS,GAAG;AACvB,eAAO,KAAK,EAAE;AAAA;AAAA,MAIpB,MAAM,CAAC;AAAA;AAAA;AAMX,WAAS,QAAQ,UAAU,WAAW,KAAK,CAAC,GAAG,MAAM,EAAE,OAAO,EAAE;AAEhE,SAAO;AAAA;AAGF,0BAA0B,UAAU,WAAW;AACpD,QAAM,aAAa,SAAS,QAAQ,UAAU,YAC5C,UAAS,iBAAS,OAAK,EAAE,MAAM;AAEjC,SAAO,WAAW,SAAS,WAAW;AACpC;AAAA;AAGF,MAAI,YAAY,WAAW,QAAQ;AACjC,UAAM,IAAI,WAAW,kCAAkC,YAAY;AAAA;AAGrE,SAAO,gBAAQ,UAAU,SAAS,QAAQ,WAAW,SAAS,IAAI,OAAK;AACrE,MAAE,SAAS,YAAY,GAAG;AAC1B,WAAO,EAAE,SAAS,YAAY;AAAA;AAGhC,kCAAgC;AAC9B,UAAM,WAAW,WAAW,IAC1B,gBAAgB,kBAAU,YAAY,GAAG,IACzC,WAAW,WAAW,gBACtB,SAAS,UAAU,UAAU,CAAC,UAAU;AAG1C,WAAO,OAAO,SAAS,OAAO,SAAS;AACvC,WAAO,OAAO;AACd,WAAO,OAAO,OAAO,KAAK;AAG1B,eAAW,OAAO,eAAe;AACjC,eAAW;AAGX,eAAW,OAAO,QAAO,YAAY,OAAO,OAAO,GAAG;AAAA;AAAA;;;AdrF3C,6BAAS,MAAM,WAAW;AACvC,SAAO,iBAAiB,eAAe,IAAI,OAAO,OAAO;AAAA;AAGpD,aAAa,MAAM;AACxB,MAAI,OAAO,2BAAO,KAAK,OAAO,CAAC,KAAK,UAAU,CAAC,GAAG,KAAK,MAAM,IAAI,MAAM,KAAK,MAC1E,YAAY;AAEd,WAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,IAAI,GAAG,KAAK,GAAG;AAE9C,cAAU,KAAK,CAAC,CAAC,KAAK,IAAI,KAAK,IAAI,KAAK,CAAC,KAAK,IAAI,IAAI,KAAK,IAAI,KAAK,CAAC,KAAK,IAAI,IAAI,KAAK;AAAA;AAGzF,SAAO;AAAA;;;AeZM,uBAAS,OAAO,KAAK;AAClC,MAAI,MAAM,SAAS,GAAG;AACpB,WAAO,MAAM,IAAI,CAAC,GAAG,MAAM;AAAA;AAE7B,MAAI,YAAY,MAAM,IAAI,QAAM,IAAI,IAAI,QAAM,gBAAgB,IAAI;AAClE,SAAO,UAAU,OAAO,KAAK;AAAA;AAGxB,mBAAmB,OAAO,KAAK,WAAW;AAC/C,MAAI,MAAM,UACR,OAAO,MAAM,IAAI,CAAC,GAAG,MAAM;AAE7B,mBAAiB,KAAK,QAAQ,IAAI,MAAM,GAAG;AACzC,aAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,KAAK;AACnC,UAAI,MAAM,IAAI,OAAO,GAAG,IACtB,OAAO,UAAU,IAAI,IAAI,MAAM;AACjC,UAAI,MAAM,OAAO,KAAK;AACpB,YAAI,IAAI,QAAQ;AACd,kBAAQ,IAAI,SAAS,MAAM,OAAO,MAAM,MAAM;AAAA,eACzC;AACL,gBAAM,MAAM;AACZ,iBAAO,MAAM,OAAO;AAAA;AAAA;AAGxB,UAAI,IAAI,QAAQ;AACd,YAAI,OAAO,GAAG,GAAG,IAAI;AAAA;AAAA;AAAA;AAK3B,UAAQ;AACR,SAAO;AAAA;AAGT,yBAAyB,IAAI,IAAI;AAC/B,MAAI,IAAI,SAAS,gBAAgB,KAAK,gBAAgB;AACtD,SAAO,IAAI;AAAA;;;AChCN,kBACL,YACA,UACA,EAAE,mBAAmB,IAAI,SAAS,MAAM,SAAS,UAAU,IAC3D;AACA,MAAI,WAAW,cAAc,YAAW;AAExC,MAAI,SAAS,SAAS,SAAS,SAAS,GAAG;AACzC,cAAU,UAAU,SAAS,SAAS,IAAI,SAAS;AAAA;AAGrD,MAAI,YAAY,oBAAY,UAAU,SAAS,SAC7C,UAAU,SAAS,IAAI,OAAK,cAAc,GAAG,oBAC7C,KAAK,OAAO,eAAc,YAAY,YACtC;AAEF,MAAI,CAAC,UAAU,SAAS,MAAM,OAAK,OAAO,MAAM,WAAW;AACzD,SAAK,SAAS,MAAM;AAAA;AAGtB,SAAO,gBAAgB,WAAW,SAAS,EAAE,OAAO,MAAM,QAAQ,QAAQ,IAAI;AAAA;AAGzE,iBACL,YACA,SACA,EAAE,mBAAmB,IAAI,SAAS,MAAM,SAAS,UAAU,IAC3D;AACA,MAAI,gBAAgB,SAAS,SAAS,YAAY,EAAE,kBAAkB,QAAQ;AAC9E,SAAO,SAAS,OAAK,cAAc,IAAI,KAAK,cAAc,IAAI,QAAM,OAAK,GAAG,IAAI;AAAA;AAG3E,wBACL,YACA,UACA,EAAE,mBAAmB,IAAI,SAAS,MAAM,SAAS,UAAU,IAC3D;AACA,MACE,CAAC,MAAM,QAAQ,eACf,CAAC,MAAM,QAAQ,aACf,WAAW,WAAW,SAAS,UAC/B,CAAC,WAAW,QACZ;AACA,UAAM,IAAI,UAAU;AAAA;AAGtB,MAAI,YAAY,OAAK,cAAc,GAAG,mBACpC,YAAY,WAAW,IAAI,YAC3B,UAAU,SAAS,IAAI,YACvB,IACA;AAEF,MAAI,QAAQ;AACV,QAAI,WAAW,MAAM,OAAK,OAAO,MAAM,WAAW;AAChD,WAAK,WAAW,MAAM;AAAA;AAExB,QAAI,SAAS,MAAM,OAAK,OAAO,MAAM,WAAW;AAC9C,WAAK,SAAS,MAAM;AAAA;AAAA,SAEjB;AACL,SAAK,WAAW,MAAM;AACtB,SAAK,SAAS,MAAM;AAAA;AAGtB,SAAO,gBAAgB,WAAW,SAAS,EAAE,QAAQ,QAAQ,IAAI,IAAI,OAAO;AAAA;AAG9E,yBAAyB,WAAW,SAAS,EAAE,QAAQ,QAAQ,IAAI,IAAI,UAAU,IAAI;AACnF,MAAI,QAAQ,QAAQ,cAAW,WAAW,WAAW,UAAU,IAAI,CAAC,GAAG,MAAM,IAC3E,gBAAgB,MAAM,IAAI,CAAC,GAAG,MAAM,gBAAgB,UAAU,IAAI,QAAQ,IAAI;AAEhF,MAAI,SAAS,MAAM,QAAQ,KAAK;AAC9B,SAAK,MAAM,IAAI,OAAK,GAAG;AAAA;AAGzB,MAAI,UAAU,QAAQ;AACpB,QAAI,MAAM,QAAQ,KAAK;AACrB,WAAK,GAAG,KAAK;AAAA;AAEf,QAAI,MAAM,QAAQ,KAAK;AACrB,WAAK,GAAG,KAAK;AAAA;AAAA;AAIjB,MAAI,QAAQ;AACV,QAAI,oBAAoB,SACpB,OAAK,cAAc,IAAI,QAAM,GAAG,IAAI,KAAK,OACzC,OAAK,cAAc,IAAI,QAAM,GAAG;AAEpC,QAAI,UAAW,OAAM,KAAK;AACxB,aAAO,OAAM,IAAI,QAAQ,MAAQ,IAAI,IAAI,QAAQ,MAAO,kBAAkB;AAAA;AAE5E,WAAO;AAAA,aACE,QAAQ;AACjB,SAAK,MAAM,QAAQ,MAAM,GAAG,IAAI,OAAK,OAAO,MAAM,YAAY,KAAK;AACnE,SAAK,MAAM,QAAQ,MAAM,GAAG,IAAI,OAAK,OAAO,MAAM,YAAY,KAAK;AAEnE,WAAO,cAAc,IAAI,CAAC,IAAI,MAAM;AAClC,UAAI,GAAG,MAAM,GAAG,IAAI;AAClB,eAAO,OAAM,IAAI,QAAQ,GAAG,MAAQ,IAAI,IAAI,QAAQ,GAAG,MAAO,GAAG;AAAA;AAEnE,aAAO;AAAA;AAAA;AAIX,SAAO;AAAA;;;AC3GF,oBAAoB,GAAG,GAAG,QAAQ,SAAS,SAAS;AACzD,SAAO,UACL,aAAa,GAAG,GAAG,SACnB,SACA,WAAW,GAAG,GAAG,SACjB,IAAI,KAAK,KAAK,QACd;AAAA;AAIG,kBAAkB,YAAW,GAAG,GAAG,QAAQ,SAAS;AACzD,MAAI,eAAe,WAAW,GAAG,GAAG,QAAQ,YAAW;AACvD,SAAO,OAAK,aAAa,IAAI;AAAA;AAGxB,kBAAkB,GAAG,GAAG,OAAO,QAAQ,SAAS,SAAS;AAC9D,SAAO,UACL,WAAW,GAAG,GAAG,OAAO,SACxB,SACA,SAAS,GAAG,GAAG,OAAO,SACtB,IAAI,QAAQ,IAAI,QAChB;AAAA;AAIG,gBAAgB,YAAW,GAAG,GAAG,OAAO,QAAQ,SAAS;AAC9D,MAAI,eAAe,SAAS,GAAG,GAAG,OAAO,QAAQ,YAAW;AAC5D,SAAO,OAAK,aAAa,IAAI;AAAA;AAG/B,mBAAmB,QAAQ,SAAS,UAAU,WAAW,EAAE,mBAAmB,IAAI,SAAS,SAAS,IAAI;AACtG,MAAI,SAAS,cAAc,SAAS,mBAChC,UACA;AAGJ,MAAI,eAAe,cAAc,OAAO,SAAS,YAAY,kBAAkB;AAC7E,cAAU,QAAQ,KAAK,KAAK,YAAY,mBAAmB,OAAO;AAAA;AAGpE,aAAW,OAAO;AAClB,iBAAe,kBAAkB,UAAU,QAAQ;AAEnD,MAAI,QAAQ;AACV,WAAO,OAAM,IAAI,OAAO,WAAW,aAAa;AAAA;AAGlD,SAAO;AAAA;AAGF,sBAAsB,GAAG,GAAG,QAAQ;AACzC,SAAO,SAAS,MAAM;AACpB,QAAI,WAAW,gBAAgB,OAC7B,YAAY,eAAc,CAAC,GAAG,MAAM,KAAK,MACzC,gBAAgB,KAAK,MAAM,KAAK,GAAG,KAAK,SAAS,IAAI,KAAK,GAAG,KAAK,SAAS,KAC3E,QAAQ;AAEV,WAAO,KAAK,IAAI,CAAC,OAAO,MAAM;AAC5B,UAAI;AACJ,UAAI,GAAG;AACL,iBAAS,SAAS,OAAO,KAAK,IAAI;AAAA;AAEpC,cAAQ,gBAAgB,IAAI,KAAK,KAAM,aAAY,QAAQ,YAAY,IAAI,KAAK;AAChF,aAAO,CAAC,KAAK,IAAI,SAAS,SAAS,GAAG,KAAK,IAAI,SAAS,SAAS;AAAA;AAAA;AAAA;AAMhE,oBAAoB,GAAG,GAAG,OAAO,QAAQ;AAC9C,SAAO,SAAS,MAAM;AACpB,QAAI,WAAW,gBAAgB,OAC7B,YAAY,eAAc,CAAC,GAAG,MAAM,KAAK,MACzC,gBAAgB,KAAK,MAAM,KAAK,GAAG,KAAK,SAAS,IAAI,KAAK,GAAG,KAAK,SAAS,KAC3E,QAAQ;AAEV,QAAI,gBAAgB,GAAG;AACrB,sBAAgB,IAAI,KAAK,KAAK;AAAA;AAGhC,QAAI,mBAAmB,gBAAiB,KAAI,KAAK;AAEjD,WAAO,KAAK,IAAI,CAAC,OAAO,MAAM;AAC5B,UAAI,GAAG;AACL,iBAAS,SAAS,OAAO,KAAK,IAAI;AAAA;AAEpC,UAAI,WAAW,UACZ,oBAAoB,aAAY,QAAQ,YAAY,IAAI,KAAK,WAAW;AAE3E,aAAO,CAAC,IAAI,SAAS,KAAK,OAAO,IAAI,SAAS,KAAK;AAAA;AAAA;AAAA;AAMzD,mBAAmB,UAAU;AAC3B,MAAI,YAAY,IAAI,GAAG;AACrB,WAAO,CAAC,GAAG,MAAM,WAAW;AAAA;AAE9B,MAAI,YAAY,IAAI,GAAG;AACrB,WAAO,CAAC,MAAM,IAAI,UAAU;AAAA;AAE9B,MAAI,YAAY,IAAI,GAAG;AACrB,WAAO,CAAC,GAAG,MAAM,IAAI;AAAA;AAEvB,MAAI,YAAY,IAAI,GAAG;AACrB,WAAO,CAAC,IAAI,WAAW,KAAK;AAAA;AAE9B,SAAO,CAAC,GAAG,IAAI,WAAW;AAAA;AAGrB,oBAAoB,GAAG,GAAG,QAAQ;AACvC,MAAI,IAAI,IAAI,SAAS,MAAM,GACzB,IAAI,IAAI,SAAS,MAAM,GACvB,MAAM,MAAM,SAAS,MAAM,SAAS;AAEtC,SAAO,MAAM,IAAI,MAAM,IAAI,MAAM,IAAI;AAAA;AAGhC,kBAAkB,GAAG,GAAG,OAAO,QAAQ;AAC5C,MAAI,IAAI,IAAI,OACV,IAAI,IAAI;AACV,SAAO,MAAM,IAAI,MAAM,IAAI,MAAM,IAAI,MAAM,IAAI,MAAM,IAAI,MAAM,IAAI,MAAM,IAAI,MAAM,IAAI;AAAA;",
  "names": []
}
