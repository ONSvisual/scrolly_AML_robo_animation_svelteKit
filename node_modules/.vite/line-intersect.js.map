{
  "version": 3,
  "sources": ["../../src/lib/vis/football/node_modules/line-intersect/es/check-intersection.js", "../../src/lib/vis/football/node_modules/line-intersect/es/colinear-point-within-segment.js"],
  "sourcesContent": ["var COLINEAR = intersectResult('colinear');\nvar PARALLEL = intersectResult('parallel');\nvar NONE = intersectResult('none');\n/**\n* Check how two line segments intersect eachother. Line segments are represented\n* as (x1, y1)-(x2, y2) and (x3, y3)-(x4, y4).\n*\n* @param {number} x1\n* @param {number} y1\n* @param {number} x2\n* @param {number} y2\n* @param {number} x3\n* @param {number} y3\n* @param {number} x4\n* @param {number} y4\n* @return {object} Object describing intersection that looks like\n*    {\n*      type: none|parallel|colinear|intersecting,\n*      point: {x, y} - only defined when type == intersecting\n*    }\n*/\n\nexport function checkIntersection(x1, y1, x2, y2, x3, y3, x4, y4) {\n  var denom = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);\n  var numeA = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);\n  var numeB = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3);\n\n  if (denom == 0) {\n    if (numeA == 0 && numeB == 0) {\n      return COLINEAR;\n    }\n\n    return PARALLEL;\n  }\n\n  var uA = numeA / denom;\n  var uB = numeB / denom;\n\n  if (uA >= 0 && uA <= 1 && uB >= 0 && uB <= 1) {\n    return intersecting({\n      x: x1 + uA * (x2 - x1),\n      y: y1 + uA * (y2 - y1)\n    });\n  }\n\n  return NONE;\n}\n\nfunction intersecting(point) {\n  var result = intersectResult('intersecting');\n  result.point = point;\n  return result;\n}\n\nfunction intersectResult(type) {\n  return {\n    type: type\n  };\n}", "/**\n* Assuming a point is on same line as a line segment, tell if that point is\n* on the line segment.\n*\n* @param {number} pointX - X of point\n* @param {number} pointY - Y of point\n* @param {number} startX - X of line segment start\n* @param {number} startY - Y of line segment start\n* @param {number} endX   - X of line segment end\n* @param {number} endY   - Y of line segment end\n* @return {boolean} true if point is within segment, false otherwise.\n*/\nexport function colinearPointWithinSegment(pointX, pointY, startX, startY, endX, endY) {\n  if (startX != endX) {\n    if (startX <= pointX && pointX <= endX) return true;\n    if (startX >= pointX && pointX >= endX) return true;\n  } else {\n    if (startY <= pointY && pointY <= endY) return true;\n    if (startY >= pointY && pointY >= endY) return true;\n  }\n\n  return false;\n}"],
  "mappings": ";;;AAAA,IAAI,WAAW,gBAAgB,UAAU;AACzC,IAAI,WAAW,gBAAgB,UAAU;AACzC,IAAI,OAAO,gBAAgB,MAAM;AAoB1B,2BAA2B,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI;AAChE,MAAI,QAAS,MAAK,MAAO,MAAK,MAAO,MAAK,MAAO,MAAK;AACtD,MAAI,QAAS,MAAK,MAAO,MAAK,MAAO,MAAK,MAAO,MAAK;AACtD,MAAI,QAAS,MAAK,MAAO,MAAK,MAAO,MAAK,MAAO,MAAK;AAEtD,MAAI,SAAS,GAAG;AACd,QAAI,SAAS,KAAK,SAAS,GAAG;AAC5B,aAAO;AAAA,IACT;AAEA,WAAO;AAAA,EACT;AAEA,MAAI,KAAK,QAAQ;AACjB,MAAI,KAAK,QAAQ;AAEjB,MAAI,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,GAAG;AAC5C,WAAO,aAAa;AAAA,MAClB,GAAG,KAAK,KAAM,MAAK;AAAA,MACnB,GAAG,KAAK,KAAM,MAAK;AAAA,IACrB,CAAC;AAAA,EACH;AAEA,SAAO;AACT;AAEA,sBAAsB,OAAO;AAC3B,MAAI,SAAS,gBAAgB,cAAc;AAC3C,SAAO,QAAQ;AACf,SAAO;AACT;AAEA,yBAAyB,MAAM;AAC7B,SAAO;AAAA,IACL;AAAA,EACF;AACF;;;AC9CO,oCAAoC,QAAQ,QAAQ,QAAQ,QAAQ,MAAM,MAAM;AACrF,MAAI,UAAU,MAAM;AAClB,QAAI,UAAU,UAAU,UAAU;AAAM,aAAO;AAC/C,QAAI,UAAU,UAAU,UAAU;AAAM,aAAO;AAAA,EACjD,OAAO;AACL,QAAI,UAAU,UAAU,UAAU;AAAM,aAAO;AAC/C,QAAI,UAAU,UAAU,UAAU;AAAM,aAAO;AAAA,EACjD;AAEA,SAAO;AACT;",
  "names": []
}
