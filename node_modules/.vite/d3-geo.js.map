{
  "version": 3,
  "sources": ["../../src/lib/vis/animated_charts/node_modules/d3-array/src/ascending.js", "../../src/lib/vis/animated_charts/node_modules/d3-array/src/bisector.js", "../../src/lib/vis/animated_charts/node_modules/d3-array/src/number.js", "../../src/lib/vis/animated_charts/node_modules/d3-array/src/bisect.js", "../../src/lib/vis/animated_charts/node_modules/d3-array/src/fsum.js", "../../src/lib/vis/animated_charts/node_modules/d3-array/src/array.js", "../../src/lib/vis/animated_charts/node_modules/d3-array/src/ticks.js", "../../src/lib/vis/animated_charts/node_modules/d3-array/src/merge.js", "../../src/lib/vis/animated_charts/node_modules/d3-array/src/range.js", "../../src/lib/vis/animated_charts/node_modules/d3-array/src/shuffle.js", "../../src/lib/vis/animated_charts/node_modules/d3-geo/src/math.js", "../../src/lib/vis/animated_charts/node_modules/d3-geo/src/noop.js", "../../src/lib/vis/animated_charts/node_modules/d3-geo/src/stream.js", "../../src/lib/vis/animated_charts/node_modules/d3-geo/src/area.js", "../../src/lib/vis/animated_charts/node_modules/d3-geo/src/cartesian.js", "../../src/lib/vis/animated_charts/node_modules/d3-geo/src/bounds.js", "../../src/lib/vis/animated_charts/node_modules/d3-geo/src/centroid.js", "../../src/lib/vis/animated_charts/node_modules/d3-geo/src/constant.js", "../../src/lib/vis/animated_charts/node_modules/d3-geo/src/compose.js", "../../src/lib/vis/animated_charts/node_modules/d3-geo/src/rotation.js", "../../src/lib/vis/animated_charts/node_modules/d3-geo/src/circle.js", "../../src/lib/vis/animated_charts/node_modules/d3-geo/src/clip/buffer.js", "../../src/lib/vis/animated_charts/node_modules/d3-geo/src/pointEqual.js", "../../src/lib/vis/animated_charts/node_modules/d3-geo/src/clip/rejoin.js", "../../src/lib/vis/animated_charts/node_modules/d3-geo/src/polygonContains.js", "../../src/lib/vis/animated_charts/node_modules/d3-geo/src/clip/index.js", "../../src/lib/vis/animated_charts/node_modules/d3-geo/src/clip/antimeridian.js", "../../src/lib/vis/animated_charts/node_modules/d3-geo/src/clip/circle.js", "../../src/lib/vis/animated_charts/node_modules/d3-geo/src/clip/line.js", "../../src/lib/vis/animated_charts/node_modules/d3-geo/src/clip/rectangle.js", "../../src/lib/vis/animated_charts/node_modules/d3-geo/src/clip/extent.js", "../../src/lib/vis/animated_charts/node_modules/d3-geo/src/length.js", "../../src/lib/vis/animated_charts/node_modules/d3-geo/src/distance.js", "../../src/lib/vis/animated_charts/node_modules/d3-geo/src/contains.js", "../../src/lib/vis/animated_charts/node_modules/d3-geo/src/graticule.js", "../../src/lib/vis/animated_charts/node_modules/d3-geo/src/interpolate.js", "../../src/lib/vis/animated_charts/node_modules/d3-geo/src/identity.js", "../../src/lib/vis/animated_charts/node_modules/d3-geo/src/path/area.js", "../../src/lib/vis/animated_charts/node_modules/d3-geo/src/path/bounds.js", "../../src/lib/vis/animated_charts/node_modules/d3-geo/src/path/centroid.js", "../../src/lib/vis/animated_charts/node_modules/d3-geo/src/path/context.js", "../../src/lib/vis/animated_charts/node_modules/d3-geo/src/path/measure.js", "../../src/lib/vis/animated_charts/node_modules/d3-geo/src/path/string.js", "../../src/lib/vis/animated_charts/node_modules/d3-geo/src/path/index.js", "../../src/lib/vis/animated_charts/node_modules/d3-geo/src/transform.js", "../../src/lib/vis/animated_charts/node_modules/d3-geo/src/projection/fit.js", "../../src/lib/vis/animated_charts/node_modules/d3-geo/src/projection/resample.js", "../../src/lib/vis/animated_charts/node_modules/d3-geo/src/projection/index.js", "../../src/lib/vis/animated_charts/node_modules/d3-geo/src/projection/conic.js", "../../src/lib/vis/animated_charts/node_modules/d3-geo/src/projection/cylindricalEqualArea.js", "../../src/lib/vis/animated_charts/node_modules/d3-geo/src/projection/conicEqualArea.js", "../../src/lib/vis/animated_charts/node_modules/d3-geo/src/projection/albers.js", "../../src/lib/vis/animated_charts/node_modules/d3-geo/src/projection/albersUsa.js", "../../src/lib/vis/animated_charts/node_modules/d3-geo/src/projection/azimuthal.js", "../../src/lib/vis/animated_charts/node_modules/d3-geo/src/projection/azimuthalEqualArea.js", "../../src/lib/vis/animated_charts/node_modules/d3-geo/src/projection/azimuthalEquidistant.js", "../../src/lib/vis/animated_charts/node_modules/d3-geo/src/projection/mercator.js", "../../src/lib/vis/animated_charts/node_modules/d3-geo/src/projection/conicConformal.js", "../../src/lib/vis/animated_charts/node_modules/d3-geo/src/projection/equirectangular.js", "../../src/lib/vis/animated_charts/node_modules/d3-geo/src/projection/conicEquidistant.js", "../../src/lib/vis/animated_charts/node_modules/d3-geo/src/projection/equalEarth.js", "../../src/lib/vis/animated_charts/node_modules/d3-geo/src/projection/gnomonic.js", "../../src/lib/vis/animated_charts/node_modules/d3-geo/src/projection/identity.js", "../../src/lib/vis/animated_charts/node_modules/d3-geo/src/projection/naturalEarth1.js", "../../src/lib/vis/animated_charts/node_modules/d3-geo/src/projection/orthographic.js", "../../src/lib/vis/animated_charts/node_modules/d3-geo/src/projection/stereographic.js", "../../src/lib/vis/animated_charts/node_modules/d3-geo/src/projection/transverseMercator.js"],
  "sourcesContent": ["export default function ascending(a, b) {\n  return a == null || b == null ? NaN : a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n}\n", "import ascending from \"./ascending.js\";\n\nexport default function bisector(f) {\n  let delta = f;\n  let compare1 = f;\n  let compare2 = f;\n\n  if (f.length !== 2) {\n    delta = (d, x) => f(d) - x;\n    compare1 = ascending;\n    compare2 = (d, x) => ascending(f(d), x);\n  }\n\n  function left(a, x, lo = 0, hi = a.length) {\n    if (lo < hi) {\n      if (compare1(x, x) !== 0) return hi;\n      do {\n        const mid = (lo + hi) >>> 1;\n        if (compare2(a[mid], x) < 0) lo = mid + 1;\n        else hi = mid;\n      } while (lo < hi);\n    }\n    return lo;\n  }\n\n  function right(a, x, lo = 0, hi = a.length) {\n    if (lo < hi) {\n      if (compare1(x, x) !== 0) return hi;\n      do {\n        const mid = (lo + hi) >>> 1;\n        if (compare2(a[mid], x) <= 0) lo = mid + 1;\n        else hi = mid;\n      } while (lo < hi);\n    }\n    return lo;\n  }\n\n  function center(a, x, lo = 0, hi = a.length) {\n    const i = left(a, x, lo, hi - 1);\n    return i > lo && delta(a[i - 1], x) > -delta(a[i], x) ? i - 1 : i;\n  }\n\n  return {left, center, right};\n}\n", "export default function number(x) {\n  return x === null ? NaN : +x;\n}\n\nexport function* numbers(values, valueof) {\n  if (valueof === undefined) {\n    for (let value of values) {\n      if (value != null && (value = +value) >= value) {\n        yield value;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {\n        yield value;\n      }\n    }\n  }\n}\n", "import ascending from \"./ascending.js\";\nimport bisector from \"./bisector.js\";\nimport number from \"./number.js\";\n\nconst ascendingBisect = bisector(ascending);\nexport const bisectRight = ascendingBisect.right;\nexport const bisectLeft = ascendingBisect.left;\nexport const bisectCenter = bisector(number).center;\nexport default bisectRight;\n", "// https://github.com/python/cpython/blob/a74eea238f5baba15797e2e8b570d153bc8690a7/Modules/mathmodule.c#L1423\nexport class Adder {\n  constructor() {\n    this._partials = new Float64Array(32);\n    this._n = 0;\n  }\n  add(x) {\n    const p = this._partials;\n    let i = 0;\n    for (let j = 0; j < this._n && j < 32; j++) {\n      const y = p[j],\n        hi = x + y,\n        lo = Math.abs(x) < Math.abs(y) ? x - (hi - y) : y - (hi - x);\n      if (lo) p[i++] = lo;\n      x = hi;\n    }\n    p[i] = x;\n    this._n = i + 1;\n    return this;\n  }\n  valueOf() {\n    const p = this._partials;\n    let n = this._n, x, y, lo, hi = 0;\n    if (n > 0) {\n      hi = p[--n];\n      while (n > 0) {\n        x = hi;\n        y = p[--n];\n        hi = x + y;\n        lo = y - (hi - x);\n        if (lo) break;\n      }\n      if (n > 0 && ((lo < 0 && p[n - 1] < 0) || (lo > 0 && p[n - 1] > 0))) {\n        y = lo * 2;\n        x = hi + y;\n        if (y == x - hi) hi = x;\n      }\n    }\n    return hi;\n  }\n}\n\nexport function fsum(values, valueof) {\n  const adder = new Adder();\n  if (valueof === undefined) {\n    for (let value of values) {\n      if (value = +value) {\n        adder.add(value);\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if (value = +valueof(value, ++index, values)) {\n        adder.add(value);\n      }\n    }\n  }\n  return +adder;\n}\n\nexport function fcumsum(values, valueof) {\n  const adder = new Adder();\n  let index = -1;\n  return Float64Array.from(values, valueof === undefined\n      ? v => adder.add(+v || 0)\n      : v => adder.add(+valueof(v, ++index, values) || 0)\n  );\n}\n", "var array = Array.prototype;\n\nexport var slice = array.slice;\nexport var map = array.map;\n", "var e10 = Math.sqrt(50),\n    e5 = Math.sqrt(10),\n    e2 = Math.sqrt(2);\n\nexport default function ticks(start, stop, count) {\n  var reverse,\n      i = -1,\n      n,\n      ticks,\n      step;\n\n  stop = +stop, start = +start, count = +count;\n  if (start === stop && count > 0) return [start];\n  if (reverse = stop < start) n = start, start = stop, stop = n;\n  if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];\n\n  if (step > 0) {\n    let r0 = Math.round(start / step), r1 = Math.round(stop / step);\n    if (r0 * step < start) ++r0;\n    if (r1 * step > stop) --r1;\n    ticks = new Array(n = r1 - r0 + 1);\n    while (++i < n) ticks[i] = (r0 + i) * step;\n  } else {\n    step = -step;\n    let r0 = Math.round(start * step), r1 = Math.round(stop * step);\n    if (r0 / step < start) ++r0;\n    if (r1 / step > stop) --r1;\n    ticks = new Array(n = r1 - r0 + 1);\n    while (++i < n) ticks[i] = (r0 + i) / step;\n  }\n\n  if (reverse) ticks.reverse();\n\n  return ticks;\n}\n\nexport function tickIncrement(start, stop, count) {\n  var step = (stop - start) / Math.max(0, count),\n      power = Math.floor(Math.log(step) / Math.LN10),\n      error = step / Math.pow(10, power);\n  return power >= 0\n      ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power)\n      : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);\n}\n\nexport function tickStep(start, stop, count) {\n  var step0 = Math.abs(stop - start) / Math.max(0, count),\n      step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),\n      error = step0 / step1;\n  if (error >= e10) step1 *= 10;\n  else if (error >= e5) step1 *= 5;\n  else if (error >= e2) step1 *= 2;\n  return stop < start ? -step1 : step1;\n}\n", "function* flatten(arrays) {\n  for (const array of arrays) {\n    yield* array;\n  }\n}\n\nexport default function merge(arrays) {\n  return Array.from(flatten(arrays));\n}\n", "export default function range(start, stop, step) {\n  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;\n\n  var i = -1,\n      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,\n      range = new Array(n);\n\n  while (++i < n) {\n    range[i] = start + i * step;\n  }\n\n  return range;\n}\n", "export default shuffler(Math.random);\n\nexport function shuffler(random) {\n  return function shuffle(array, i0 = 0, i1 = array.length) {\n    let m = i1 - (i0 = +i0);\n    while (m) {\n      const i = random() * m-- | 0, t = array[m + i0];\n      array[m + i0] = array[i + i0];\n      array[i + i0] = t;\n    }\n    return array;\n  };\n}\n", "export var epsilon = 1e-6;\nexport var epsilon2 = 1e-12;\nexport var pi = Math.PI;\nexport var halfPi = pi / 2;\nexport var quarterPi = pi / 4;\nexport var tau = pi * 2;\n\nexport var degrees = 180 / pi;\nexport var radians = pi / 180;\n\nexport var abs = Math.abs;\nexport var atan = Math.atan;\nexport var atan2 = Math.atan2;\nexport var cos = Math.cos;\nexport var ceil = Math.ceil;\nexport var exp = Math.exp;\nexport var floor = Math.floor;\nexport var hypot = Math.hypot;\nexport var log = Math.log;\nexport var pow = Math.pow;\nexport var sin = Math.sin;\nexport var sign = Math.sign || function(x) { return x > 0 ? 1 : x < 0 ? -1 : 0; };\nexport var sqrt = Math.sqrt;\nexport var tan = Math.tan;\n\nexport function acos(x) {\n  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);\n}\n\nexport function asin(x) {\n  return x > 1 ? halfPi : x < -1 ? -halfPi : Math.asin(x);\n}\n\nexport function haversin(x) {\n  return (x = sin(x / 2)) * x;\n}\n", "export default function noop() {}\n", "function streamGeometry(geometry, stream) {\n  if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {\n    streamGeometryType[geometry.type](geometry, stream);\n  }\n}\n\nvar streamObjectType = {\n  Feature: function(object, stream) {\n    streamGeometry(object.geometry, stream);\n  },\n  FeatureCollection: function(object, stream) {\n    var features = object.features, i = -1, n = features.length;\n    while (++i < n) streamGeometry(features[i].geometry, stream);\n  }\n};\n\nvar streamGeometryType = {\n  Sphere: function(object, stream) {\n    stream.sphere();\n  },\n  Point: function(object, stream) {\n    object = object.coordinates;\n    stream.point(object[0], object[1], object[2]);\n  },\n  MultiPoint: function(object, stream) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) object = coordinates[i], stream.point(object[0], object[1], object[2]);\n  },\n  LineString: function(object, stream) {\n    streamLine(object.coordinates, stream, 0);\n  },\n  MultiLineString: function(object, stream) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) streamLine(coordinates[i], stream, 0);\n  },\n  Polygon: function(object, stream) {\n    streamPolygon(object.coordinates, stream);\n  },\n  MultiPolygon: function(object, stream) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) streamPolygon(coordinates[i], stream);\n  },\n  GeometryCollection: function(object, stream) {\n    var geometries = object.geometries, i = -1, n = geometries.length;\n    while (++i < n) streamGeometry(geometries[i], stream);\n  }\n};\n\nfunction streamLine(coordinates, stream, closed) {\n  var i = -1, n = coordinates.length - closed, coordinate;\n  stream.lineStart();\n  while (++i < n) coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);\n  stream.lineEnd();\n}\n\nfunction streamPolygon(coordinates, stream) {\n  var i = -1, n = coordinates.length;\n  stream.polygonStart();\n  while (++i < n) streamLine(coordinates[i], stream, 1);\n  stream.polygonEnd();\n}\n\nexport default function(object, stream) {\n  if (object && streamObjectType.hasOwnProperty(object.type)) {\n    streamObjectType[object.type](object, stream);\n  } else {\n    streamGeometry(object, stream);\n  }\n}\n", "import {Adder} from \"d3-array\";\nimport {atan2, cos, quarterPi, radians, sin, tau} from \"./math.js\";\nimport noop from \"./noop.js\";\nimport stream from \"./stream.js\";\n\nexport var areaRingSum = new Adder();\n\n// hello?\n\nvar areaSum = new Adder(),\n    lambda00,\n    phi00,\n    lambda0,\n    cosPhi0,\n    sinPhi0;\n\nexport var areaStream = {\n  point: noop,\n  lineStart: noop,\n  lineEnd: noop,\n  polygonStart: function() {\n    areaRingSum = new Adder();\n    areaStream.lineStart = areaRingStart;\n    areaStream.lineEnd = areaRingEnd;\n  },\n  polygonEnd: function() {\n    var areaRing = +areaRingSum;\n    areaSum.add(areaRing < 0 ? tau + areaRing : areaRing);\n    this.lineStart = this.lineEnd = this.point = noop;\n  },\n  sphere: function() {\n    areaSum.add(tau);\n  }\n};\n\nfunction areaRingStart() {\n  areaStream.point = areaPointFirst;\n}\n\nfunction areaRingEnd() {\n  areaPoint(lambda00, phi00);\n}\n\nfunction areaPointFirst(lambda, phi) {\n  areaStream.point = areaPoint;\n  lambda00 = lambda, phi00 = phi;\n  lambda *= radians, phi *= radians;\n  lambda0 = lambda, cosPhi0 = cos(phi = phi / 2 + quarterPi), sinPhi0 = sin(phi);\n}\n\nfunction areaPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  phi = phi / 2 + quarterPi; // half the angular distance from south pole\n\n  // Spherical excess E for a spherical triangle with vertices: south pole,\n  // previous point, current point.  Uses a formula derived from Cagnoli\u2019s\n  // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).\n  var dLambda = lambda - lambda0,\n      sdLambda = dLambda >= 0 ? 1 : -1,\n      adLambda = sdLambda * dLambda,\n      cosPhi = cos(phi),\n      sinPhi = sin(phi),\n      k = sinPhi0 * sinPhi,\n      u = cosPhi0 * cosPhi + k * cos(adLambda),\n      v = k * sdLambda * sin(adLambda);\n  areaRingSum.add(atan2(v, u));\n\n  // Advance the previous points.\n  lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;\n}\n\nexport default function(object) {\n  areaSum = new Adder();\n  stream(object, areaStream);\n  return areaSum * 2;\n}\n", "import {asin, atan2, cos, sin, sqrt} from \"./math.js\";\n\nexport function spherical(cartesian) {\n  return [atan2(cartesian[1], cartesian[0]), asin(cartesian[2])];\n}\n\nexport function cartesian(spherical) {\n  var lambda = spherical[0], phi = spherical[1], cosPhi = cos(phi);\n  return [cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi)];\n}\n\nexport function cartesianDot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n\nexport function cartesianCross(a, b) {\n  return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];\n}\n\n// TODO return a\nexport function cartesianAddInPlace(a, b) {\n  a[0] += b[0], a[1] += b[1], a[2] += b[2];\n}\n\nexport function cartesianScale(vector, k) {\n  return [vector[0] * k, vector[1] * k, vector[2] * k];\n}\n\n// TODO return d\nexport function cartesianNormalizeInPlace(d) {\n  var l = sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);\n  d[0] /= l, d[1] /= l, d[2] /= l;\n}\n", "import {Adder} from \"d3-array\";\nimport {areaStream, areaRingSum} from \"./area.js\";\nimport {cartesian, cartesianCross, cartesianNormalizeInPlace, spherical} from \"./cartesian.js\";\nimport {abs, degrees, epsilon, radians} from \"./math.js\";\nimport stream from \"./stream.js\";\n\nvar lambda0, phi0, lambda1, phi1, // bounds\n    lambda2, // previous lambda-coordinate\n    lambda00, phi00, // first point\n    p0, // previous 3D point\n    deltaSum,\n    ranges,\n    range;\n\nvar boundsStream = {\n  point: boundsPoint,\n  lineStart: boundsLineStart,\n  lineEnd: boundsLineEnd,\n  polygonStart: function() {\n    boundsStream.point = boundsRingPoint;\n    boundsStream.lineStart = boundsRingStart;\n    boundsStream.lineEnd = boundsRingEnd;\n    deltaSum = new Adder();\n    areaStream.polygonStart();\n  },\n  polygonEnd: function() {\n    areaStream.polygonEnd();\n    boundsStream.point = boundsPoint;\n    boundsStream.lineStart = boundsLineStart;\n    boundsStream.lineEnd = boundsLineEnd;\n    if (areaRingSum < 0) lambda0 = -(lambda1 = 180), phi0 = -(phi1 = 90);\n    else if (deltaSum > epsilon) phi1 = 90;\n    else if (deltaSum < -epsilon) phi0 = -90;\n    range[0] = lambda0, range[1] = lambda1;\n  },\n  sphere: function() {\n    lambda0 = -(lambda1 = 180), phi0 = -(phi1 = 90);\n  }\n};\n\nfunction boundsPoint(lambda, phi) {\n  ranges.push(range = [lambda0 = lambda, lambda1 = lambda]);\n  if (phi < phi0) phi0 = phi;\n  if (phi > phi1) phi1 = phi;\n}\n\nfunction linePoint(lambda, phi) {\n  var p = cartesian([lambda * radians, phi * radians]);\n  if (p0) {\n    var normal = cartesianCross(p0, p),\n        equatorial = [normal[1], -normal[0], 0],\n        inflection = cartesianCross(equatorial, normal);\n    cartesianNormalizeInPlace(inflection);\n    inflection = spherical(inflection);\n    var delta = lambda - lambda2,\n        sign = delta > 0 ? 1 : -1,\n        lambdai = inflection[0] * degrees * sign,\n        phii,\n        antimeridian = abs(delta) > 180;\n    if (antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {\n      phii = inflection[1] * degrees;\n      if (phii > phi1) phi1 = phii;\n    } else if (lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {\n      phii = -inflection[1] * degrees;\n      if (phii < phi0) phi0 = phii;\n    } else {\n      if (phi < phi0) phi0 = phi;\n      if (phi > phi1) phi1 = phi;\n    }\n    if (antimeridian) {\n      if (lambda < lambda2) {\n        if (angle(lambda0, lambda) > angle(lambda0, lambda1)) lambda1 = lambda;\n      } else {\n        if (angle(lambda, lambda1) > angle(lambda0, lambda1)) lambda0 = lambda;\n      }\n    } else {\n      if (lambda1 >= lambda0) {\n        if (lambda < lambda0) lambda0 = lambda;\n        if (lambda > lambda1) lambda1 = lambda;\n      } else {\n        if (lambda > lambda2) {\n          if (angle(lambda0, lambda) > angle(lambda0, lambda1)) lambda1 = lambda;\n        } else {\n          if (angle(lambda, lambda1) > angle(lambda0, lambda1)) lambda0 = lambda;\n        }\n      }\n    }\n  } else {\n    ranges.push(range = [lambda0 = lambda, lambda1 = lambda]);\n  }\n  if (phi < phi0) phi0 = phi;\n  if (phi > phi1) phi1 = phi;\n  p0 = p, lambda2 = lambda;\n}\n\nfunction boundsLineStart() {\n  boundsStream.point = linePoint;\n}\n\nfunction boundsLineEnd() {\n  range[0] = lambda0, range[1] = lambda1;\n  boundsStream.point = boundsPoint;\n  p0 = null;\n}\n\nfunction boundsRingPoint(lambda, phi) {\n  if (p0) {\n    var delta = lambda - lambda2;\n    deltaSum.add(abs(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta);\n  } else {\n    lambda00 = lambda, phi00 = phi;\n  }\n  areaStream.point(lambda, phi);\n  linePoint(lambda, phi);\n}\n\nfunction boundsRingStart() {\n  areaStream.lineStart();\n}\n\nfunction boundsRingEnd() {\n  boundsRingPoint(lambda00, phi00);\n  areaStream.lineEnd();\n  if (abs(deltaSum) > epsilon) lambda0 = -(lambda1 = 180);\n  range[0] = lambda0, range[1] = lambda1;\n  p0 = null;\n}\n\n// Finds the left-right distance between two longitudes.\n// This is almost the same as (lambda1 - lambda0 + 360\u00B0) % 360\u00B0, except that we want\n// the distance between \u00B1180\u00B0 to be 360\u00B0.\nfunction angle(lambda0, lambda1) {\n  return (lambda1 -= lambda0) < 0 ? lambda1 + 360 : lambda1;\n}\n\nfunction rangeCompare(a, b) {\n  return a[0] - b[0];\n}\n\nfunction rangeContains(range, x) {\n  return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;\n}\n\nexport default function(feature) {\n  var i, n, a, b, merged, deltaMax, delta;\n\n  phi1 = lambda1 = -(lambda0 = phi0 = Infinity);\n  ranges = [];\n  stream(feature, boundsStream);\n\n  // First, sort ranges by their minimum longitudes.\n  if (n = ranges.length) {\n    ranges.sort(rangeCompare);\n\n    // Then, merge any ranges that overlap.\n    for (i = 1, a = ranges[0], merged = [a]; i < n; ++i) {\n      b = ranges[i];\n      if (rangeContains(a, b[0]) || rangeContains(a, b[1])) {\n        if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];\n        if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];\n      } else {\n        merged.push(a = b);\n      }\n    }\n\n    // Finally, find the largest gap between the merged ranges.\n    // The final bounding box will be the inverse of this gap.\n    for (deltaMax = -Infinity, n = merged.length - 1, i = 0, a = merged[n]; i <= n; a = b, ++i) {\n      b = merged[i];\n      if ((delta = angle(a[1], b[0])) > deltaMax) deltaMax = delta, lambda0 = b[0], lambda1 = a[1];\n    }\n  }\n\n  ranges = range = null;\n\n  return lambda0 === Infinity || phi0 === Infinity\n      ? [[NaN, NaN], [NaN, NaN]]\n      : [[lambda0, phi0], [lambda1, phi1]];\n}\n", "import {Adder} from \"d3-array\";\nimport {asin, atan2, cos, degrees, epsilon, epsilon2, hypot, radians, sin, sqrt} from \"./math.js\";\nimport noop from \"./noop.js\";\nimport stream from \"./stream.js\";\n\nvar W0, W1,\n    X0, Y0, Z0,\n    X1, Y1, Z1,\n    X2, Y2, Z2,\n    lambda00, phi00, // first point\n    x0, y0, z0; // previous point\n\nvar centroidStream = {\n  sphere: noop,\n  point: centroidPoint,\n  lineStart: centroidLineStart,\n  lineEnd: centroidLineEnd,\n  polygonStart: function() {\n    centroidStream.lineStart = centroidRingStart;\n    centroidStream.lineEnd = centroidRingEnd;\n  },\n  polygonEnd: function() {\n    centroidStream.lineStart = centroidLineStart;\n    centroidStream.lineEnd = centroidLineEnd;\n  }\n};\n\n// Arithmetic mean of Cartesian vectors.\nfunction centroidPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi);\n  centroidPointCartesian(cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi));\n}\n\nfunction centroidPointCartesian(x, y, z) {\n  ++W0;\n  X0 += (x - X0) / W0;\n  Y0 += (y - Y0) / W0;\n  Z0 += (z - Z0) / W0;\n}\n\nfunction centroidLineStart() {\n  centroidStream.point = centroidLinePointFirst;\n}\n\nfunction centroidLinePointFirst(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi);\n  x0 = cosPhi * cos(lambda);\n  y0 = cosPhi * sin(lambda);\n  z0 = sin(phi);\n  centroidStream.point = centroidLinePoint;\n  centroidPointCartesian(x0, y0, z0);\n}\n\nfunction centroidLinePoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi),\n      x = cosPhi * cos(lambda),\n      y = cosPhi * sin(lambda),\n      z = sin(phi),\n      w = atan2(sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);\n  W1 += w;\n  X1 += w * (x0 + (x0 = x));\n  Y1 += w * (y0 + (y0 = y));\n  Z1 += w * (z0 + (z0 = z));\n  centroidPointCartesian(x0, y0, z0);\n}\n\nfunction centroidLineEnd() {\n  centroidStream.point = centroidPoint;\n}\n\n// See J. E. Brock, The Inertia Tensor for a Spherical Triangle,\n// J. Applied Mechanics 42, 239 (1975).\nfunction centroidRingStart() {\n  centroidStream.point = centroidRingPointFirst;\n}\n\nfunction centroidRingEnd() {\n  centroidRingPoint(lambda00, phi00);\n  centroidStream.point = centroidPoint;\n}\n\nfunction centroidRingPointFirst(lambda, phi) {\n  lambda00 = lambda, phi00 = phi;\n  lambda *= radians, phi *= radians;\n  centroidStream.point = centroidRingPoint;\n  var cosPhi = cos(phi);\n  x0 = cosPhi * cos(lambda);\n  y0 = cosPhi * sin(lambda);\n  z0 = sin(phi);\n  centroidPointCartesian(x0, y0, z0);\n}\n\nfunction centroidRingPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi),\n      x = cosPhi * cos(lambda),\n      y = cosPhi * sin(lambda),\n      z = sin(phi),\n      cx = y0 * z - z0 * y,\n      cy = z0 * x - x0 * z,\n      cz = x0 * y - y0 * x,\n      m = hypot(cx, cy, cz),\n      w = asin(m), // line weight = angle\n      v = m && -w / m; // area weight multiplier\n  X2.add(v * cx);\n  Y2.add(v * cy);\n  Z2.add(v * cz);\n  W1 += w;\n  X1 += w * (x0 + (x0 = x));\n  Y1 += w * (y0 + (y0 = y));\n  Z1 += w * (z0 + (z0 = z));\n  centroidPointCartesian(x0, y0, z0);\n}\n\nexport default function(object) {\n  W0 = W1 =\n  X0 = Y0 = Z0 =\n  X1 = Y1 = Z1 = 0;\n  X2 = new Adder();\n  Y2 = new Adder();\n  Z2 = new Adder();\n  stream(object, centroidStream);\n\n  var x = +X2,\n      y = +Y2,\n      z = +Z2,\n      m = hypot(x, y, z);\n\n  // If the area-weighted ccentroid is undefined, fall back to length-weighted ccentroid.\n  if (m < epsilon2) {\n    x = X1, y = Y1, z = Z1;\n    // If the feature has zero length, fall back to arithmetic mean of point vectors.\n    if (W1 < epsilon) x = X0, y = Y0, z = Z0;\n    m = hypot(x, y, z);\n    // If the feature still has an undefined ccentroid, then return.\n    if (m < epsilon2) return [NaN, NaN];\n  }\n\n  return [atan2(y, x) * degrees, asin(z / m) * degrees];\n}\n", "export default function(x) {\n  return function() {\n    return x;\n  };\n}\n", "export default function(a, b) {\n\n  function compose(x, y) {\n    return x = a(x, y), b(x[0], x[1]);\n  }\n\n  if (a.invert && b.invert) compose.invert = function(x, y) {\n    return x = b.invert(x, y), x && a.invert(x[0], x[1]);\n  };\n\n  return compose;\n}\n", "import compose from \"./compose.js\";\nimport {abs, asin, atan2, cos, degrees, pi, radians, sin, tau} from \"./math.js\";\n\nfunction rotationIdentity(lambda, phi) {\n  return [abs(lambda) > pi ? lambda + Math.round(-lambda / tau) * tau : lambda, phi];\n}\n\nrotationIdentity.invert = rotationIdentity;\n\nexport function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {\n  return (deltaLambda %= tau) ? (deltaPhi || deltaGamma ? compose(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma))\n    : rotationLambda(deltaLambda))\n    : (deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma)\n    : rotationIdentity);\n}\n\nfunction forwardRotationLambda(deltaLambda) {\n  return function(lambda, phi) {\n    return lambda += deltaLambda, [lambda > pi ? lambda - tau : lambda < -pi ? lambda + tau : lambda, phi];\n  };\n}\n\nfunction rotationLambda(deltaLambda) {\n  var rotation = forwardRotationLambda(deltaLambda);\n  rotation.invert = forwardRotationLambda(-deltaLambda);\n  return rotation;\n}\n\nfunction rotationPhiGamma(deltaPhi, deltaGamma) {\n  var cosDeltaPhi = cos(deltaPhi),\n      sinDeltaPhi = sin(deltaPhi),\n      cosDeltaGamma = cos(deltaGamma),\n      sinDeltaGamma = sin(deltaGamma);\n\n  function rotation(lambda, phi) {\n    var cosPhi = cos(phi),\n        x = cos(lambda) * cosPhi,\n        y = sin(lambda) * cosPhi,\n        z = sin(phi),\n        k = z * cosDeltaPhi + x * sinDeltaPhi;\n    return [\n      atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi),\n      asin(k * cosDeltaGamma + y * sinDeltaGamma)\n    ];\n  }\n\n  rotation.invert = function(lambda, phi) {\n    var cosPhi = cos(phi),\n        x = cos(lambda) * cosPhi,\n        y = sin(lambda) * cosPhi,\n        z = sin(phi),\n        k = z * cosDeltaGamma - y * sinDeltaGamma;\n    return [\n      atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi),\n      asin(k * cosDeltaPhi - x * sinDeltaPhi)\n    ];\n  };\n\n  return rotation;\n}\n\nexport default function(rotate) {\n  rotate = rotateRadians(rotate[0] * radians, rotate[1] * radians, rotate.length > 2 ? rotate[2] * radians : 0);\n\n  function forward(coordinates) {\n    coordinates = rotate(coordinates[0] * radians, coordinates[1] * radians);\n    return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;\n  }\n\n  forward.invert = function(coordinates) {\n    coordinates = rotate.invert(coordinates[0] * radians, coordinates[1] * radians);\n    return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;\n  };\n\n  return forward;\n}\n", "import {cartesian, cartesianNormalizeInPlace, spherical} from \"./cartesian.js\";\nimport constant from \"./constant.js\";\nimport {acos, cos, degrees, epsilon, radians, sin, tau} from \"./math.js\";\nimport {rotateRadians} from \"./rotation.js\";\n\n// Generates a circle centered at [0\u00B0, 0\u00B0], with a given radius and precision.\nexport function circleStream(stream, radius, delta, direction, t0, t1) {\n  if (!delta) return;\n  var cosRadius = cos(radius),\n      sinRadius = sin(radius),\n      step = direction * delta;\n  if (t0 == null) {\n    t0 = radius + direction * tau;\n    t1 = radius - step / 2;\n  } else {\n    t0 = circleRadius(cosRadius, t0);\n    t1 = circleRadius(cosRadius, t1);\n    if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * tau;\n  }\n  for (var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {\n    point = spherical([cosRadius, -sinRadius * cos(t), -sinRadius * sin(t)]);\n    stream.point(point[0], point[1]);\n  }\n}\n\n// Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].\nfunction circleRadius(cosRadius, point) {\n  point = cartesian(point), point[0] -= cosRadius;\n  cartesianNormalizeInPlace(point);\n  var radius = acos(-point[1]);\n  return ((-point[2] < 0 ? -radius : radius) + tau - epsilon) % tau;\n}\n\nexport default function() {\n  var center = constant([0, 0]),\n      radius = constant(90),\n      precision = constant(6),\n      ring,\n      rotate,\n      stream = {point: point};\n\n  function point(x, y) {\n    ring.push(x = rotate(x, y));\n    x[0] *= degrees, x[1] *= degrees;\n  }\n\n  function circle() {\n    var c = center.apply(this, arguments),\n        r = radius.apply(this, arguments) * radians,\n        p = precision.apply(this, arguments) * radians;\n    ring = [];\n    rotate = rotateRadians(-c[0] * radians, -c[1] * radians, 0).invert;\n    circleStream(stream, r, p, 1);\n    c = {type: \"Polygon\", coordinates: [ring]};\n    ring = rotate = null;\n    return c;\n  }\n\n  circle.center = function(_) {\n    return arguments.length ? (center = typeof _ === \"function\" ? _ : constant([+_[0], +_[1]]), circle) : center;\n  };\n\n  circle.radius = function(_) {\n    return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant(+_), circle) : radius;\n  };\n\n  circle.precision = function(_) {\n    return arguments.length ? (precision = typeof _ === \"function\" ? _ : constant(+_), circle) : precision;\n  };\n\n  return circle;\n}\n", "import noop from \"../noop.js\";\n\nexport default function() {\n  var lines = [],\n      line;\n  return {\n    point: function(x, y, m) {\n      line.push([x, y, m]);\n    },\n    lineStart: function() {\n      lines.push(line = []);\n    },\n    lineEnd: noop,\n    rejoin: function() {\n      if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));\n    },\n    result: function() {\n      var result = lines;\n      lines = [];\n      line = null;\n      return result;\n    }\n  };\n}\n", "import {abs, epsilon} from \"./math.js\";\n\nexport default function(a, b) {\n  return abs(a[0] - b[0]) < epsilon && abs(a[1] - b[1]) < epsilon;\n}\n", "import pointEqual from \"../pointEqual.js\";\nimport {epsilon} from \"../math.js\";\n\nfunction Intersection(point, points, other, entry) {\n  this.x = point;\n  this.z = points;\n  this.o = other; // another intersection\n  this.e = entry; // is an entry?\n  this.v = false; // visited\n  this.n = this.p = null; // next & previous\n}\n\n// A generalized polygon clipping algorithm: given a polygon that has been cut\n// into its visible line segments, and rejoins the segments by interpolating\n// along the clip edge.\nexport default function(segments, compareIntersection, startInside, interpolate, stream) {\n  var subject = [],\n      clip = [],\n      i,\n      n;\n\n  segments.forEach(function(segment) {\n    if ((n = segment.length - 1) <= 0) return;\n    var n, p0 = segment[0], p1 = segment[n], x;\n\n    if (pointEqual(p0, p1)) {\n      if (!p0[2] && !p1[2]) {\n        stream.lineStart();\n        for (i = 0; i < n; ++i) stream.point((p0 = segment[i])[0], p0[1]);\n        stream.lineEnd();\n        return;\n      }\n      // handle degenerate cases by moving the point\n      p1[0] += 2 * epsilon;\n    }\n\n    subject.push(x = new Intersection(p0, segment, null, true));\n    clip.push(x.o = new Intersection(p0, null, x, false));\n    subject.push(x = new Intersection(p1, segment, null, false));\n    clip.push(x.o = new Intersection(p1, null, x, true));\n  });\n\n  if (!subject.length) return;\n\n  clip.sort(compareIntersection);\n  link(subject);\n  link(clip);\n\n  for (i = 0, n = clip.length; i < n; ++i) {\n    clip[i].e = startInside = !startInside;\n  }\n\n  var start = subject[0],\n      points,\n      point;\n\n  while (1) {\n    // Find first unvisited intersection.\n    var current = start,\n        isSubject = true;\n    while (current.v) if ((current = current.n) === start) return;\n    points = current.z;\n    stream.lineStart();\n    do {\n      current.v = current.o.v = true;\n      if (current.e) {\n        if (isSubject) {\n          for (i = 0, n = points.length; i < n; ++i) stream.point((point = points[i])[0], point[1]);\n        } else {\n          interpolate(current.x, current.n.x, 1, stream);\n        }\n        current = current.n;\n      } else {\n        if (isSubject) {\n          points = current.p.z;\n          for (i = points.length - 1; i >= 0; --i) stream.point((point = points[i])[0], point[1]);\n        } else {\n          interpolate(current.x, current.p.x, -1, stream);\n        }\n        current = current.p;\n      }\n      current = current.o;\n      points = current.z;\n      isSubject = !isSubject;\n    } while (!current.v);\n    stream.lineEnd();\n  }\n}\n\nfunction link(array) {\n  if (!(n = array.length)) return;\n  var n,\n      i = 0,\n      a = array[0],\n      b;\n  while (++i < n) {\n    a.n = b = array[i];\n    b.p = a;\n    a = b;\n  }\n  a.n = b = array[0];\n  b.p = a;\n}\n", "import {Adder} from \"d3-array\";\nimport {cartesian, cartesianCross, cartesianNormalizeInPlace} from \"./cartesian.js\";\nimport {abs, asin, atan2, cos, epsilon, epsilon2, halfPi, pi, quarterPi, sign, sin, tau} from \"./math.js\";\n\nfunction longitude(point) {\n  return abs(point[0]) <= pi ? point[0] : sign(point[0]) * ((abs(point[0]) + pi) % tau - pi);\n}\n\nexport default function(polygon, point) {\n  var lambda = longitude(point),\n      phi = point[1],\n      sinPhi = sin(phi),\n      normal = [sin(lambda), -cos(lambda), 0],\n      angle = 0,\n      winding = 0;\n\n  var sum = new Adder();\n\n  if (sinPhi === 1) phi = halfPi + epsilon;\n  else if (sinPhi === -1) phi = -halfPi - epsilon;\n\n  for (var i = 0, n = polygon.length; i < n; ++i) {\n    if (!(m = (ring = polygon[i]).length)) continue;\n    var ring,\n        m,\n        point0 = ring[m - 1],\n        lambda0 = longitude(point0),\n        phi0 = point0[1] / 2 + quarterPi,\n        sinPhi0 = sin(phi0),\n        cosPhi0 = cos(phi0);\n\n    for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {\n      var point1 = ring[j],\n          lambda1 = longitude(point1),\n          phi1 = point1[1] / 2 + quarterPi,\n          sinPhi1 = sin(phi1),\n          cosPhi1 = cos(phi1),\n          delta = lambda1 - lambda0,\n          sign = delta >= 0 ? 1 : -1,\n          absDelta = sign * delta,\n          antimeridian = absDelta > pi,\n          k = sinPhi0 * sinPhi1;\n\n      sum.add(atan2(k * sign * sin(absDelta), cosPhi0 * cosPhi1 + k * cos(absDelta)));\n      angle += antimeridian ? delta + sign * tau : delta;\n\n      // Are the longitudes either side of the point\u2019s meridian (lambda),\n      // and are the latitudes smaller than the parallel (phi)?\n      if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {\n        var arc = cartesianCross(cartesian(point0), cartesian(point1));\n        cartesianNormalizeInPlace(arc);\n        var intersection = cartesianCross(normal, arc);\n        cartesianNormalizeInPlace(intersection);\n        var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin(intersection[2]);\n        if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {\n          winding += antimeridian ^ delta >= 0 ? 1 : -1;\n        }\n      }\n    }\n  }\n\n  // First, determine whether the South pole is inside or outside:\n  //\n  // It is inside if:\n  // * the polygon winds around it in a clockwise direction.\n  // * the polygon does not (cumulatively) wind around it, but has a negative\n  //   (counter-clockwise) area.\n  //\n  // Second, count the (signed) number of times a segment crosses a lambda\n  // from the point to the South pole.  If it is zero, then the point is the\n  // same side as the South pole.\n\n  return (angle < -epsilon || angle < epsilon && sum < -epsilon2) ^ (winding & 1);\n}\n", "import clipBuffer from \"./buffer.js\";\nimport clipRejoin from \"./rejoin.js\";\nimport {epsilon, halfPi} from \"../math.js\";\nimport polygonContains from \"../polygonContains.js\";\nimport {merge} from \"d3-array\";\n\nexport default function(pointVisible, clipLine, interpolate, start) {\n  return function(sink) {\n    var line = clipLine(sink),\n        ringBuffer = clipBuffer(),\n        ringSink = clipLine(ringBuffer),\n        polygonStarted = false,\n        polygon,\n        segments,\n        ring;\n\n    var clip = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: function() {\n        clip.point = pointRing;\n        clip.lineStart = ringStart;\n        clip.lineEnd = ringEnd;\n        segments = [];\n        polygon = [];\n      },\n      polygonEnd: function() {\n        clip.point = point;\n        clip.lineStart = lineStart;\n        clip.lineEnd = lineEnd;\n        segments = merge(segments);\n        var startInside = polygonContains(polygon, start);\n        if (segments.length) {\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n          clipRejoin(segments, compareIntersection, startInside, interpolate, sink);\n        } else if (startInside) {\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n          sink.lineStart();\n          interpolate(null, null, 1, sink);\n          sink.lineEnd();\n        }\n        if (polygonStarted) sink.polygonEnd(), polygonStarted = false;\n        segments = polygon = null;\n      },\n      sphere: function() {\n        sink.polygonStart();\n        sink.lineStart();\n        interpolate(null, null, 1, sink);\n        sink.lineEnd();\n        sink.polygonEnd();\n      }\n    };\n\n    function point(lambda, phi) {\n      if (pointVisible(lambda, phi)) sink.point(lambda, phi);\n    }\n\n    function pointLine(lambda, phi) {\n      line.point(lambda, phi);\n    }\n\n    function lineStart() {\n      clip.point = pointLine;\n      line.lineStart();\n    }\n\n    function lineEnd() {\n      clip.point = point;\n      line.lineEnd();\n    }\n\n    function pointRing(lambda, phi) {\n      ring.push([lambda, phi]);\n      ringSink.point(lambda, phi);\n    }\n\n    function ringStart() {\n      ringSink.lineStart();\n      ring = [];\n    }\n\n    function ringEnd() {\n      pointRing(ring[0][0], ring[0][1]);\n      ringSink.lineEnd();\n\n      var clean = ringSink.clean(),\n          ringSegments = ringBuffer.result(),\n          i, n = ringSegments.length, m,\n          segment,\n          point;\n\n      ring.pop();\n      polygon.push(ring);\n      ring = null;\n\n      if (!n) return;\n\n      // No intersections.\n      if (clean & 1) {\n        segment = ringSegments[0];\n        if ((m = segment.length - 1) > 0) {\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n          sink.lineStart();\n          for (i = 0; i < m; ++i) sink.point((point = segment[i])[0], point[1]);\n          sink.lineEnd();\n        }\n        return;\n      }\n\n      // Rejoin connected segments.\n      // TODO reuse ringBuffer.rejoin()?\n      if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));\n\n      segments.push(ringSegments.filter(validSegment));\n    }\n\n    return clip;\n  };\n}\n\nfunction validSegment(segment) {\n  return segment.length > 1;\n}\n\n// Intersections are sorted along the clip edge. For both antimeridian cutting\n// and circle clipping, the same comparison is used.\nfunction compareIntersection(a, b) {\n  return ((a = a.x)[0] < 0 ? a[1] - halfPi - epsilon : halfPi - a[1])\n       - ((b = b.x)[0] < 0 ? b[1] - halfPi - epsilon : halfPi - b[1]);\n}\n", "import clip from \"./index.js\";\nimport {abs, atan, cos, epsilon, halfPi, pi, sin} from \"../math.js\";\n\nexport default clip(\n  function() { return true; },\n  clipAntimeridianLine,\n  clipAntimeridianInterpolate,\n  [-pi, -halfPi]\n);\n\n// Takes a line and cuts into visible segments. Return values: 0 - there were\n// intersections or the line was empty; 1 - no intersections; 2 - there were\n// intersections, and the first and last segments should be rejoined.\nfunction clipAntimeridianLine(stream) {\n  var lambda0 = NaN,\n      phi0 = NaN,\n      sign0 = NaN,\n      clean; // no intersections\n\n  return {\n    lineStart: function() {\n      stream.lineStart();\n      clean = 1;\n    },\n    point: function(lambda1, phi1) {\n      var sign1 = lambda1 > 0 ? pi : -pi,\n          delta = abs(lambda1 - lambda0);\n      if (abs(delta - pi) < epsilon) { // line crosses a pole\n        stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? halfPi : -halfPi);\n        stream.point(sign0, phi0);\n        stream.lineEnd();\n        stream.lineStart();\n        stream.point(sign1, phi0);\n        stream.point(lambda1, phi0);\n        clean = 0;\n      } else if (sign0 !== sign1 && delta >= pi) { // line crosses antimeridian\n        if (abs(lambda0 - sign0) < epsilon) lambda0 -= sign0 * epsilon; // handle degeneracies\n        if (abs(lambda1 - sign1) < epsilon) lambda1 -= sign1 * epsilon;\n        phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);\n        stream.point(sign0, phi0);\n        stream.lineEnd();\n        stream.lineStart();\n        stream.point(sign1, phi0);\n        clean = 0;\n      }\n      stream.point(lambda0 = lambda1, phi0 = phi1);\n      sign0 = sign1;\n    },\n    lineEnd: function() {\n      stream.lineEnd();\n      lambda0 = phi0 = NaN;\n    },\n    clean: function() {\n      return 2 - clean; // if intersections, rejoin first and last segments\n    }\n  };\n}\n\nfunction clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {\n  var cosPhi0,\n      cosPhi1,\n      sinLambda0Lambda1 = sin(lambda0 - lambda1);\n  return abs(sinLambda0Lambda1) > epsilon\n      ? atan((sin(phi0) * (cosPhi1 = cos(phi1)) * sin(lambda1)\n          - sin(phi1) * (cosPhi0 = cos(phi0)) * sin(lambda0))\n          / (cosPhi0 * cosPhi1 * sinLambda0Lambda1))\n      : (phi0 + phi1) / 2;\n}\n\nfunction clipAntimeridianInterpolate(from, to, direction, stream) {\n  var phi;\n  if (from == null) {\n    phi = direction * halfPi;\n    stream.point(-pi, phi);\n    stream.point(0, phi);\n    stream.point(pi, phi);\n    stream.point(pi, 0);\n    stream.point(pi, -phi);\n    stream.point(0, -phi);\n    stream.point(-pi, -phi);\n    stream.point(-pi, 0);\n    stream.point(-pi, phi);\n  } else if (abs(from[0] - to[0]) > epsilon) {\n    var lambda = from[0] < to[0] ? pi : -pi;\n    phi = direction * lambda / 2;\n    stream.point(-lambda, phi);\n    stream.point(0, phi);\n    stream.point(lambda, phi);\n  } else {\n    stream.point(to[0], to[1]);\n  }\n}\n", "import {cartesian, cartesianAddInPlace, cartesianCross, cartesianDot, cartesianScale, spherical} from \"../cartesian.js\";\nimport {circleStream} from \"../circle.js\";\nimport {abs, cos, epsilon, pi, radians, sqrt} from \"../math.js\";\nimport pointEqual from \"../pointEqual.js\";\nimport clip from \"./index.js\";\n\nexport default function(radius) {\n  var cr = cos(radius),\n      delta = 6 * radians,\n      smallRadius = cr > 0,\n      notHemisphere = abs(cr) > epsilon; // TODO optimise for this common case\n\n  function interpolate(from, to, direction, stream) {\n    circleStream(stream, radius, delta, direction, from, to);\n  }\n\n  function visible(lambda, phi) {\n    return cos(lambda) * cos(phi) > cr;\n  }\n\n  // Takes a line and cuts into visible segments. Return values used for polygon\n  // clipping: 0 - there were intersections or the line was empty; 1 - no\n  // intersections 2 - there were intersections, and the first and last segments\n  // should be rejoined.\n  function clipLine(stream) {\n    var point0, // previous point\n        c0, // code for previous point\n        v0, // visibility of previous point\n        v00, // visibility of first point\n        clean; // no intersections\n    return {\n      lineStart: function() {\n        v00 = v0 = false;\n        clean = 1;\n      },\n      point: function(lambda, phi) {\n        var point1 = [lambda, phi],\n            point2,\n            v = visible(lambda, phi),\n            c = smallRadius\n              ? v ? 0 : code(lambda, phi)\n              : v ? code(lambda + (lambda < 0 ? pi : -pi), phi) : 0;\n        if (!point0 && (v00 = v0 = v)) stream.lineStart();\n        if (v !== v0) {\n          point2 = intersect(point0, point1);\n          if (!point2 || pointEqual(point0, point2) || pointEqual(point1, point2))\n            point1[2] = 1;\n        }\n        if (v !== v0) {\n          clean = 0;\n          if (v) {\n            // outside going in\n            stream.lineStart();\n            point2 = intersect(point1, point0);\n            stream.point(point2[0], point2[1]);\n          } else {\n            // inside going out\n            point2 = intersect(point0, point1);\n            stream.point(point2[0], point2[1], 2);\n            stream.lineEnd();\n          }\n          point0 = point2;\n        } else if (notHemisphere && point0 && smallRadius ^ v) {\n          var t;\n          // If the codes for two points are different, or are both zero,\n          // and there this segment intersects with the small circle.\n          if (!(c & c0) && (t = intersect(point1, point0, true))) {\n            clean = 0;\n            if (smallRadius) {\n              stream.lineStart();\n              stream.point(t[0][0], t[0][1]);\n              stream.point(t[1][0], t[1][1]);\n              stream.lineEnd();\n            } else {\n              stream.point(t[1][0], t[1][1]);\n              stream.lineEnd();\n              stream.lineStart();\n              stream.point(t[0][0], t[0][1], 3);\n            }\n          }\n        }\n        if (v && (!point0 || !pointEqual(point0, point1))) {\n          stream.point(point1[0], point1[1]);\n        }\n        point0 = point1, v0 = v, c0 = c;\n      },\n      lineEnd: function() {\n        if (v0) stream.lineEnd();\n        point0 = null;\n      },\n      // Rejoin first and last segments if there were intersections and the first\n      // and last points were visible.\n      clean: function() {\n        return clean | ((v00 && v0) << 1);\n      }\n    };\n  }\n\n  // Intersects the great circle between a and b with the clip circle.\n  function intersect(a, b, two) {\n    var pa = cartesian(a),\n        pb = cartesian(b);\n\n    // We have two planes, n1.p = d1 and n2.p = d2.\n    // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 \u2A2F n2).\n    var n1 = [1, 0, 0], // normal\n        n2 = cartesianCross(pa, pb),\n        n2n2 = cartesianDot(n2, n2),\n        n1n2 = n2[0], // cartesianDot(n1, n2),\n        determinant = n2n2 - n1n2 * n1n2;\n\n    // Two polar points.\n    if (!determinant) return !two && a;\n\n    var c1 =  cr * n2n2 / determinant,\n        c2 = -cr * n1n2 / determinant,\n        n1xn2 = cartesianCross(n1, n2),\n        A = cartesianScale(n1, c1),\n        B = cartesianScale(n2, c2);\n    cartesianAddInPlace(A, B);\n\n    // Solve |p(t)|^2 = 1.\n    var u = n1xn2,\n        w = cartesianDot(A, u),\n        uu = cartesianDot(u, u),\n        t2 = w * w - uu * (cartesianDot(A, A) - 1);\n\n    if (t2 < 0) return;\n\n    var t = sqrt(t2),\n        q = cartesianScale(u, (-w - t) / uu);\n    cartesianAddInPlace(q, A);\n    q = spherical(q);\n\n    if (!two) return q;\n\n    // Two intersection points.\n    var lambda0 = a[0],\n        lambda1 = b[0],\n        phi0 = a[1],\n        phi1 = b[1],\n        z;\n\n    if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;\n\n    var delta = lambda1 - lambda0,\n        polar = abs(delta - pi) < epsilon,\n        meridian = polar || delta < epsilon;\n\n    if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z;\n\n    // Check that the first point is between a and b.\n    if (meridian\n        ? polar\n          ? phi0 + phi1 > 0 ^ q[1] < (abs(q[0] - lambda0) < epsilon ? phi0 : phi1)\n          : phi0 <= q[1] && q[1] <= phi1\n        : delta > pi ^ (lambda0 <= q[0] && q[0] <= lambda1)) {\n      var q1 = cartesianScale(u, (-w + t) / uu);\n      cartesianAddInPlace(q1, A);\n      return [q, spherical(q1)];\n    }\n  }\n\n  // Generates a 4-bit vector representing the location of a point relative to\n  // the small circle's bounding box.\n  function code(lambda, phi) {\n    var r = smallRadius ? radius : pi - radius,\n        code = 0;\n    if (lambda < -r) code |= 1; // left\n    else if (lambda > r) code |= 2; // right\n    if (phi < -r) code |= 4; // below\n    else if (phi > r) code |= 8; // above\n    return code;\n  }\n\n  return clip(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-pi, radius - pi]);\n}\n", "export default function(a, b, x0, y0, x1, y1) {\n  var ax = a[0],\n      ay = a[1],\n      bx = b[0],\n      by = b[1],\n      t0 = 0,\n      t1 = 1,\n      dx = bx - ax,\n      dy = by - ay,\n      r;\n\n  r = x0 - ax;\n  if (!dx && r > 0) return;\n  r /= dx;\n  if (dx < 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  } else if (dx > 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  }\n\n  r = x1 - ax;\n  if (!dx && r < 0) return;\n  r /= dx;\n  if (dx < 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  } else if (dx > 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  }\n\n  r = y0 - ay;\n  if (!dy && r > 0) return;\n  r /= dy;\n  if (dy < 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  } else if (dy > 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  }\n\n  r = y1 - ay;\n  if (!dy && r < 0) return;\n  r /= dy;\n  if (dy < 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  } else if (dy > 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  }\n\n  if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;\n  if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;\n  return true;\n}\n", "import {abs, epsilon} from \"../math.js\";\nimport clipBuffer from \"./buffer.js\";\nimport clipLine from \"./line.js\";\nimport clipRejoin from \"./rejoin.js\";\nimport {merge} from \"d3-array\";\n\nvar clipMax = 1e9, clipMin = -clipMax;\n\n// TODO Use d3-polygon\u2019s polygonContains here for the ring check?\n// TODO Eliminate duplicate buffering in clipBuffer and polygon.push?\n\nexport default function clipRectangle(x0, y0, x1, y1) {\n\n  function visible(x, y) {\n    return x0 <= x && x <= x1 && y0 <= y && y <= y1;\n  }\n\n  function interpolate(from, to, direction, stream) {\n    var a = 0, a1 = 0;\n    if (from == null\n        || (a = corner(from, direction)) !== (a1 = corner(to, direction))\n        || comparePoint(from, to) < 0 ^ direction > 0) {\n      do stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);\n      while ((a = (a + direction + 4) % 4) !== a1);\n    } else {\n      stream.point(to[0], to[1]);\n    }\n  }\n\n  function corner(p, direction) {\n    return abs(p[0] - x0) < epsilon ? direction > 0 ? 0 : 3\n        : abs(p[0] - x1) < epsilon ? direction > 0 ? 2 : 1\n        : abs(p[1] - y0) < epsilon ? direction > 0 ? 1 : 0\n        : direction > 0 ? 3 : 2; // abs(p[1] - y1) < epsilon\n  }\n\n  function compareIntersection(a, b) {\n    return comparePoint(a.x, b.x);\n  }\n\n  function comparePoint(a, b) {\n    var ca = corner(a, 1),\n        cb = corner(b, 1);\n    return ca !== cb ? ca - cb\n        : ca === 0 ? b[1] - a[1]\n        : ca === 1 ? a[0] - b[0]\n        : ca === 2 ? a[1] - b[1]\n        : b[0] - a[0];\n  }\n\n  return function(stream) {\n    var activeStream = stream,\n        bufferStream = clipBuffer(),\n        segments,\n        polygon,\n        ring,\n        x__, y__, v__, // first point\n        x_, y_, v_, // previous point\n        first,\n        clean;\n\n    var clipStream = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: polygonStart,\n      polygonEnd: polygonEnd\n    };\n\n    function point(x, y) {\n      if (visible(x, y)) activeStream.point(x, y);\n    }\n\n    function polygonInside() {\n      var winding = 0;\n\n      for (var i = 0, n = polygon.length; i < n; ++i) {\n        for (var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j) {\n          a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];\n          if (a1 <= y1) { if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding; }\n          else { if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding; }\n        }\n      }\n\n      return winding;\n    }\n\n    // Buffer geometry within a polygon and then clip it en masse.\n    function polygonStart() {\n      activeStream = bufferStream, segments = [], polygon = [], clean = true;\n    }\n\n    function polygonEnd() {\n      var startInside = polygonInside(),\n          cleanInside = clean && startInside,\n          visible = (segments = merge(segments)).length;\n      if (cleanInside || visible) {\n        stream.polygonStart();\n        if (cleanInside) {\n          stream.lineStart();\n          interpolate(null, null, 1, stream);\n          stream.lineEnd();\n        }\n        if (visible) {\n          clipRejoin(segments, compareIntersection, startInside, interpolate, stream);\n        }\n        stream.polygonEnd();\n      }\n      activeStream = stream, segments = polygon = ring = null;\n    }\n\n    function lineStart() {\n      clipStream.point = linePoint;\n      if (polygon) polygon.push(ring = []);\n      first = true;\n      v_ = false;\n      x_ = y_ = NaN;\n    }\n\n    // TODO rather than special-case polygons, simply handle them separately.\n    // Ideally, coincident intersection points should be jittered to avoid\n    // clipping issues.\n    function lineEnd() {\n      if (segments) {\n        linePoint(x__, y__);\n        if (v__ && v_) bufferStream.rejoin();\n        segments.push(bufferStream.result());\n      }\n      clipStream.point = point;\n      if (v_) activeStream.lineEnd();\n    }\n\n    function linePoint(x, y) {\n      var v = visible(x, y);\n      if (polygon) ring.push([x, y]);\n      if (first) {\n        x__ = x, y__ = y, v__ = v;\n        first = false;\n        if (v) {\n          activeStream.lineStart();\n          activeStream.point(x, y);\n        }\n      } else {\n        if (v && v_) activeStream.point(x, y);\n        else {\n          var a = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))],\n              b = [x = Math.max(clipMin, Math.min(clipMax, x)), y = Math.max(clipMin, Math.min(clipMax, y))];\n          if (clipLine(a, b, x0, y0, x1, y1)) {\n            if (!v_) {\n              activeStream.lineStart();\n              activeStream.point(a[0], a[1]);\n            }\n            activeStream.point(b[0], b[1]);\n            if (!v) activeStream.lineEnd();\n            clean = false;\n          } else if (v) {\n            activeStream.lineStart();\n            activeStream.point(x, y);\n            clean = false;\n          }\n        }\n      }\n      x_ = x, y_ = y, v_ = v;\n    }\n\n    return clipStream;\n  };\n}\n", "import clipRectangle from \"./rectangle.js\";\n\nexport default function() {\n  var x0 = 0,\n      y0 = 0,\n      x1 = 960,\n      y1 = 500,\n      cache,\n      cacheStream,\n      clip;\n\n  return clip = {\n    stream: function(stream) {\n      return cache && cacheStream === stream ? cache : cache = clipRectangle(x0, y0, x1, y1)(cacheStream = stream);\n    },\n    extent: function(_) {\n      return arguments.length ? (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1], cache = cacheStream = null, clip) : [[x0, y0], [x1, y1]];\n    }\n  };\n}\n", "import {Adder} from \"d3-array\";\nimport {abs, atan2, cos, radians, sin, sqrt} from \"./math.js\";\nimport noop from \"./noop.js\";\nimport stream from \"./stream.js\";\n\nvar lengthSum,\n    lambda0,\n    sinPhi0,\n    cosPhi0;\n\nvar lengthStream = {\n  sphere: noop,\n  point: noop,\n  lineStart: lengthLineStart,\n  lineEnd: noop,\n  polygonStart: noop,\n  polygonEnd: noop\n};\n\nfunction lengthLineStart() {\n  lengthStream.point = lengthPointFirst;\n  lengthStream.lineEnd = lengthLineEnd;\n}\n\nfunction lengthLineEnd() {\n  lengthStream.point = lengthStream.lineEnd = noop;\n}\n\nfunction lengthPointFirst(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  lambda0 = lambda, sinPhi0 = sin(phi), cosPhi0 = cos(phi);\n  lengthStream.point = lengthPoint;\n}\n\nfunction lengthPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var sinPhi = sin(phi),\n      cosPhi = cos(phi),\n      delta = abs(lambda - lambda0),\n      cosDelta = cos(delta),\n      sinDelta = sin(delta),\n      x = cosPhi * sinDelta,\n      y = cosPhi0 * sinPhi - sinPhi0 * cosPhi * cosDelta,\n      z = sinPhi0 * sinPhi + cosPhi0 * cosPhi * cosDelta;\n  lengthSum.add(atan2(sqrt(x * x + y * y), z));\n  lambda0 = lambda, sinPhi0 = sinPhi, cosPhi0 = cosPhi;\n}\n\nexport default function(object) {\n  lengthSum = new Adder();\n  stream(object, lengthStream);\n  return +lengthSum;\n}\n", "import length from \"./length.js\";\n\nvar coordinates = [null, null],\n    object = {type: \"LineString\", coordinates: coordinates};\n\nexport default function(a, b) {\n  coordinates[0] = a;\n  coordinates[1] = b;\n  return length(object);\n}\n", "import {default as polygonContains} from \"./polygonContains.js\";\nimport {default as distance} from \"./distance.js\";\nimport {epsilon2, radians} from \"./math.js\";\n\nvar containsObjectType = {\n  Feature: function(object, point) {\n    return containsGeometry(object.geometry, point);\n  },\n  FeatureCollection: function(object, point) {\n    var features = object.features, i = -1, n = features.length;\n    while (++i < n) if (containsGeometry(features[i].geometry, point)) return true;\n    return false;\n  }\n};\n\nvar containsGeometryType = {\n  Sphere: function() {\n    return true;\n  },\n  Point: function(object, point) {\n    return containsPoint(object.coordinates, point);\n  },\n  MultiPoint: function(object, point) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) if (containsPoint(coordinates[i], point)) return true;\n    return false;\n  },\n  LineString: function(object, point) {\n    return containsLine(object.coordinates, point);\n  },\n  MultiLineString: function(object, point) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) if (containsLine(coordinates[i], point)) return true;\n    return false;\n  },\n  Polygon: function(object, point) {\n    return containsPolygon(object.coordinates, point);\n  },\n  MultiPolygon: function(object, point) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) if (containsPolygon(coordinates[i], point)) return true;\n    return false;\n  },\n  GeometryCollection: function(object, point) {\n    var geometries = object.geometries, i = -1, n = geometries.length;\n    while (++i < n) if (containsGeometry(geometries[i], point)) return true;\n    return false;\n  }\n};\n\nfunction containsGeometry(geometry, point) {\n  return geometry && containsGeometryType.hasOwnProperty(geometry.type)\n      ? containsGeometryType[geometry.type](geometry, point)\n      : false;\n}\n\nfunction containsPoint(coordinates, point) {\n  return distance(coordinates, point) === 0;\n}\n\nfunction containsLine(coordinates, point) {\n  var ao, bo, ab;\n  for (var i = 0, n = coordinates.length; i < n; i++) {\n    bo = distance(coordinates[i], point);\n    if (bo === 0) return true;\n    if (i > 0) {\n      ab = distance(coordinates[i], coordinates[i - 1]);\n      if (\n        ab > 0 &&\n        ao <= ab &&\n        bo <= ab &&\n        (ao + bo - ab) * (1 - Math.pow((ao - bo) / ab, 2)) < epsilon2 * ab\n      )\n        return true;\n    }\n    ao = bo;\n  }\n  return false;\n}\n\nfunction containsPolygon(coordinates, point) {\n  return !!polygonContains(coordinates.map(ringRadians), pointRadians(point));\n}\n\nfunction ringRadians(ring) {\n  return ring = ring.map(pointRadians), ring.pop(), ring;\n}\n\nfunction pointRadians(point) {\n  return [point[0] * radians, point[1] * radians];\n}\n\nexport default function(object, point) {\n  return (object && containsObjectType.hasOwnProperty(object.type)\n      ? containsObjectType[object.type]\n      : containsGeometry)(object, point);\n}\n", "import {range} from \"d3-array\";\nimport {abs, ceil, epsilon} from \"./math.js\";\n\nfunction graticuleX(y0, y1, dy) {\n  var y = range(y0, y1 - epsilon, dy).concat(y1);\n  return function(x) { return y.map(function(y) { return [x, y]; }); };\n}\n\nfunction graticuleY(x0, x1, dx) {\n  var x = range(x0, x1 - epsilon, dx).concat(x1);\n  return function(y) { return x.map(function(x) { return [x, y]; }); };\n}\n\nexport default function graticule() {\n  var x1, x0, X1, X0,\n      y1, y0, Y1, Y0,\n      dx = 10, dy = dx, DX = 90, DY = 360,\n      x, y, X, Y,\n      precision = 2.5;\n\n  function graticule() {\n    return {type: \"MultiLineString\", coordinates: lines()};\n  }\n\n  function lines() {\n    return range(ceil(X0 / DX) * DX, X1, DX).map(X)\n        .concat(range(ceil(Y0 / DY) * DY, Y1, DY).map(Y))\n        .concat(range(ceil(x0 / dx) * dx, x1, dx).filter(function(x) { return abs(x % DX) > epsilon; }).map(x))\n        .concat(range(ceil(y0 / dy) * dy, y1, dy).filter(function(y) { return abs(y % DY) > epsilon; }).map(y));\n  }\n\n  graticule.lines = function() {\n    return lines().map(function(coordinates) { return {type: \"LineString\", coordinates: coordinates}; });\n  };\n\n  graticule.outline = function() {\n    return {\n      type: \"Polygon\",\n      coordinates: [\n        X(X0).concat(\n        Y(Y1).slice(1),\n        X(X1).reverse().slice(1),\n        Y(Y0).reverse().slice(1))\n      ]\n    };\n  };\n\n  graticule.extent = function(_) {\n    if (!arguments.length) return graticule.extentMinor();\n    return graticule.extentMajor(_).extentMinor(_);\n  };\n\n  graticule.extentMajor = function(_) {\n    if (!arguments.length) return [[X0, Y0], [X1, Y1]];\n    X0 = +_[0][0], X1 = +_[1][0];\n    Y0 = +_[0][1], Y1 = +_[1][1];\n    if (X0 > X1) _ = X0, X0 = X1, X1 = _;\n    if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;\n    return graticule.precision(precision);\n  };\n\n  graticule.extentMinor = function(_) {\n    if (!arguments.length) return [[x0, y0], [x1, y1]];\n    x0 = +_[0][0], x1 = +_[1][0];\n    y0 = +_[0][1], y1 = +_[1][1];\n    if (x0 > x1) _ = x0, x0 = x1, x1 = _;\n    if (y0 > y1) _ = y0, y0 = y1, y1 = _;\n    return graticule.precision(precision);\n  };\n\n  graticule.step = function(_) {\n    if (!arguments.length) return graticule.stepMinor();\n    return graticule.stepMajor(_).stepMinor(_);\n  };\n\n  graticule.stepMajor = function(_) {\n    if (!arguments.length) return [DX, DY];\n    DX = +_[0], DY = +_[1];\n    return graticule;\n  };\n\n  graticule.stepMinor = function(_) {\n    if (!arguments.length) return [dx, dy];\n    dx = +_[0], dy = +_[1];\n    return graticule;\n  };\n\n  graticule.precision = function(_) {\n    if (!arguments.length) return precision;\n    precision = +_;\n    x = graticuleX(y0, y1, 90);\n    y = graticuleY(x0, x1, precision);\n    X = graticuleX(Y0, Y1, 90);\n    Y = graticuleY(X0, X1, precision);\n    return graticule;\n  };\n\n  return graticule\n      .extentMajor([[-180, -90 + epsilon], [180, 90 - epsilon]])\n      .extentMinor([[-180, -80 - epsilon], [180, 80 + epsilon]]);\n}\n\nexport function graticule10() {\n  return graticule()();\n}\n", "import {asin, atan2, cos, degrees, haversin, radians, sin, sqrt} from \"./math.js\";\n\nexport default function(a, b) {\n  var x0 = a[0] * radians,\n      y0 = a[1] * radians,\n      x1 = b[0] * radians,\n      y1 = b[1] * radians,\n      cy0 = cos(y0),\n      sy0 = sin(y0),\n      cy1 = cos(y1),\n      sy1 = sin(y1),\n      kx0 = cy0 * cos(x0),\n      ky0 = cy0 * sin(x0),\n      kx1 = cy1 * cos(x1),\n      ky1 = cy1 * sin(x1),\n      d = 2 * asin(sqrt(haversin(y1 - y0) + cy0 * cy1 * haversin(x1 - x0))),\n      k = sin(d);\n\n  var interpolate = d ? function(t) {\n    var B = sin(t *= d) / k,\n        A = sin(d - t) / k,\n        x = A * kx0 + B * kx1,\n        y = A * ky0 + B * ky1,\n        z = A * sy0 + B * sy1;\n    return [\n      atan2(y, x) * degrees,\n      atan2(z, sqrt(x * x + y * y)) * degrees\n    ];\n  } : function() {\n    return [x0 * degrees, y0 * degrees];\n  };\n\n  interpolate.distance = d;\n\n  return interpolate;\n}\n", "export default x => x;\n", "import {Adder} from \"d3-array\";\nimport {abs} from \"../math.js\";\nimport noop from \"../noop.js\";\n\nvar areaSum = new Adder(),\n    areaRingSum = new Adder(),\n    x00,\n    y00,\n    x0,\n    y0;\n\nvar areaStream = {\n  point: noop,\n  lineStart: noop,\n  lineEnd: noop,\n  polygonStart: function() {\n    areaStream.lineStart = areaRingStart;\n    areaStream.lineEnd = areaRingEnd;\n  },\n  polygonEnd: function() {\n    areaStream.lineStart = areaStream.lineEnd = areaStream.point = noop;\n    areaSum.add(abs(areaRingSum));\n    areaRingSum = new Adder();\n  },\n  result: function() {\n    var area = areaSum / 2;\n    areaSum = new Adder();\n    return area;\n  }\n};\n\nfunction areaRingStart() {\n  areaStream.point = areaPointFirst;\n}\n\nfunction areaPointFirst(x, y) {\n  areaStream.point = areaPoint;\n  x00 = x0 = x, y00 = y0 = y;\n}\n\nfunction areaPoint(x, y) {\n  areaRingSum.add(y0 * x - x0 * y);\n  x0 = x, y0 = y;\n}\n\nfunction areaRingEnd() {\n  areaPoint(x00, y00);\n}\n\nexport default areaStream;\n", "import noop from \"../noop.js\";\n\nvar x0 = Infinity,\n    y0 = x0,\n    x1 = -x0,\n    y1 = x1;\n\nvar boundsStream = {\n  point: boundsPoint,\n  lineStart: noop,\n  lineEnd: noop,\n  polygonStart: noop,\n  polygonEnd: noop,\n  result: function() {\n    var bounds = [[x0, y0], [x1, y1]];\n    x1 = y1 = -(y0 = x0 = Infinity);\n    return bounds;\n  }\n};\n\nfunction boundsPoint(x, y) {\n  if (x < x0) x0 = x;\n  if (x > x1) x1 = x;\n  if (y < y0) y0 = y;\n  if (y > y1) y1 = y;\n}\n\nexport default boundsStream;\n", "import {sqrt} from \"../math.js\";\n\n// TODO Enforce positive area for exterior, negative area for interior?\n\nvar X0 = 0,\n    Y0 = 0,\n    Z0 = 0,\n    X1 = 0,\n    Y1 = 0,\n    Z1 = 0,\n    X2 = 0,\n    Y2 = 0,\n    Z2 = 0,\n    x00,\n    y00,\n    x0,\n    y0;\n\nvar centroidStream = {\n  point: centroidPoint,\n  lineStart: centroidLineStart,\n  lineEnd: centroidLineEnd,\n  polygonStart: function() {\n    centroidStream.lineStart = centroidRingStart;\n    centroidStream.lineEnd = centroidRingEnd;\n  },\n  polygonEnd: function() {\n    centroidStream.point = centroidPoint;\n    centroidStream.lineStart = centroidLineStart;\n    centroidStream.lineEnd = centroidLineEnd;\n  },\n  result: function() {\n    var centroid = Z2 ? [X2 / Z2, Y2 / Z2]\n        : Z1 ? [X1 / Z1, Y1 / Z1]\n        : Z0 ? [X0 / Z0, Y0 / Z0]\n        : [NaN, NaN];\n    X0 = Y0 = Z0 =\n    X1 = Y1 = Z1 =\n    X2 = Y2 = Z2 = 0;\n    return centroid;\n  }\n};\n\nfunction centroidPoint(x, y) {\n  X0 += x;\n  Y0 += y;\n  ++Z0;\n}\n\nfunction centroidLineStart() {\n  centroidStream.point = centroidPointFirstLine;\n}\n\nfunction centroidPointFirstLine(x, y) {\n  centroidStream.point = centroidPointLine;\n  centroidPoint(x0 = x, y0 = y);\n}\n\nfunction centroidPointLine(x, y) {\n  var dx = x - x0, dy = y - y0, z = sqrt(dx * dx + dy * dy);\n  X1 += z * (x0 + x) / 2;\n  Y1 += z * (y0 + y) / 2;\n  Z1 += z;\n  centroidPoint(x0 = x, y0 = y);\n}\n\nfunction centroidLineEnd() {\n  centroidStream.point = centroidPoint;\n}\n\nfunction centroidRingStart() {\n  centroidStream.point = centroidPointFirstRing;\n}\n\nfunction centroidRingEnd() {\n  centroidPointRing(x00, y00);\n}\n\nfunction centroidPointFirstRing(x, y) {\n  centroidStream.point = centroidPointRing;\n  centroidPoint(x00 = x0 = x, y00 = y0 = y);\n}\n\nfunction centroidPointRing(x, y) {\n  var dx = x - x0,\n      dy = y - y0,\n      z = sqrt(dx * dx + dy * dy);\n\n  X1 += z * (x0 + x) / 2;\n  Y1 += z * (y0 + y) / 2;\n  Z1 += z;\n\n  z = y0 * x - x0 * y;\n  X2 += z * (x0 + x);\n  Y2 += z * (y0 + y);\n  Z2 += z * 3;\n  centroidPoint(x0 = x, y0 = y);\n}\n\nexport default centroidStream;\n", "import {tau} from \"../math.js\";\nimport noop from \"../noop.js\";\n\nexport default function PathContext(context) {\n  this._context = context;\n}\n\nPathContext.prototype = {\n  _radius: 4.5,\n  pointRadius: function(_) {\n    return this._radius = _, this;\n  },\n  polygonStart: function() {\n    this._line = 0;\n  },\n  polygonEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._point = 0;\n  },\n  lineEnd: function() {\n    if (this._line === 0) this._context.closePath();\n    this._point = NaN;\n  },\n  point: function(x, y) {\n    switch (this._point) {\n      case 0: {\n        this._context.moveTo(x, y);\n        this._point = 1;\n        break;\n      }\n      case 1: {\n        this._context.lineTo(x, y);\n        break;\n      }\n      default: {\n        this._context.moveTo(x + this._radius, y);\n        this._context.arc(x, y, this._radius, 0, tau);\n        break;\n      }\n    }\n  },\n  result: noop\n};\n", "import {Adder} from \"d3-array\";\nimport {sqrt} from \"../math.js\";\nimport noop from \"../noop.js\";\n\nvar lengthSum = new Adder(),\n    lengthRing,\n    x00,\n    y00,\n    x0,\n    y0;\n\nvar lengthStream = {\n  point: noop,\n  lineStart: function() {\n    lengthStream.point = lengthPointFirst;\n  },\n  lineEnd: function() {\n    if (lengthRing) lengthPoint(x00, y00);\n    lengthStream.point = noop;\n  },\n  polygonStart: function() {\n    lengthRing = true;\n  },\n  polygonEnd: function() {\n    lengthRing = null;\n  },\n  result: function() {\n    var length = +lengthSum;\n    lengthSum = new Adder();\n    return length;\n  }\n};\n\nfunction lengthPointFirst(x, y) {\n  lengthStream.point = lengthPoint;\n  x00 = x0 = x, y00 = y0 = y;\n}\n\nfunction lengthPoint(x, y) {\n  x0 -= x, y0 -= y;\n  lengthSum.add(sqrt(x0 * x0 + y0 * y0));\n  x0 = x, y0 = y;\n}\n\nexport default lengthStream;\n", "export default function PathString() {\n  this._string = [];\n}\n\nPathString.prototype = {\n  _radius: 4.5,\n  _circle: circle(4.5),\n  pointRadius: function(_) {\n    if ((_ = +_) !== this._radius) this._radius = _, this._circle = null;\n    return this;\n  },\n  polygonStart: function() {\n    this._line = 0;\n  },\n  polygonEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._point = 0;\n  },\n  lineEnd: function() {\n    if (this._line === 0) this._string.push(\"Z\");\n    this._point = NaN;\n  },\n  point: function(x, y) {\n    switch (this._point) {\n      case 0: {\n        this._string.push(\"M\", x, \",\", y);\n        this._point = 1;\n        break;\n      }\n      case 1: {\n        this._string.push(\"L\", x, \",\", y);\n        break;\n      }\n      default: {\n        if (this._circle == null) this._circle = circle(this._radius);\n        this._string.push(\"M\", x, \",\", y, this._circle);\n        break;\n      }\n    }\n  },\n  result: function() {\n    if (this._string.length) {\n      var result = this._string.join(\"\");\n      this._string = [];\n      return result;\n    } else {\n      return null;\n    }\n  }\n};\n\nfunction circle(radius) {\n  return \"m0,\" + radius\n      + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + -2 * radius\n      + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + 2 * radius\n      + \"z\";\n}\n", "import identity from \"../identity.js\";\nimport stream from \"../stream.js\";\nimport pathArea from \"./area.js\";\nimport pathBounds from \"./bounds.js\";\nimport pathCentroid from \"./centroid.js\";\nimport PathContext from \"./context.js\";\nimport pathMeasure from \"./measure.js\";\nimport PathString from \"./string.js\";\n\nexport default function(projection, context) {\n  var pointRadius = 4.5,\n      projectionStream,\n      contextStream;\n\n  function path(object) {\n    if (object) {\n      if (typeof pointRadius === \"function\") contextStream.pointRadius(+pointRadius.apply(this, arguments));\n      stream(object, projectionStream(contextStream));\n    }\n    return contextStream.result();\n  }\n\n  path.area = function(object) {\n    stream(object, projectionStream(pathArea));\n    return pathArea.result();\n  };\n\n  path.measure = function(object) {\n    stream(object, projectionStream(pathMeasure));\n    return pathMeasure.result();\n  };\n\n  path.bounds = function(object) {\n    stream(object, projectionStream(pathBounds));\n    return pathBounds.result();\n  };\n\n  path.centroid = function(object) {\n    stream(object, projectionStream(pathCentroid));\n    return pathCentroid.result();\n  };\n\n  path.projection = function(_) {\n    return arguments.length ? (projectionStream = _ == null ? (projection = null, identity) : (projection = _).stream, path) : projection;\n  };\n\n  path.context = function(_) {\n    if (!arguments.length) return context;\n    contextStream = _ == null ? (context = null, new PathString) : new PathContext(context = _);\n    if (typeof pointRadius !== \"function\") contextStream.pointRadius(pointRadius);\n    return path;\n  };\n\n  path.pointRadius = function(_) {\n    if (!arguments.length) return pointRadius;\n    pointRadius = typeof _ === \"function\" ? _ : (contextStream.pointRadius(+_), +_);\n    return path;\n  };\n\n  return path.projection(projection).context(context);\n}\n", "export default function(methods) {\n  return {\n    stream: transformer(methods)\n  };\n}\n\nexport function transformer(methods) {\n  return function(stream) {\n    var s = new TransformStream;\n    for (var key in methods) s[key] = methods[key];\n    s.stream = stream;\n    return s;\n  };\n}\n\nfunction TransformStream() {}\n\nTransformStream.prototype = {\n  constructor: TransformStream,\n  point: function(x, y) { this.stream.point(x, y); },\n  sphere: function() { this.stream.sphere(); },\n  lineStart: function() { this.stream.lineStart(); },\n  lineEnd: function() { this.stream.lineEnd(); },\n  polygonStart: function() { this.stream.polygonStart(); },\n  polygonEnd: function() { this.stream.polygonEnd(); }\n};\n", "import {default as geoStream} from \"../stream.js\";\nimport boundsStream from \"../path/bounds.js\";\n\nfunction fit(projection, fitBounds, object) {\n  var clip = projection.clipExtent && projection.clipExtent();\n  projection.scale(150).translate([0, 0]);\n  if (clip != null) projection.clipExtent(null);\n  geoStream(object, projection.stream(boundsStream));\n  fitBounds(boundsStream.result());\n  if (clip != null) projection.clipExtent(clip);\n  return projection;\n}\n\nexport function fitExtent(projection, extent, object) {\n  return fit(projection, function(b) {\n    var w = extent[1][0] - extent[0][0],\n        h = extent[1][1] - extent[0][1],\n        k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])),\n        x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2,\n        y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;\n    projection.scale(150 * k).translate([x, y]);\n  }, object);\n}\n\nexport function fitSize(projection, size, object) {\n  return fitExtent(projection, [[0, 0], size], object);\n}\n\nexport function fitWidth(projection, width, object) {\n  return fit(projection, function(b) {\n    var w = +width,\n        k = w / (b[1][0] - b[0][0]),\n        x = (w - k * (b[1][0] + b[0][0])) / 2,\n        y = -k * b[0][1];\n    projection.scale(150 * k).translate([x, y]);\n  }, object);\n}\n\nexport function fitHeight(projection, height, object) {\n  return fit(projection, function(b) {\n    var h = +height,\n        k = h / (b[1][1] - b[0][1]),\n        x = -k * b[0][0],\n        y = (h - k * (b[1][1] + b[0][1])) / 2;\n    projection.scale(150 * k).translate([x, y]);\n  }, object);\n}\n", "import {cartesian} from \"../cartesian.js\";\nimport {abs, asin, atan2, cos, epsilon, radians, sqrt} from \"../math.js\";\nimport {transformer} from \"../transform.js\";\n\nvar maxDepth = 16, // maximum depth of subdivision\n    cosMinDistance = cos(30 * radians); // cos(minimum angular distance)\n\nexport default function(project, delta2) {\n  return +delta2 ? resample(project, delta2) : resampleNone(project);\n}\n\nfunction resampleNone(project) {\n  return transformer({\n    point: function(x, y) {\n      x = project(x, y);\n      this.stream.point(x[0], x[1]);\n    }\n  });\n}\n\nfunction resample(project, delta2) {\n\n  function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {\n    var dx = x1 - x0,\n        dy = y1 - y0,\n        d2 = dx * dx + dy * dy;\n    if (d2 > 4 * delta2 && depth--) {\n      var a = a0 + a1,\n          b = b0 + b1,\n          c = c0 + c1,\n          m = sqrt(a * a + b * b + c * c),\n          phi2 = asin(c /= m),\n          lambda2 = abs(abs(c) - 1) < epsilon || abs(lambda0 - lambda1) < epsilon ? (lambda0 + lambda1) / 2 : atan2(b, a),\n          p = project(lambda2, phi2),\n          x2 = p[0],\n          y2 = p[1],\n          dx2 = x2 - x0,\n          dy2 = y2 - y0,\n          dz = dy * dx2 - dx * dy2;\n      if (dz * dz / d2 > delta2 // perpendicular projected distance\n          || abs((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 // midpoint close to an end\n          || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) { // angular distance\n        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);\n        stream.point(x2, y2);\n        resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);\n      }\n    }\n  }\n  return function(stream) {\n    var lambda00, x00, y00, a00, b00, c00, // first point\n        lambda0, x0, y0, a0, b0, c0; // previous point\n\n    var resampleStream = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: function() { stream.polygonStart(); resampleStream.lineStart = ringStart; },\n      polygonEnd: function() { stream.polygonEnd(); resampleStream.lineStart = lineStart; }\n    };\n\n    function point(x, y) {\n      x = project(x, y);\n      stream.point(x[0], x[1]);\n    }\n\n    function lineStart() {\n      x0 = NaN;\n      resampleStream.point = linePoint;\n      stream.lineStart();\n    }\n\n    function linePoint(lambda, phi) {\n      var c = cartesian([lambda, phi]), p = project(lambda, phi);\n      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);\n      stream.point(x0, y0);\n    }\n\n    function lineEnd() {\n      resampleStream.point = point;\n      stream.lineEnd();\n    }\n\n    function ringStart() {\n      lineStart();\n      resampleStream.point = ringPoint;\n      resampleStream.lineEnd = ringEnd;\n    }\n\n    function ringPoint(lambda, phi) {\n      linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;\n      resampleStream.point = linePoint;\n    }\n\n    function ringEnd() {\n      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream);\n      resampleStream.lineEnd = lineEnd;\n      lineEnd();\n    }\n\n    return resampleStream;\n  };\n}\n", "import clipAntimeridian from \"../clip/antimeridian.js\";\nimport clipCircle from \"../clip/circle.js\";\nimport clipRectangle from \"../clip/rectangle.js\";\nimport compose from \"../compose.js\";\nimport identity from \"../identity.js\";\nimport {cos, degrees, radians, sin, sqrt} from \"../math.js\";\nimport {rotateRadians} from \"../rotation.js\";\nimport {transformer} from \"../transform.js\";\nimport {fitExtent, fitSize, fitWidth, fitHeight} from \"./fit.js\";\nimport resample from \"./resample.js\";\n\nvar transformRadians = transformer({\n  point: function(x, y) {\n    this.stream.point(x * radians, y * radians);\n  }\n});\n\nfunction transformRotate(rotate) {\n  return transformer({\n    point: function(x, y) {\n      var r = rotate(x, y);\n      return this.stream.point(r[0], r[1]);\n    }\n  });\n}\n\nfunction scaleTranslate(k, dx, dy, sx, sy) {\n  function transform(x, y) {\n    x *= sx; y *= sy;\n    return [dx + k * x, dy - k * y];\n  }\n  transform.invert = function(x, y) {\n    return [(x - dx) / k * sx, (dy - y) / k * sy];\n  };\n  return transform;\n}\n\nfunction scaleTranslateRotate(k, dx, dy, sx, sy, alpha) {\n  if (!alpha) return scaleTranslate(k, dx, dy, sx, sy);\n  var cosAlpha = cos(alpha),\n      sinAlpha = sin(alpha),\n      a = cosAlpha * k,\n      b = sinAlpha * k,\n      ai = cosAlpha / k,\n      bi = sinAlpha / k,\n      ci = (sinAlpha * dy - cosAlpha * dx) / k,\n      fi = (sinAlpha * dx + cosAlpha * dy) / k;\n  function transform(x, y) {\n    x *= sx; y *= sy;\n    return [a * x - b * y + dx, dy - b * x - a * y];\n  }\n  transform.invert = function(x, y) {\n    return [sx * (ai * x - bi * y + ci), sy * (fi - bi * x - ai * y)];\n  };\n  return transform;\n}\n\nexport default function projection(project) {\n  return projectionMutator(function() { return project; })();\n}\n\nexport function projectionMutator(projectAt) {\n  var project,\n      k = 150, // scale\n      x = 480, y = 250, // translate\n      lambda = 0, phi = 0, // center\n      deltaLambda = 0, deltaPhi = 0, deltaGamma = 0, rotate, // pre-rotate\n      alpha = 0, // post-rotate angle\n      sx = 1, // reflectX\n      sy = 1, // reflectX\n      theta = null, preclip = clipAntimeridian, // pre-clip angle\n      x0 = null, y0, x1, y1, postclip = identity, // post-clip extent\n      delta2 = 0.5, // precision\n      projectResample,\n      projectTransform,\n      projectRotateTransform,\n      cache,\n      cacheStream;\n\n  function projection(point) {\n    return projectRotateTransform(point[0] * radians, point[1] * radians);\n  }\n\n  function invert(point) {\n    point = projectRotateTransform.invert(point[0], point[1]);\n    return point && [point[0] * degrees, point[1] * degrees];\n  }\n\n  projection.stream = function(stream) {\n    return cache && cacheStream === stream ? cache : cache = transformRadians(transformRotate(rotate)(preclip(projectResample(postclip(cacheStream = stream)))));\n  };\n\n  projection.preclip = function(_) {\n    return arguments.length ? (preclip = _, theta = undefined, reset()) : preclip;\n  };\n\n  projection.postclip = function(_) {\n    return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;\n  };\n\n  projection.clipAngle = function(_) {\n    return arguments.length ? (preclip = +_ ? clipCircle(theta = _ * radians) : (theta = null, clipAntimeridian), reset()) : theta * degrees;\n  };\n\n  projection.clipExtent = function(_) {\n    return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity) : clipRectangle(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n  };\n\n  projection.scale = function(_) {\n    return arguments.length ? (k = +_, recenter()) : k;\n  };\n\n  projection.translate = function(_) {\n    return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];\n  };\n\n  projection.center = function(_) {\n    return arguments.length ? (lambda = _[0] % 360 * radians, phi = _[1] % 360 * radians, recenter()) : [lambda * degrees, phi * degrees];\n  };\n\n  projection.rotate = function(_) {\n    return arguments.length ? (deltaLambda = _[0] % 360 * radians, deltaPhi = _[1] % 360 * radians, deltaGamma = _.length > 2 ? _[2] % 360 * radians : 0, recenter()) : [deltaLambda * degrees, deltaPhi * degrees, deltaGamma * degrees];\n  };\n\n  projection.angle = function(_) {\n    return arguments.length ? (alpha = _ % 360 * radians, recenter()) : alpha * degrees;\n  };\n\n  projection.reflectX = function(_) {\n    return arguments.length ? (sx = _ ? -1 : 1, recenter()) : sx < 0;\n  };\n\n  projection.reflectY = function(_) {\n    return arguments.length ? (sy = _ ? -1 : 1, recenter()) : sy < 0;\n  };\n\n  projection.precision = function(_) {\n    return arguments.length ? (projectResample = resample(projectTransform, delta2 = _ * _), reset()) : sqrt(delta2);\n  };\n\n  projection.fitExtent = function(extent, object) {\n    return fitExtent(projection, extent, object);\n  };\n\n  projection.fitSize = function(size, object) {\n    return fitSize(projection, size, object);\n  };\n\n  projection.fitWidth = function(width, object) {\n    return fitWidth(projection, width, object);\n  };\n\n  projection.fitHeight = function(height, object) {\n    return fitHeight(projection, height, object);\n  };\n\n  function recenter() {\n    var center = scaleTranslateRotate(k, 0, 0, sx, sy, alpha).apply(null, project(lambda, phi)),\n        transform = scaleTranslateRotate(k, x - center[0], y - center[1], sx, sy, alpha);\n    rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma);\n    projectTransform = compose(project, transform);\n    projectRotateTransform = compose(rotate, projectTransform);\n    projectResample = resample(projectTransform, delta2);\n    return reset();\n  }\n\n  function reset() {\n    cache = cacheStream = null;\n    return projection;\n  }\n\n  return function() {\n    project = projectAt.apply(this, arguments);\n    projection.invert = project.invert && invert;\n    return recenter();\n  };\n}\n", "import {degrees, pi, radians} from \"../math.js\";\nimport {projectionMutator} from \"./index.js\";\n\nexport function conicProjection(projectAt) {\n  var phi0 = 0,\n      phi1 = pi / 3,\n      m = projectionMutator(projectAt),\n      p = m(phi0, phi1);\n\n  p.parallels = function(_) {\n    return arguments.length ? m(phi0 = _[0] * radians, phi1 = _[1] * radians) : [phi0 * degrees, phi1 * degrees];\n  };\n\n  return p;\n}\n", "import {asin, cos, sin} from \"../math.js\";\n\nexport function cylindricalEqualAreaRaw(phi0) {\n  var cosPhi0 = cos(phi0);\n\n  function forward(lambda, phi) {\n    return [lambda * cosPhi0, sin(phi) / cosPhi0];\n  }\n\n  forward.invert = function(x, y) {\n    return [x / cosPhi0, asin(y * cosPhi0)];\n  };\n\n  return forward;\n}\n", "import {abs, asin, atan2, cos, epsilon, pi, sign, sin, sqrt} from \"../math.js\";\nimport {conicProjection} from \"./conic.js\";\nimport {cylindricalEqualAreaRaw} from \"./cylindricalEqualArea.js\";\n\nexport function conicEqualAreaRaw(y0, y1) {\n  var sy0 = sin(y0), n = (sy0 + sin(y1)) / 2;\n\n  // Are the parallels symmetrical around the Equator?\n  if (abs(n) < epsilon) return cylindricalEqualAreaRaw(y0);\n\n  var c = 1 + sy0 * (2 * n - sy0), r0 = sqrt(c) / n;\n\n  function project(x, y) {\n    var r = sqrt(c - 2 * n * sin(y)) / n;\n    return [r * sin(x *= n), r0 - r * cos(x)];\n  }\n\n  project.invert = function(x, y) {\n    var r0y = r0 - y,\n        l = atan2(x, abs(r0y)) * sign(r0y);\n    if (r0y * n < 0)\n      l -= pi * sign(x) * sign(r0y);\n    return [l / n, asin((c - (x * x + r0y * r0y) * n * n) / (2 * n))];\n  };\n\n  return project;\n}\n\nexport default function() {\n  return conicProjection(conicEqualAreaRaw)\n      .scale(155.424)\n      .center([0, 33.6442]);\n}\n", "import conicEqualArea from \"./conicEqualArea.js\";\n\nexport default function() {\n  return conicEqualArea()\n      .parallels([29.5, 45.5])\n      .scale(1070)\n      .translate([480, 250])\n      .rotate([96, 0])\n      .center([-0.6, 38.7]);\n}\n", "import {epsilon} from \"../math.js\";\nimport albers from \"./albers.js\";\nimport conicEqualArea from \"./conicEqualArea.js\";\nimport {fitExtent, fitSize, fitWidth, fitHeight} from \"./fit.js\";\n\n// The projections must have mutually exclusive clip regions on the sphere,\n// as this will avoid emitting interleaving lines and polygons.\nfunction multiplex(streams) {\n  var n = streams.length;\n  return {\n    point: function(x, y) { var i = -1; while (++i < n) streams[i].point(x, y); },\n    sphere: function() { var i = -1; while (++i < n) streams[i].sphere(); },\n    lineStart: function() { var i = -1; while (++i < n) streams[i].lineStart(); },\n    lineEnd: function() { var i = -1; while (++i < n) streams[i].lineEnd(); },\n    polygonStart: function() { var i = -1; while (++i < n) streams[i].polygonStart(); },\n    polygonEnd: function() { var i = -1; while (++i < n) streams[i].polygonEnd(); }\n  };\n}\n\n// A composite projection for the United States, configured by default for\n// 960\u00D7500. The projection also works quite well at 960\u00D7600 if you change the\n// scale to 1285 and adjust the translate accordingly. The set of standard\n// parallels for each region comes from USGS, which is published here:\n// http://egsc.usgs.gov/isb/pubs/MapProjections/projections.html#albers\nexport default function() {\n  var cache,\n      cacheStream,\n      lower48 = albers(), lower48Point,\n      alaska = conicEqualArea().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]), alaskaPoint, // EPSG:3338\n      hawaii = conicEqualArea().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]), hawaiiPoint, // ESRI:102007\n      point, pointStream = {point: function(x, y) { point = [x, y]; }};\n\n  function albersUsa(coordinates) {\n    var x = coordinates[0], y = coordinates[1];\n    return point = null,\n        (lower48Point.point(x, y), point)\n        || (alaskaPoint.point(x, y), point)\n        || (hawaiiPoint.point(x, y), point);\n  }\n\n  albersUsa.invert = function(coordinates) {\n    var k = lower48.scale(),\n        t = lower48.translate(),\n        x = (coordinates[0] - t[0]) / k,\n        y = (coordinates[1] - t[1]) / k;\n    return (y >= 0.120 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska\n        : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii\n        : lower48).invert(coordinates);\n  };\n\n  albersUsa.stream = function(stream) {\n    return cache && cacheStream === stream ? cache : cache = multiplex([lower48.stream(cacheStream = stream), alaska.stream(stream), hawaii.stream(stream)]);\n  };\n\n  albersUsa.precision = function(_) {\n    if (!arguments.length) return lower48.precision();\n    lower48.precision(_), alaska.precision(_), hawaii.precision(_);\n    return reset();\n  };\n\n  albersUsa.scale = function(_) {\n    if (!arguments.length) return lower48.scale();\n    lower48.scale(_), alaska.scale(_ * 0.35), hawaii.scale(_);\n    return albersUsa.translate(lower48.translate());\n  };\n\n  albersUsa.translate = function(_) {\n    if (!arguments.length) return lower48.translate();\n    var k = lower48.scale(), x = +_[0], y = +_[1];\n\n    lower48Point = lower48\n        .translate(_)\n        .clipExtent([[x - 0.455 * k, y - 0.238 * k], [x + 0.455 * k, y + 0.238 * k]])\n        .stream(pointStream);\n\n    alaskaPoint = alaska\n        .translate([x - 0.307 * k, y + 0.201 * k])\n        .clipExtent([[x - 0.425 * k + epsilon, y + 0.120 * k + epsilon], [x - 0.214 * k - epsilon, y + 0.234 * k - epsilon]])\n        .stream(pointStream);\n\n    hawaiiPoint = hawaii\n        .translate([x - 0.205 * k, y + 0.212 * k])\n        .clipExtent([[x - 0.214 * k + epsilon, y + 0.166 * k + epsilon], [x - 0.115 * k - epsilon, y + 0.234 * k - epsilon]])\n        .stream(pointStream);\n\n    return reset();\n  };\n\n  albersUsa.fitExtent = function(extent, object) {\n    return fitExtent(albersUsa, extent, object);\n  };\n\n  albersUsa.fitSize = function(size, object) {\n    return fitSize(albersUsa, size, object);\n  };\n\n  albersUsa.fitWidth = function(width, object) {\n    return fitWidth(albersUsa, width, object);\n  };\n\n  albersUsa.fitHeight = function(height, object) {\n    return fitHeight(albersUsa, height, object);\n  };\n\n  function reset() {\n    cache = cacheStream = null;\n    return albersUsa;\n  }\n\n  return albersUsa.scale(1070);\n}\n", "import {asin, atan2, cos, sin, sqrt} from \"../math.js\";\n\nexport function azimuthalRaw(scale) {\n  return function(x, y) {\n    var cx = cos(x),\n        cy = cos(y),\n        k = scale(cx * cy);\n        if (k === Infinity) return [2, 0];\n    return [\n      k * cy * sin(x),\n      k * sin(y)\n    ];\n  }\n}\n\nexport function azimuthalInvert(angle) {\n  return function(x, y) {\n    var z = sqrt(x * x + y * y),\n        c = angle(z),\n        sc = sin(c),\n        cc = cos(c);\n    return [\n      atan2(x * sc, z * cc),\n      asin(z && y * sc / z)\n    ];\n  }\n}\n", "import {asin, sqrt} from \"../math.js\";\nimport {azimuthalRaw, azimuthalInvert} from \"./azimuthal.js\";\nimport projection from \"./index.js\";\n\nexport var azimuthalEqualAreaRaw = azimuthalRaw(function(cxcy) {\n  return sqrt(2 / (1 + cxcy));\n});\n\nazimuthalEqualAreaRaw.invert = azimuthalInvert(function(z) {\n  return 2 * asin(z / 2);\n});\n\nexport default function() {\n  return projection(azimuthalEqualAreaRaw)\n      .scale(124.75)\n      .clipAngle(180 - 1e-3);\n}\n", "import {acos, sin} from \"../math.js\";\nimport {azimuthalRaw, azimuthalInvert} from \"./azimuthal.js\";\nimport projection from \"./index.js\";\n\nexport var azimuthalEquidistantRaw = azimuthalRaw(function(c) {\n  return (c = acos(c)) && c / sin(c);\n});\n\nazimuthalEquidistantRaw.invert = azimuthalInvert(function(z) {\n  return z;\n});\n\nexport default function() {\n  return projection(azimuthalEquidistantRaw)\n      .scale(79.4188)\n      .clipAngle(180 - 1e-3);\n}\n", "import {atan, exp, halfPi, log, pi, tan, tau} from \"../math.js\";\nimport rotation from \"../rotation.js\";\nimport projection from \"./index.js\";\n\nexport function mercatorRaw(lambda, phi) {\n  return [lambda, log(tan((halfPi + phi) / 2))];\n}\n\nmercatorRaw.invert = function(x, y) {\n  return [x, 2 * atan(exp(y)) - halfPi];\n};\n\nexport default function() {\n  return mercatorProjection(mercatorRaw)\n      .scale(961 / tau);\n}\n\nexport function mercatorProjection(project) {\n  var m = projection(project),\n      center = m.center,\n      scale = m.scale,\n      translate = m.translate,\n      clipExtent = m.clipExtent,\n      x0 = null, y0, x1, y1; // clip extent\n\n  m.scale = function(_) {\n    return arguments.length ? (scale(_), reclip()) : scale();\n  };\n\n  m.translate = function(_) {\n    return arguments.length ? (translate(_), reclip()) : translate();\n  };\n\n  m.center = function(_) {\n    return arguments.length ? (center(_), reclip()) : center();\n  };\n\n  m.clipExtent = function(_) {\n    return arguments.length ? ((_ == null ? x0 = y0 = x1 = y1 = null : (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1])), reclip()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n  };\n\n  function reclip() {\n    var k = pi * scale(),\n        t = m(rotation(m.rotate()).invert([0, 0]));\n    return clipExtent(x0 == null\n        ? [[t[0] - k, t[1] - k], [t[0] + k, t[1] + k]] : project === mercatorRaw\n        ? [[Math.max(t[0] - k, x0), y0], [Math.min(t[0] + k, x1), y1]]\n        : [[x0, Math.max(t[1] - k, y0)], [x1, Math.min(t[1] + k, y1)]]);\n  }\n\n  return reclip();\n}\n", "import {abs, atan, atan2, cos, epsilon, halfPi, log, pi, pow, sign, sin, sqrt, tan} from \"../math.js\";\nimport {conicProjection} from \"./conic.js\";\nimport {mercatorRaw} from \"./mercator.js\";\n\nfunction tany(y) {\n  return tan((halfPi + y) / 2);\n}\n\nexport function conicConformalRaw(y0, y1) {\n  var cy0 = cos(y0),\n      n = y0 === y1 ? sin(y0) : log(cy0 / cos(y1)) / log(tany(y1) / tany(y0)),\n      f = cy0 * pow(tany(y0), n) / n;\n\n  if (!n) return mercatorRaw;\n\n  function project(x, y) {\n    if (f > 0) { if (y < -halfPi + epsilon) y = -halfPi + epsilon; }\n    else { if (y > halfPi - epsilon) y = halfPi - epsilon; }\n    var r = f / pow(tany(y), n);\n    return [r * sin(n * x), f - r * cos(n * x)];\n  }\n\n  project.invert = function(x, y) {\n    var fy = f - y, r = sign(n) * sqrt(x * x + fy * fy),\n      l = atan2(x, abs(fy)) * sign(fy);\n    if (fy * n < 0)\n      l -= pi * sign(x) * sign(fy);\n    return [l / n, 2 * atan(pow(f / r, 1 / n)) - halfPi];\n  };\n\n  return project;\n}\n\nexport default function() {\n  return conicProjection(conicConformalRaw)\n      .scale(109.5)\n      .parallels([30, 30]);\n}\n", "import projection from \"./index.js\";\n\nexport function equirectangularRaw(lambda, phi) {\n  return [lambda, phi];\n}\n\nequirectangularRaw.invert = equirectangularRaw;\n\nexport default function() {\n  return projection(equirectangularRaw)\n      .scale(152.63);\n}\n", "import {abs, atan2, cos, epsilon, pi, sign, sin, sqrt} from \"../math.js\";\nimport {conicProjection} from \"./conic.js\";\nimport {equirectangularRaw} from \"./equirectangular.js\";\n\nexport function conicEquidistantRaw(y0, y1) {\n  var cy0 = cos(y0),\n      n = y0 === y1 ? sin(y0) : (cy0 - cos(y1)) / (y1 - y0),\n      g = cy0 / n + y0;\n\n  if (abs(n) < epsilon) return equirectangularRaw;\n\n  function project(x, y) {\n    var gy = g - y, nx = n * x;\n    return [gy * sin(nx), g - gy * cos(nx)];\n  }\n\n  project.invert = function(x, y) {\n    var gy = g - y,\n        l = atan2(x, abs(gy)) * sign(gy);\n    if (gy * n < 0)\n      l -= pi * sign(x) * sign(gy);\n    return [l / n, g - sign(n) * sqrt(x * x + gy * gy)];\n  };\n\n  return project;\n}\n\nexport default function() {\n  return conicProjection(conicEquidistantRaw)\n      .scale(131.154)\n      .center([0, 13.9389]);\n}\n", "import projection from \"./index.js\";\nimport {abs, asin, cos, epsilon2, sin, sqrt} from \"../math.js\";\n\nvar A1 = 1.340264,\n    A2 = -0.081106,\n    A3 = 0.000893,\n    A4 = 0.003796,\n    M = sqrt(3) / 2,\n    iterations = 12;\n\nexport function equalEarthRaw(lambda, phi) {\n  var l = asin(M * sin(phi)), l2 = l * l, l6 = l2 * l2 * l2;\n  return [\n    lambda * cos(l) / (M * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2))),\n    l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2))\n  ];\n}\n\nequalEarthRaw.invert = function(x, y) {\n  var l = y, l2 = l * l, l6 = l2 * l2 * l2;\n  for (var i = 0, delta, fy, fpy; i < iterations; ++i) {\n    fy = l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2)) - y;\n    fpy = A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2);\n    l -= delta = fy / fpy, l2 = l * l, l6 = l2 * l2 * l2;\n    if (abs(delta) < epsilon2) break;\n  }\n  return [\n    M * x * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2)) / cos(l),\n    asin(sin(l) / M)\n  ];\n};\n\nexport default function() {\n  return projection(equalEarthRaw)\n      .scale(177.158);\n}\n", "import {atan, cos, sin} from \"../math.js\";\nimport {azimuthalInvert} from \"./azimuthal.js\";\nimport projection from \"./index.js\";\n\nexport function gnomonicRaw(x, y) {\n  var cy = cos(y), k = cos(x) * cy;\n  return [cy * sin(x) / k, sin(y) / k];\n}\n\ngnomonicRaw.invert = azimuthalInvert(atan);\n\nexport default function() {\n  return projection(gnomonicRaw)\n      .scale(144.049)\n      .clipAngle(60);\n}\n", "import clipRectangle from \"../clip/rectangle.js\";\nimport identity from \"../identity.js\";\nimport {transformer} from \"../transform.js\";\nimport {fitExtent, fitSize, fitWidth, fitHeight} from \"./fit.js\";\nimport {cos, degrees, radians, sin} from \"../math.js\";\n\nexport default function() {\n  var k = 1, tx = 0, ty = 0, sx = 1, sy = 1, // scale, translate and reflect\n      alpha = 0, ca, sa, // angle\n      x0 = null, y0, x1, y1, // clip extent\n      kx = 1, ky = 1,\n      transform = transformer({\n        point: function(x, y) {\n          var p = projection([x, y])\n          this.stream.point(p[0], p[1]);\n        }\n      }),\n      postclip = identity,\n      cache,\n      cacheStream;\n\n  function reset() {\n    kx = k * sx;\n    ky = k * sy;\n    cache = cacheStream = null;\n    return projection;\n  }\n\n  function projection (p) {\n    var x = p[0] * kx, y = p[1] * ky;\n    if (alpha) {\n      var t = y * ca - x * sa;\n      x = x * ca + y * sa;\n      y = t;\n    }    \n    return [x + tx, y + ty];\n  }\n  projection.invert = function(p) {\n    var x = p[0] - tx, y = p[1] - ty;\n    if (alpha) {\n      var t = y * ca + x * sa;\n      x = x * ca - y * sa;\n      y = t;\n    }\n    return [x / kx, y / ky];\n  };\n  projection.stream = function(stream) {\n    return cache && cacheStream === stream ? cache : cache = transform(postclip(cacheStream = stream));\n  };\n  projection.postclip = function(_) {\n    return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;\n  };\n  projection.clipExtent = function(_) {\n    return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity) : clipRectangle(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n  };\n  projection.scale = function(_) {\n    return arguments.length ? (k = +_, reset()) : k;\n  };\n  projection.translate = function(_) {\n    return arguments.length ? (tx = +_[0], ty = +_[1], reset()) : [tx, ty];\n  }\n  projection.angle = function(_) {\n    return arguments.length ? (alpha = _ % 360 * radians, sa = sin(alpha), ca = cos(alpha), reset()) : alpha * degrees;\n  };\n  projection.reflectX = function(_) {\n    return arguments.length ? (sx = _ ? -1 : 1, reset()) : sx < 0;\n  };\n  projection.reflectY = function(_) {\n    return arguments.length ? (sy = _ ? -1 : 1, reset()) : sy < 0;\n  };\n  projection.fitExtent = function(extent, object) {\n    return fitExtent(projection, extent, object);\n  };\n  projection.fitSize = function(size, object) {\n    return fitSize(projection, size, object);\n  };\n  projection.fitWidth = function(width, object) {\n    return fitWidth(projection, width, object);\n  };\n  projection.fitHeight = function(height, object) {\n    return fitHeight(projection, height, object);\n  };\n\n  return projection;\n}\n", "import projection from \"./index.js\";\nimport {abs, epsilon} from \"../math.js\";\n\nexport function naturalEarth1Raw(lambda, phi) {\n  var phi2 = phi * phi, phi4 = phi2 * phi2;\n  return [\n    lambda * (0.8707 - 0.131979 * phi2 + phi4 * (-0.013791 + phi4 * (0.003971 * phi2 - 0.001529 * phi4))),\n    phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4)))\n  ];\n}\n\nnaturalEarth1Raw.invert = function(x, y) {\n  var phi = y, i = 25, delta;\n  do {\n    var phi2 = phi * phi, phi4 = phi2 * phi2;\n    phi -= delta = (phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4))) - y) /\n        (1.007226 + phi2 * (0.015085 * 3 + phi4 * (-0.044475 * 7 + 0.028874 * 9 * phi2 - 0.005916 * 11 * phi4)));\n  } while (abs(delta) > epsilon && --i > 0);\n  return [\n    x / (0.8707 + (phi2 = phi * phi) * (-0.131979 + phi2 * (-0.013791 + phi2 * phi2 * phi2 * (0.003971 - 0.001529 * phi2)))),\n    phi\n  ];\n};\n\nexport default function() {\n  return projection(naturalEarth1Raw)\n      .scale(175.295);\n}\n", "import {asin, cos, epsilon, sin} from \"../math.js\";\nimport {azimuthalInvert} from \"./azimuthal.js\";\nimport projection from \"./index.js\";\n\nexport function orthographicRaw(x, y) {\n  return [cos(y) * sin(x), sin(y)];\n}\n\northographicRaw.invert = azimuthalInvert(asin);\n\nexport default function() {\n  return projection(orthographicRaw)\n      .scale(249.5)\n      .clipAngle(90 + epsilon);\n}\n", "import {atan, cos, sin} from \"../math.js\";\nimport {azimuthalInvert} from \"./azimuthal.js\";\nimport projection from \"./index.js\";\n\nexport function stereographicRaw(x, y) {\n  var cy = cos(y), k = 1 + cos(x) * cy;\n  return [cy * sin(x) / k, sin(y) / k];\n}\n\nstereographicRaw.invert = azimuthalInvert(function(z) {\n  return 2 * atan(z);\n});\n\nexport default function() {\n  return projection(stereographicRaw)\n      .scale(250)\n      .clipAngle(142);\n}\n", "import {atan, exp, halfPi, log, tan} from \"../math.js\";\nimport {mercatorProjection} from \"./mercator.js\";\n\nexport function transverseMercatorRaw(lambda, phi) {\n  return [log(tan((halfPi + phi) / 2)), -lambda];\n}\n\ntransverseMercatorRaw.invert = function(x, y) {\n  return [-y, 2 * atan(exp(x)) - halfPi];\n};\n\nexport default function() {\n  var m = mercatorProjection(transverseMercatorRaw),\n      center = m.center,\n      rotate = m.rotate;\n\n  m.center = function(_) {\n    return arguments.length ? center([-_[1], _[0]]) : (_ = center(), [_[1], -_[0]]);\n  };\n\n  m.rotate = function(_) {\n    return arguments.length ? rotate([_[0], _[1], _.length > 2 ? _[2] + 90 : 90]) : (_ = rotate(), [_[0], _[1], _[2] - 90]);\n  };\n\n  return rotate([0, 0, 90])\n      .scale(159.155);\n}\n"],
  "mappings": "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",
  "names": []
}
